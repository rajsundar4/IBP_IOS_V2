/*
 
 Auto-Generated by SAP NetWeaver Gateway Productivity Accelerator, Version 1.1.1
  
 File: sapsopaServiceV0.h
 Abstract: The generated proxy classes for the sapsopa Service.  
*/

#import "sapsopaServiceV0.h"
#import "BaseODataObject.h"
#import "Logger.h"
#import "ODataEntitySchema.h"
#import "ODataCollection.h"
#import "ODataFunctionImport.h"
#import "TypeConverter.h"

#define SAPSOPA_SERVICE_DOCUMENTV0 @"sapsopaServiceDocumentV0"
#define SAPSOPA_SERVICE_METADATAV0 @"sapsopaServiceMetadataV0"

#pragma mark - Complex Types



#pragma mark - Entity Types


#pragma mark - excludecharsTypeV0
@implementation excludecharsTypeV0

static NSMutableDictionary *excludecharsTypeLabels = nil;
static ODataEntitySchema *excludecharsTypeEntitySchema = nil;

- (id)init
{
    self = [super init];
    if (self) {
        m_SDMEntry = [BaseEntityType createEmptyODataEntryWithSchema:excludecharsTypeEntitySchema error:nil];
        if (!m_SDMEntry) {
            return nil;
        }        
        m_properties = nil;
        self.baseUrl = nil;
    }
    return self;
}



- (ODataEntry *)buildSDMEntryFromPropertiesAndReturnError:(NSError **)error
{
    if (m_SDMEntry) {
        NSError *innerError = nil;
    	[BaseODataObject setIntValueForSDMEntry:m_SDMEntry withValue:self.SP_CHAR_ID forSDMPropertyWithName:@"SP_CHAR_ID" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.SP_CHAR forSDMPropertyWithName:@"SP_CHAR" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.SP_TYPE forSDMPropertyWithName:@"SP_TYPE" error:&innerError];
        if (innerError) {
            if (error) {
                *error = innerError;
            }
            return nil;
        }
	}
    return m_SDMEntry;
}

+ (void)loadEntitySchema:(ODataServiceDocument *)aService
{
    ODataCollection *collectionSchema = [aService.schema getCollectionByName:@"excludechars" workspaceOfCollection:nil];
    excludecharsTypeEntitySchema = collectionSchema.entitySchema;
}

+ (void)loadLabels:(ODataServiceDocument *)aService
{
		NSMutableDictionary *properties = [BaseODataObject getSchemaPropertiesFromCollection:@"excludechars" andService:aService];
    	if (properties) {    
	    	excludecharsTypeLabels = [@{} mutableCopy];
	    	for (ODataPropertyInfo *property in [properties allValues]) {
	        	excludecharsTypeLabels[property.name] = property.label;;
	    	}
	    }
	    else {
        	LOGERROR(@"Failed to load SAP labels from service metadata");
    	}
}


+ (NSString *)getLabelForProperty:(NSString *)aPropertyName
{
    return [BaseODataObject getLabelFromDictionary:excludecharsTypeLabels forProperty:aPropertyName];
}

- (void)loadProperties
{
    [super loadProperties];
	self.SP_CHAR_ID = [self getIntValueForSDMPropertyWithName:@"SP_CHAR_ID"];
	self.SP_CHAR = [self getStringValueForSDMPropertyWithName:@"SP_CHAR"];
	self.SP_TYPE = [self getStringValueForSDMPropertyWithName:@"SP_TYPE"];
}

+ (NSMutableArray *)createExcludecharsTypeEntriesForSDMEntries:(NSMutableArray *)sdmEntries
{
    NSMutableArray *entries = [@[] mutableCopy];
    for (ODataEntry *entry in sdmEntries) {
        excludecharsTypeV0 *excludecharsTypeObject = [[excludecharsTypeV0 alloc] initWithSDMEntry:entry];
        [entries addObject:excludecharsTypeObject];
    }
    return entries;
}


+ (NSMutableArray *)parseExcludecharsTypeEntriesWithData:(NSData *)aData error:(NSError **)error
{
    NSMutableArray *sdmEntries = [BaseEntityType getSDMEntriesForEntitySchema:excludecharsTypeEntitySchema andData:aData error:error];
    if (!sdmEntries) {
    	return nil;
    }
	return [excludecharsTypeV0 createExcludecharsTypeEntriesForSDMEntries:sdmEntries];
}

+ (NSMutableArray *)parseExpandedExcludecharsTypeEntriesWithData:(NSData *)aData andServiceDocument:(ODataServiceDocument *)aServiceDocument error:(NSError **)error
{
    NSMutableArray *sdmEntries = [BaseEntityType getExpandedSDMEntriesForEntitySchema:excludecharsTypeEntitySchema andData:aData andServiceDocument:aServiceDocument error:error];
    if (!sdmEntries) {
    	return nil;
    }
	return [excludecharsTypeV0 createExcludecharsTypeEntriesForSDMEntries:sdmEntries];
}

+ (excludecharsTypeV0 *)parseExcludecharsTypeEntryWithData:(NSData *)aData error:(NSError **)error
{
    NSMutableArray *excludecharsTypeEntries = [excludecharsTypeV0 parseExcludecharsTypeEntriesWithData:aData error:error];
    if (!excludecharsTypeEntries) {
    	return nil;
    }
    return (excludecharsTypeV0 *)[excludecharsTypeV0 getFirstObjectFromArray:excludecharsTypeEntries];
}

+ (excludecharsTypeV0 *)parseExpandedExcludecharsTypeEntryWithData:(NSData *)aData andServiceDocument:(ODataServiceDocument *)aServiceDocument error:(NSError **)error
{
	NSMutableArray *sdmEntries = [BaseEntityType getExpandedSDMEntriesForEntitySchema:excludecharsTypeEntitySchema andData:aData andServiceDocument:aServiceDocument error:error];
    NSMutableArray *excludecharsTypeEntries = [excludecharsTypeV0 createExcludecharsTypeEntriesForSDMEntries:sdmEntries];
	return (excludecharsTypeV0 *)[excludecharsTypeV0 getFirstObjectFromArray:excludecharsTypeEntries];
}



@end

#pragma mark - reportpagedefaultTypeV0
@implementation reportpagedefaultTypeV0

static NSMutableDictionary *reportpagedefaultTypeLabels = nil;
static ODataEntitySchema *reportpagedefaultTypeEntitySchema = nil;

- (id)init
{
    self = [super init];
    if (self) {
        m_SDMEntry = [BaseEntityType createEmptyODataEntryWithSchema:reportpagedefaultTypeEntitySchema error:nil];
        if (!m_SDMEntry) {
            return nil;
        }        
        m_properties = nil;
        self.baseUrl = nil;
    }
    return self;
}



- (ODataEntry *)buildSDMEntryFromPropertiesAndReturnError:(NSError **)error
{
    if (m_SDMEntry) {
        NSError *innerError = nil;
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.USERID forSDMPropertyWithName:@"USERID" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.PAGEID forSDMPropertyWithName:@"PAGEID" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.PAGENAME forSDMPropertyWithName:@"PAGENAME" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.ISOWNER forSDMPropertyWithName:@"ISOWNER" error:&innerError];
        if (innerError) {
            if (error) {
                *error = innerError;
            }
            return nil;
        }
	}
    return m_SDMEntry;
}

+ (void)loadEntitySchema:(ODataServiceDocument *)aService
{
    ODataCollection *collectionSchema = [aService.schema getCollectionByName:@"reportpagedefault" workspaceOfCollection:nil];
    reportpagedefaultTypeEntitySchema = collectionSchema.entitySchema;
}

+ (void)loadLabels:(ODataServiceDocument *)aService
{
		NSMutableDictionary *properties = [BaseODataObject getSchemaPropertiesFromCollection:@"reportpagedefault" andService:aService];
    	if (properties) {    
	    	reportpagedefaultTypeLabels = [@{} mutableCopy];
	    	for (ODataPropertyInfo *property in [properties allValues]) {
	        	reportpagedefaultTypeLabels[property.name] = property.label;;
	    	}
	    }
	    else {
        	LOGERROR(@"Failed to load SAP labels from service metadata");
    	}
}


+ (NSString *)getLabelForProperty:(NSString *)aPropertyName
{
    return [BaseODataObject getLabelFromDictionary:reportpagedefaultTypeLabels forProperty:aPropertyName];
}

- (void)loadProperties
{
    [super loadProperties];
	self.USERID = [self getStringValueForSDMPropertyWithName:@"USERID"];
	self.PAGEID = [self getStringValueForSDMPropertyWithName:@"PAGEID"];
	self.PAGENAME = [self getStringValueForSDMPropertyWithName:@"PAGENAME"];
	self.ISOWNER = [self getStringValueForSDMPropertyWithName:@"ISOWNER"];
}

+ (NSMutableArray *)createReportpagedefaultTypeEntriesForSDMEntries:(NSMutableArray *)sdmEntries
{
    NSMutableArray *entries = [@[] mutableCopy];
    for (ODataEntry *entry in sdmEntries) {
        reportpagedefaultTypeV0 *reportpagedefaultTypeObject = [[reportpagedefaultTypeV0 alloc] initWithSDMEntry:entry];
        [entries addObject:reportpagedefaultTypeObject];
    }
    return entries;
}


+ (NSMutableArray *)parseReportpagedefaultTypeEntriesWithData:(NSData *)aData error:(NSError **)error
{
    NSMutableArray *sdmEntries = [BaseEntityType getSDMEntriesForEntitySchema:reportpagedefaultTypeEntitySchema andData:aData error:error];
    if (!sdmEntries) {
    	return nil;
    }
	return [reportpagedefaultTypeV0 createReportpagedefaultTypeEntriesForSDMEntries:sdmEntries];
}

+ (NSMutableArray *)parseExpandedReportpagedefaultTypeEntriesWithData:(NSData *)aData andServiceDocument:(ODataServiceDocument *)aServiceDocument error:(NSError **)error
{
    NSMutableArray *sdmEntries = [BaseEntityType getExpandedSDMEntriesForEntitySchema:reportpagedefaultTypeEntitySchema andData:aData andServiceDocument:aServiceDocument error:error];
    if (!sdmEntries) {
    	return nil;
    }
	return [reportpagedefaultTypeV0 createReportpagedefaultTypeEntriesForSDMEntries:sdmEntries];
}

+ (reportpagedefaultTypeV0 *)parseReportpagedefaultTypeEntryWithData:(NSData *)aData error:(NSError **)error
{
    NSMutableArray *reportpagedefaultTypeEntries = [reportpagedefaultTypeV0 parseReportpagedefaultTypeEntriesWithData:aData error:error];
    if (!reportpagedefaultTypeEntries) {
    	return nil;
    }
    return (reportpagedefaultTypeV0 *)[reportpagedefaultTypeV0 getFirstObjectFromArray:reportpagedefaultTypeEntries];
}

+ (reportpagedefaultTypeV0 *)parseExpandedReportpagedefaultTypeEntryWithData:(NSData *)aData andServiceDocument:(ODataServiceDocument *)aServiceDocument error:(NSError **)error
{
	NSMutableArray *sdmEntries = [BaseEntityType getExpandedSDMEntriesForEntitySchema:reportpagedefaultTypeEntitySchema andData:aData andServiceDocument:aServiceDocument error:error];
    NSMutableArray *reportpagedefaultTypeEntries = [reportpagedefaultTypeV0 createReportpagedefaultTypeEntriesForSDMEntries:sdmEntries];
	return (reportpagedefaultTypeV0 *)[reportpagedefaultTypeV0 getFirstObjectFromArray:reportpagedefaultTypeEntries];
}



@end

#pragma mark - reportsTypeV0
@implementation reportsTypeV0

static NSMutableDictionary *reportsTypeLabels = nil;
static ODataEntitySchema *reportsTypeEntitySchema = nil;

- (id)init
{
    self = [super init];
    if (self) {
        m_SDMEntry = [BaseEntityType createEmptyODataEntryWithSchema:reportsTypeEntitySchema error:nil];
        if (!m_SDMEntry) {
            return nil;
        }        
        m_properties = nil;
        self.baseUrl = nil;
    }
    return self;
}

- (NSMutableDictionary *)getSDMEntriesForNavigationProperties
{
    NSMutableDictionary *dictionary = [@{} mutableCopy];
    if ([self.report count] > 0) {
    	dictionary[@"report"] = [self createSDMEntriesForNavigationPropertyEntries:self.report];
    }
    if ([self.reportqueryconstraints count] > 0) {
    	dictionary[@"reportqueryconstraints"] = [self createSDMEntriesForNavigationPropertyEntries:self.reportqueryconstraints];
    }
    if ([self.reportviewsfilter count] > 0) {
    	dictionary[@"reportviewsfilter"] = [self createSDMEntriesForNavigationPropertyEntries:self.reportviewsfilter];
    }
    return dictionary;
}


- (ODataEntry *)buildSDMEntryFromPropertiesAndReturnError:(NSError **)error
{
    if (m_SDMEntry) {
        NSError *innerError = nil;
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.REPORTID forSDMPropertyWithName:@"REPORTID" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.REPORTNAME forSDMPropertyWithName:@"REPORTNAME" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.REPORTDESCR forSDMPropertyWithName:@"REPORTDESCR" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.ISMOBILEENABLED forSDMPropertyWithName:@"ISMOBILEENABLED" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.CREATEDBY forSDMPropertyWithName:@"CREATEDBY" error:&innerError];
    	[BaseODataObject setDateTimeValueForSDMEntry:m_SDMEntry withValue:self.CREATEDDATE forSDMPropertyWithName:@"CREATEDDATE" error:&innerError];
    	[BaseODataObject setDateTimeValueForSDMEntry:m_SDMEntry withValue:self.LASTMODIFIEDDATE forSDMPropertyWithName:@"LASTMODIFIEDDATE" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.LASTMODIFIEDBY forSDMPropertyWithName:@"LASTMODIFIEDBY" error:&innerError];
        [self addRelativeLinksToSDMEntryFromDictionary:[self getSDMEntriesForNavigationProperties]];
        if (innerError) {
            if (error) {
                *error = innerError;
            }
            return nil;
        }
	}
    return m_SDMEntry;
}

+ (void)loadEntitySchema:(ODataServiceDocument *)aService
{
    ODataCollection *collectionSchema = [aService.schema getCollectionByName:@"reports" workspaceOfCollection:nil];
    reportsTypeEntitySchema = collectionSchema.entitySchema;
}

+ (void)loadLabels:(ODataServiceDocument *)aService
{
		NSMutableDictionary *properties = [BaseODataObject getSchemaPropertiesFromCollection:@"reports" andService:aService];
    	if (properties) {    
	    	reportsTypeLabels = [@{} mutableCopy];
	    	for (ODataPropertyInfo *property in [properties allValues]) {
	        	reportsTypeLabels[property.name] = property.label;;
	    	}
	    }
	    else {
        	LOGERROR(@"Failed to load SAP labels from service metadata");
    	}
}


+ (NSString *)getLabelForProperty:(NSString *)aPropertyName
{
    return [BaseODataObject getLabelFromDictionary:reportsTypeLabels forProperty:aPropertyName];
}

- (void)loadProperties
{
    [super loadProperties];
	self.REPORTID = [self getStringValueForSDMPropertyWithName:@"REPORTID"];
	self.REPORTNAME = [self getStringValueForSDMPropertyWithName:@"REPORTNAME"];
	self.REPORTDESCR = [self getStringValueForSDMPropertyWithName:@"REPORTDESCR"];
	self.ISMOBILEENABLED = [self getStringValueForSDMPropertyWithName:@"ISMOBILEENABLED"];
	self.CREATEDBY = [self getStringValueForSDMPropertyWithName:@"CREATEDBY"];
	self.CREATEDDATE = [self getDateTimeValueForSDMPropertyWithName:@"CREATEDDATE"];
	self.LASTMODIFIEDDATE = [self getDateTimeValueForSDMPropertyWithName:@"LASTMODIFIEDDATE"];
	self.LASTMODIFIEDBY = [self getStringValueForSDMPropertyWithName:@"LASTMODIFIEDBY"];
}

- (void)loadNavigationPropertyQueries
{
    [super loadNavigationPropertyQueries];
    self.reportQuery = [self getRelatedLinkForNavigationName:@"report"];
    self.reportqueryconstraintsQuery = [self getRelatedLinkForNavigationName:@"reportqueryconstraints"];
    self.reportviewsfilterQuery = [self getRelatedLinkForNavigationName:@"reportviewsfilter"];
}

- (void)loadNavigationPropertyData
{
    [super loadNavigationPropertyData];
    
    NSMutableArray *entries = nil;

    entries = [self getInlinedRelatedEntriesForNavigationName:@"report"];
    self.report = [reportTypeV0 createReportTypeEntriesForSDMEntries:entries];

    entries = [self getInlinedRelatedEntriesForNavigationName:@"reportqueryconstraints"];
    self.reportqueryconstraints = [reportqueryconstraintsTypeV0 createReportqueryconstraintsTypeEntriesForSDMEntries:entries];

    entries = [self getInlinedRelatedEntriesForNavigationName:@"reportviewsfilter"];
    self.reportviewsfilter = [reportviewsfilterTypeV0 createReportviewsfilterTypeEntriesForSDMEntries:entries];

}

+ (NSMutableArray *)createReportsTypeEntriesForSDMEntries:(NSMutableArray *)sdmEntries
{
    NSMutableArray *entries = [@[] mutableCopy];
    for (ODataEntry *entry in sdmEntries) {
        reportsTypeV0 *reportsTypeObject = [[reportsTypeV0 alloc] initWithSDMEntry:entry];
        [entries addObject:reportsTypeObject];
    }
    return entries;
}


+ (NSMutableArray *)parseReportsTypeEntriesWithData:(NSData *)aData error:(NSError **)error
{
    NSMutableArray *sdmEntries = [BaseEntityType getSDMEntriesForEntitySchema:reportsTypeEntitySchema andData:aData error:error];
    if (!sdmEntries) {
    	return nil;
    }
	return [reportsTypeV0 createReportsTypeEntriesForSDMEntries:sdmEntries];
}

+ (NSMutableArray *)parseExpandedReportsTypeEntriesWithData:(NSData *)aData andServiceDocument:(ODataServiceDocument *)aServiceDocument error:(NSError **)error
{
    NSMutableArray *sdmEntries = [BaseEntityType getExpandedSDMEntriesForEntitySchema:reportsTypeEntitySchema andData:aData andServiceDocument:aServiceDocument error:error];
    if (!sdmEntries) {
    	return nil;
    }
	return [reportsTypeV0 createReportsTypeEntriesForSDMEntries:sdmEntries];
}

+ (reportsTypeV0 *)parseReportsTypeEntryWithData:(NSData *)aData error:(NSError **)error
{
    NSMutableArray *reportsTypeEntries = [reportsTypeV0 parseReportsTypeEntriesWithData:aData error:error];
    if (!reportsTypeEntries) {
    	return nil;
    }
    return (reportsTypeV0 *)[reportsTypeV0 getFirstObjectFromArray:reportsTypeEntries];
}

+ (reportsTypeV0 *)parseExpandedReportsTypeEntryWithData:(NSData *)aData andServiceDocument:(ODataServiceDocument *)aServiceDocument error:(NSError **)error
{
	NSMutableArray *sdmEntries = [BaseEntityType getExpandedSDMEntriesForEntitySchema:reportsTypeEntitySchema andData:aData andServiceDocument:aServiceDocument error:error];
    NSMutableArray *reportsTypeEntries = [reportsTypeV0 createReportsTypeEntriesForSDMEntries:sdmEntries];
	return (reportsTypeV0 *)[reportsTypeV0 getFirstObjectFromArray:reportsTypeEntries];
}


#pragma mark Entity Navigation Property loading methods
- (BOOL)loadReportWithData:(NSData *)aData error:(NSError **)error
{
    self.report = [reportTypeV0 parseReportTypeEntriesWithData:aData error:error];
    if (!self.report) {
    	return NO;
    }
    return YES;
}

- (BOOL)loadReportqueryconstraintsWithData:(NSData *)aData error:(NSError **)error
{
    self.reportqueryconstraints = [reportqueryconstraintsTypeV0 parseReportqueryconstraintsTypeEntriesWithData:aData error:error];
    if (!self.reportqueryconstraints) {
    	return NO;
    }
    return YES;
}

- (BOOL)loadReportviewsfilterWithData:(NSData *)aData error:(NSError **)error
{
    self.reportviewsfilter = [reportviewsfilterTypeV0 parseReportviewsfilterTypeEntriesWithData:aData error:error];
    if (!self.reportviewsfilter) {
    	return NO;
    }
    return YES;
}


@end

#pragma mark - reportpagesTypeV0
@implementation reportpagesTypeV0

static NSMutableDictionary *reportpagesTypeLabels = nil;
static ODataEntitySchema *reportpagesTypeEntitySchema = nil;

- (id)init
{
    self = [super init];
    if (self) {
        m_SDMEntry = [BaseEntityType createEmptyODataEntryWithSchema:reportpagesTypeEntitySchema error:nil];
        if (!m_SDMEntry) {
            return nil;
        }        
        m_properties = nil;
        self.baseUrl = nil;
    }
    return self;
}

- (NSMutableDictionary *)getSDMEntriesForNavigationProperties
{
    NSMutableDictionary *dictionary = [@{} mutableCopy];
    if ([self.reportpagelayout count] > 0) {
    	dictionary[@"reportpagelayout"] = [self createSDMEntriesForNavigationPropertyEntries:self.reportpagelayout];
    }
    if ([self.sharedobjects count] > 0) {
    	dictionary[@"sharedobjects"] = [self createSDMEntriesForNavigationPropertyEntries:self.sharedobjects];
    }
    if ([self.reportpagenav count] > 0) {
    	dictionary[@"reportpagenav"] = [self createSDMEntriesForNavigationPropertyEntries:self.reportpagenav];
    }
    return dictionary;
}


- (ODataEntry *)buildSDMEntryFromPropertiesAndReturnError:(NSError **)error
{
    if (m_SDMEntry) {
        NSError *innerError = nil;
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.REPORTPAGEID forSDMPropertyWithName:@"REPORTPAGEID" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.REPORTPAGENAME forSDMPropertyWithName:@"REPORTPAGENAME" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.REPORTPAGEDESCR forSDMPropertyWithName:@"REPORTPAGEDESCR" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.REPORTPAGETYPE forSDMPropertyWithName:@"REPORTPAGETYPE" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.ISOWNER forSDMPropertyWithName:@"ISOWNER" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.ISSHARED forSDMPropertyWithName:@"ISSHARED" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.ISMOBILEENABLED forSDMPropertyWithName:@"ISMOBILEENABLED" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.LAYOUTID forSDMPropertyWithName:@"LAYOUTID" error:&innerError];
    	[BaseODataObject setIntValueForSDMEntry:m_SDMEntry withValue:self.NUMBEROFROWS forSDMPropertyWithName:@"NUMBEROFROWS" error:&innerError];
    	[BaseODataObject setIntValueForSDMEntry:m_SDMEntry withValue:self.NUMBEROFCOLUMNS forSDMPropertyWithName:@"NUMBEROFCOLUMNS" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.ROWHEIGHT forSDMPropertyWithName:@"ROWHEIGHT" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.COLUMNWIDTH forSDMPropertyWithName:@"COLUMNWIDTH" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.CREATEDBY forSDMPropertyWithName:@"CREATEDBY" error:&innerError];
    	[BaseODataObject setDateTimeValueForSDMEntry:m_SDMEntry withValue:self.CREATEDDATE forSDMPropertyWithName:@"CREATEDDATE" error:&innerError];
    	[BaseODataObject setDateTimeValueForSDMEntry:m_SDMEntry withValue:self.LASTMODIFIEDDATE forSDMPropertyWithName:@"LASTMODIFIEDDATE" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.LASTMODIFIEDBY forSDMPropertyWithName:@"LASTMODIFIEDBY" error:&innerError];
        [self addRelativeLinksToSDMEntryFromDictionary:[self getSDMEntriesForNavigationProperties]];
        if (innerError) {
            if (error) {
                *error = innerError;
            }
            return nil;
        }
	}
    return m_SDMEntry;
}

+ (void)loadEntitySchema:(ODataServiceDocument *)aService
{
    ODataCollection *collectionSchema = [aService.schema getCollectionByName:@"reportpages" workspaceOfCollection:nil];
    reportpagesTypeEntitySchema = collectionSchema.entitySchema;
}

+ (void)loadLabels:(ODataServiceDocument *)aService
{
		NSMutableDictionary *properties = [BaseODataObject getSchemaPropertiesFromCollection:@"reportpages" andService:aService];
    	if (properties) {    
	    	reportpagesTypeLabels = [@{} mutableCopy];
	    	for (ODataPropertyInfo *property in [properties allValues]) {
	        	reportpagesTypeLabels[property.name] = property.label;;
	    	}
	    }
	    else {
        	LOGERROR(@"Failed to load SAP labels from service metadata");
    	}
}


+ (NSString *)getLabelForProperty:(NSString *)aPropertyName
{
    return [BaseODataObject getLabelFromDictionary:reportpagesTypeLabels forProperty:aPropertyName];
}

- (void)loadProperties
{
    [super loadProperties];
	self.REPORTPAGEID = [self getStringValueForSDMPropertyWithName:@"REPORTPAGEID"];
	self.REPORTPAGENAME = [self getStringValueForSDMPropertyWithName:@"REPORTPAGENAME"];
	self.REPORTPAGEDESCR = [self getStringValueForSDMPropertyWithName:@"REPORTPAGEDESCR"];
	self.REPORTPAGETYPE = [self getStringValueForSDMPropertyWithName:@"REPORTPAGETYPE"];
	self.ISOWNER = [self getStringValueForSDMPropertyWithName:@"ISOWNER"];
	self.ISSHARED = [self getStringValueForSDMPropertyWithName:@"ISSHARED"];
	self.ISMOBILEENABLED = [self getStringValueForSDMPropertyWithName:@"ISMOBILEENABLED"];
	self.LAYOUTID = [self getStringValueForSDMPropertyWithName:@"LAYOUTID"];
	self.NUMBEROFROWS = [self getIntValueForSDMPropertyWithName:@"NUMBEROFROWS"];
	self.NUMBEROFCOLUMNS = [self getIntValueForSDMPropertyWithName:@"NUMBEROFCOLUMNS"];
	self.ROWHEIGHT = [self getStringValueForSDMPropertyWithName:@"ROWHEIGHT"];
	self.COLUMNWIDTH = [self getStringValueForSDMPropertyWithName:@"COLUMNWIDTH"];
	self.CREATEDBY = [self getStringValueForSDMPropertyWithName:@"CREATEDBY"];
	self.CREATEDDATE = [self getDateTimeValueForSDMPropertyWithName:@"CREATEDDATE"];
	self.LASTMODIFIEDDATE = [self getDateTimeValueForSDMPropertyWithName:@"LASTMODIFIEDDATE"];
	self.LASTMODIFIEDBY = [self getStringValueForSDMPropertyWithName:@"LASTMODIFIEDBY"];
}

- (void)loadNavigationPropertyQueries
{
    [super loadNavigationPropertyQueries];
    self.reportpagelayoutQuery = [self getRelatedLinkForNavigationName:@"reportpagelayout"];
    self.sharedobjectsQuery = [self getRelatedLinkForNavigationName:@"sharedobjects"];
    self.reportpagenavQuery = [self getRelatedLinkForNavigationName:@"reportpagenav"];
}

- (void)loadNavigationPropertyData
{
    [super loadNavigationPropertyData];
    
    NSMutableArray *entries = nil;

    entries = [self getInlinedRelatedEntriesForNavigationName:@"reportpagelayout"];
    self.reportpagelayout = [reportpagelayoutTypeV0 createReportpagelayoutTypeEntriesForSDMEntries:entries];

    entries = [self getInlinedRelatedEntriesForNavigationName:@"sharedobjects"];
    self.sharedobjects = [sharedobjectsTypeV0 createSharedobjectsTypeEntriesForSDMEntries:entries];

    entries = [self getInlinedRelatedEntriesForNavigationName:@"reportpagenav"];
    self.reportpagenav = [reportpagenavTypeV0 createReportpagenavTypeEntriesForSDMEntries:entries];

}

+ (NSMutableArray *)createReportpagesTypeEntriesForSDMEntries:(NSMutableArray *)sdmEntries
{
    NSMutableArray *entries = [@[] mutableCopy];
    for (ODataEntry *entry in sdmEntries) {
        reportpagesTypeV0 *reportpagesTypeObject = [[reportpagesTypeV0 alloc] initWithSDMEntry:entry];
        [entries addObject:reportpagesTypeObject];
    }
    return entries;
}


+ (NSMutableArray *)parseReportpagesTypeEntriesWithData:(NSData *)aData error:(NSError **)error
{
    NSMutableArray *sdmEntries = [BaseEntityType getSDMEntriesForEntitySchema:reportpagesTypeEntitySchema andData:aData error:error];
    if (!sdmEntries) {
    	return nil;
    }
	return [reportpagesTypeV0 createReportpagesTypeEntriesForSDMEntries:sdmEntries];
}

+ (NSMutableArray *)parseExpandedReportpagesTypeEntriesWithData:(NSData *)aData andServiceDocument:(ODataServiceDocument *)aServiceDocument error:(NSError **)error
{
    NSMutableArray *sdmEntries = [BaseEntityType getExpandedSDMEntriesForEntitySchema:reportpagesTypeEntitySchema andData:aData andServiceDocument:aServiceDocument error:error];
    if (!sdmEntries) {
    	return nil;
    }
	return [reportpagesTypeV0 createReportpagesTypeEntriesForSDMEntries:sdmEntries];
}

+ (reportpagesTypeV0 *)parseReportpagesTypeEntryWithData:(NSData *)aData error:(NSError **)error
{
    NSMutableArray *reportpagesTypeEntries = [reportpagesTypeV0 parseReportpagesTypeEntriesWithData:aData error:error];
    if (!reportpagesTypeEntries) {
    	return nil;
    }
    return (reportpagesTypeV0 *)[reportpagesTypeV0 getFirstObjectFromArray:reportpagesTypeEntries];
}

+ (reportpagesTypeV0 *)parseExpandedReportpagesTypeEntryWithData:(NSData *)aData andServiceDocument:(ODataServiceDocument *)aServiceDocument error:(NSError **)error
{
	NSMutableArray *sdmEntries = [BaseEntityType getExpandedSDMEntriesForEntitySchema:reportpagesTypeEntitySchema andData:aData andServiceDocument:aServiceDocument error:error];
    NSMutableArray *reportpagesTypeEntries = [reportpagesTypeV0 createReportpagesTypeEntriesForSDMEntries:sdmEntries];
	return (reportpagesTypeV0 *)[reportpagesTypeV0 getFirstObjectFromArray:reportpagesTypeEntries];
}


#pragma mark Entity Navigation Property loading methods
- (BOOL)loadReportpagelayoutWithData:(NSData *)aData error:(NSError **)error
{
    self.reportpagelayout = [reportpagelayoutTypeV0 parseReportpagelayoutTypeEntriesWithData:aData error:error];
    if (!self.reportpagelayout) {
    	return NO;
    }
    return YES;
}

- (BOOL)loadSharedobjectsWithData:(NSData *)aData error:(NSError **)error
{
    self.sharedobjects = [sharedobjectsTypeV0 parseSharedobjectsTypeEntriesWithData:aData error:error];
    if (!self.sharedobjects) {
    	return NO;
    }
    return YES;
}

- (BOOL)loadReportpagenavWithData:(NSData *)aData error:(NSError **)error
{
    self.reportpagenav = [reportpagenavTypeV0 parseReportpagenavTypeEntriesWithData:aData error:error];
    if (!self.reportpagenav) {
    	return NO;
    }
    return YES;
}


@end

#pragma mark - reportviewsTypeV0
@implementation reportviewsTypeV0

static NSMutableDictionary *reportviewsTypeLabels = nil;
static ODataEntitySchema *reportviewsTypeEntitySchema = nil;

- (id)init
{
    self = [super init];
    if (self) {
        m_SDMEntry = [BaseEntityType createEmptyODataEntryWithSchema:reportviewsTypeEntitySchema error:nil];
        if (!m_SDMEntry) {
            return nil;
        }        
        m_properties = nil;
        self.baseUrl = nil;
    }
    return self;
}

- (NSMutableDictionary *)getSDMEntriesForNavigationProperties
{
    NSMutableDictionary *dictionary = [@{} mutableCopy];
    if ([self.reportview count] > 0) {
    	dictionary[@"reportview"] = [self createSDMEntriesForNavigationPropertyEntries:self.reportview];
    }
    if ([self.sharedobjects count] > 0) {
    	dictionary[@"sharedobjects"] = [self createSDMEntriesForNavigationPropertyEntries:self.sharedobjects];
    }
    if ([self.reportviewpages count] > 0) {
    	dictionary[@"reportviewpages"] = [self createSDMEntriesForNavigationPropertyEntries:self.reportviewpages];
    }
    if ([self.reportviewwbfav count] > 0) {
    	dictionary[@"reportviewwbfav"] = [self createSDMEntriesForNavigationPropertyEntries:self.reportviewwbfav];
    }
    return dictionary;
}


- (ODataEntry *)buildSDMEntryFromPropertiesAndReturnError:(NSError **)error
{
    if (m_SDMEntry) {
        NSError *innerError = nil;
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.REPORTVIEWID forSDMPropertyWithName:@"REPORTVIEWID" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.REPORTVIEWNAME forSDMPropertyWithName:@"REPORTVIEWNAME" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.REPORTVIEWDESCR forSDMPropertyWithName:@"REPORTVIEWDESCR" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.REPORTVIEWTYPE forSDMPropertyWithName:@"REPORTVIEWTYPE" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.ISOWNER forSDMPropertyWithName:@"ISOWNER" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.ISSHARED forSDMPropertyWithName:@"ISSHARED" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.ISMOBILEENABLED forSDMPropertyWithName:@"ISMOBILEENABLED" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.REPORTID forSDMPropertyWithName:@"REPORTID" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.IS_KPI forSDMPropertyWithName:@"IS_KPI" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.DISPLAYLEGEND forSDMPropertyWithName:@"DISPLAYLEGEND" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.LEGENDPOSITION forSDMPropertyWithName:@"LEGENDPOSITION" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.IS_ROLLING forSDMPropertyWithName:@"IS_ROLLING" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.IS_GEOENABLED forSDMPropertyWithName:@"IS_GEOENABLED" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.BENCHMARK forSDMPropertyWithName:@"BENCHMARK" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.BENCHMARK_PLAREA forSDMPropertyWithName:@"BENCHMARK_PLAREA" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.BENCHMARKNAME forSDMPropertyWithName:@"BENCHMARKNAME" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.CREATEDBY forSDMPropertyWithName:@"CREATEDBY" error:&innerError];
    	[BaseODataObject setDateTimeValueForSDMEntry:m_SDMEntry withValue:self.CREATEDDATE forSDMPropertyWithName:@"CREATEDDATE" error:&innerError];
    	[BaseODataObject setDateTimeValueForSDMEntry:m_SDMEntry withValue:self.LASTMODIFIEDDATE forSDMPropertyWithName:@"LASTMODIFIEDDATE" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.LASTMODIFIEDBY forSDMPropertyWithName:@"LASTMODIFIEDBY" error:&innerError];
        [self addRelativeLinksToSDMEntryFromDictionary:[self getSDMEntriesForNavigationProperties]];
        if (innerError) {
            if (error) {
                *error = innerError;
            }
            return nil;
        }
	}
    return m_SDMEntry;
}

+ (void)loadEntitySchema:(ODataServiceDocument *)aService
{
    ODataCollection *collectionSchema = [aService.schema getCollectionByName:@"reportviews" workspaceOfCollection:nil];
    reportviewsTypeEntitySchema = collectionSchema.entitySchema;
}

+ (void)loadLabels:(ODataServiceDocument *)aService
{
		NSMutableDictionary *properties = [BaseODataObject getSchemaPropertiesFromCollection:@"reportviews" andService:aService];
    	if (properties) {    
	    	reportviewsTypeLabels = [@{} mutableCopy];
	    	for (ODataPropertyInfo *property in [properties allValues]) {
	        	reportviewsTypeLabels[property.name] = property.label;;
	    	}
	    }
	    else {
        	LOGERROR(@"Failed to load SAP labels from service metadata");
    	}
}


+ (NSString *)getLabelForProperty:(NSString *)aPropertyName
{
    return [BaseODataObject getLabelFromDictionary:reportviewsTypeLabels forProperty:aPropertyName];
}

- (void)loadProperties
{
    [super loadProperties];
	self.REPORTVIEWID = [self getStringValueForSDMPropertyWithName:@"REPORTVIEWID"];
	self.REPORTVIEWNAME = [self getStringValueForSDMPropertyWithName:@"REPORTVIEWNAME"];
	self.REPORTVIEWDESCR = [self getStringValueForSDMPropertyWithName:@"REPORTVIEWDESCR"];
	self.REPORTVIEWTYPE = [self getStringValueForSDMPropertyWithName:@"REPORTVIEWTYPE"];
	self.ISOWNER = [self getStringValueForSDMPropertyWithName:@"ISOWNER"];
	self.ISSHARED = [self getStringValueForSDMPropertyWithName:@"ISSHARED"];
	self.ISMOBILEENABLED = [self getStringValueForSDMPropertyWithName:@"ISMOBILEENABLED"];
	self.REPORTID = [self getStringValueForSDMPropertyWithName:@"REPORTID"];
	self.IS_KPI = [self getStringValueForSDMPropertyWithName:@"IS_KPI"];
	self.DISPLAYLEGEND = [self getStringValueForSDMPropertyWithName:@"DISPLAYLEGEND"];
	self.LEGENDPOSITION = [self getStringValueForSDMPropertyWithName:@"LEGENDPOSITION"];
	self.IS_ROLLING = [self getStringValueForSDMPropertyWithName:@"IS_ROLLING"];
	self.IS_GEOENABLED = [self getStringValueForSDMPropertyWithName:@"IS_GEOENABLED"];
	self.BENCHMARK = [self getStringValueForSDMPropertyWithName:@"BENCHMARK"];
	self.BENCHMARK_PLAREA = [self getStringValueForSDMPropertyWithName:@"BENCHMARK_PLAREA"];
	self.BENCHMARKNAME = [self getStringValueForSDMPropertyWithName:@"BENCHMARKNAME"];
	self.CREATEDBY = [self getStringValueForSDMPropertyWithName:@"CREATEDBY"];
	self.CREATEDDATE = [self getDateTimeValueForSDMPropertyWithName:@"CREATEDDATE"];
	self.LASTMODIFIEDDATE = [self getDateTimeValueForSDMPropertyWithName:@"LASTMODIFIEDDATE"];
	self.LASTMODIFIEDBY = [self getStringValueForSDMPropertyWithName:@"LASTMODIFIEDBY"];
}

- (void)loadNavigationPropertyQueries
{
    [super loadNavigationPropertyQueries];
    self.reportviewQuery = [self getRelatedLinkForNavigationName:@"reportview"];
    self.sharedobjectsQuery = [self getRelatedLinkForNavigationName:@"sharedobjects"];
    self.reportviewpagesQuery = [self getRelatedLinkForNavigationName:@"reportviewpages"];
    self.reportviewwbfavQuery = [self getRelatedLinkForNavigationName:@"reportviewwbfav"];
}

- (void)loadNavigationPropertyData
{
    [super loadNavigationPropertyData];
    
    NSMutableArray *entries = nil;

    entries = [self getInlinedRelatedEntriesForNavigationName:@"reportview"];
    self.reportview = [reportviewTypeV0 createReportviewTypeEntriesForSDMEntries:entries];

    entries = [self getInlinedRelatedEntriesForNavigationName:@"sharedobjects"];
    self.sharedobjects = [sharedobjectsTypeV0 createSharedobjectsTypeEntriesForSDMEntries:entries];

    entries = [self getInlinedRelatedEntriesForNavigationName:@"reportviewpages"];
    self.reportviewpages = [reportviewpagesTypeV0 createReportviewpagesTypeEntriesForSDMEntries:entries];

    entries = [self getInlinedRelatedEntriesForNavigationName:@"reportviewwbfav"];
    self.reportviewwbfav = [reportviewwbfavTypeV0 createReportviewwbfavTypeEntriesForSDMEntries:entries];

}

+ (NSMutableArray *)createReportviewsTypeEntriesForSDMEntries:(NSMutableArray *)sdmEntries
{
    NSMutableArray *entries = [@[] mutableCopy];
    for (ODataEntry *entry in sdmEntries) {
        reportviewsTypeV0 *reportviewsTypeObject = [[reportviewsTypeV0 alloc] initWithSDMEntry:entry];
        [entries addObject:reportviewsTypeObject];
    }
    return entries;
}


+ (NSMutableArray *)parseReportviewsTypeEntriesWithData:(NSData *)aData error:(NSError **)error
{
    NSMutableArray *sdmEntries = [BaseEntityType getSDMEntriesForEntitySchema:reportviewsTypeEntitySchema andData:aData error:error];
    if (!sdmEntries) {
    	return nil;
    }
	return [reportviewsTypeV0 createReportviewsTypeEntriesForSDMEntries:sdmEntries];
}

+ (NSMutableArray *)parseExpandedReportviewsTypeEntriesWithData:(NSData *)aData andServiceDocument:(ODataServiceDocument *)aServiceDocument error:(NSError **)error
{
    NSMutableArray *sdmEntries = [BaseEntityType getExpandedSDMEntriesForEntitySchema:reportviewsTypeEntitySchema andData:aData andServiceDocument:aServiceDocument error:error];
    if (!sdmEntries) {
    	return nil;
    }
	return [reportviewsTypeV0 createReportviewsTypeEntriesForSDMEntries:sdmEntries];
}

+ (reportviewsTypeV0 *)parseReportviewsTypeEntryWithData:(NSData *)aData error:(NSError **)error
{
    NSMutableArray *reportviewsTypeEntries = [reportviewsTypeV0 parseReportviewsTypeEntriesWithData:aData error:error];
    if (!reportviewsTypeEntries) {
    	return nil;
    }
    return (reportviewsTypeV0 *)[reportviewsTypeV0 getFirstObjectFromArray:reportviewsTypeEntries];
}

+ (reportviewsTypeV0 *)parseExpandedReportviewsTypeEntryWithData:(NSData *)aData andServiceDocument:(ODataServiceDocument *)aServiceDocument error:(NSError **)error
{
	NSMutableArray *sdmEntries = [BaseEntityType getExpandedSDMEntriesForEntitySchema:reportviewsTypeEntitySchema andData:aData andServiceDocument:aServiceDocument error:error];
    NSMutableArray *reportviewsTypeEntries = [reportviewsTypeV0 createReportviewsTypeEntriesForSDMEntries:sdmEntries];
	return (reportviewsTypeV0 *)[reportviewsTypeV0 getFirstObjectFromArray:reportviewsTypeEntries];
}


#pragma mark Entity Navigation Property loading methods
- (BOOL)loadReportviewWithData:(NSData *)aData error:(NSError **)error
{
    self.reportview = [reportviewTypeV0 parseReportviewTypeEntriesWithData:aData error:error];
    if (!self.reportview) {
    	return NO;
    }
    return YES;
}

- (BOOL)loadSharedobjectsWithData:(NSData *)aData error:(NSError **)error
{
    self.sharedobjects = [sharedobjectsTypeV0 parseSharedobjectsTypeEntriesWithData:aData error:error];
    if (!self.sharedobjects) {
    	return NO;
    }
    return YES;
}

- (BOOL)loadReportviewpagesWithData:(NSData *)aData error:(NSError **)error
{
    self.reportviewpages = [reportviewpagesTypeV0 parseReportviewpagesTypeEntriesWithData:aData error:error];
    if (!self.reportviewpages) {
    	return NO;
    }
    return YES;
}

- (BOOL)loadReportviewwbfavWithData:(NSData *)aData error:(NSError **)error
{
    self.reportviewwbfav = [reportviewwbfavTypeV0 parseReportviewwbfavTypeEntriesWithData:aData error:error];
    if (!self.reportviewwbfav) {
    	return NO;
    }
    return YES;
}


@end

#pragma mark - reportpagelayoutTypeV0
@implementation reportpagelayoutTypeV0

static NSMutableDictionary *reportpagelayoutTypeLabels = nil;
static ODataEntitySchema *reportpagelayoutTypeEntitySchema = nil;

- (id)init
{
    self = [super init];
    if (self) {
        m_SDMEntry = [BaseEntityType createEmptyODataEntryWithSchema:reportpagelayoutTypeEntitySchema error:nil];
        if (!m_SDMEntry) {
            return nil;
        }        
        m_properties = nil;
        self.baseUrl = nil;
    }
    return self;
}

- (NSMutableDictionary *)getSDMEntriesForNavigationProperties
{
    NSMutableDictionary *dictionary = [@{} mutableCopy];
    if ([self.reportview count] > 0) {
    	dictionary[@"reportview"] = [self createSDMEntriesForNavigationPropertyEntries:self.reportview];
    }
    return dictionary;
}


- (ODataEntry *)buildSDMEntryFromPropertiesAndReturnError:(NSError **)error
{
    if (m_SDMEntry) {
        NSError *innerError = nil;
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.REPORTPAGEID forSDMPropertyWithName:@"REPORTPAGEID" error:&innerError];
    	[BaseODataObject setIntValueForSDMEntry:m_SDMEntry withValue:self.ROWNUMBER forSDMPropertyWithName:@"ROWNUMBER" error:&innerError];
    	[BaseODataObject setIntValueForSDMEntry:m_SDMEntry withValue:self.COLUMNNUMBER forSDMPropertyWithName:@"COLUMNNUMBER" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.REPORTID forSDMPropertyWithName:@"REPORTID" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.REPORTVIEWNAME forSDMPropertyWithName:@"REPORTVIEWNAME" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.REPORTVIEWID forSDMPropertyWithName:@"REPORTVIEWID" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.REPORTVIEWTYPE forSDMPropertyWithName:@"REPORTVIEWTYPE" error:&innerError];
    	[BaseODataObject setIntValueForSDMEntry:m_SDMEntry withValue:self.ROWSPAN forSDMPropertyWithName:@"ROWSPAN" error:&innerError];
    	[BaseODataObject setIntValueForSDMEntry:m_SDMEntry withValue:self.COLUMNSPAN forSDMPropertyWithName:@"COLUMNSPAN" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.LEGENDPOSITION forSDMPropertyWithName:@"LEGENDPOSITION" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.NAVIGATIONID forSDMPropertyWithName:@"NAVIGATIONID" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.DISPLAYLEGEND forSDMPropertyWithName:@"DISPLAYLEGEND" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.IS_KPI forSDMPropertyWithName:@"IS_KPI" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.IS_GEOENABLED forSDMPropertyWithName:@"IS_GEOENABLED" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.ISPAGEOWNER forSDMPropertyWithName:@"ISPAGEOWNER" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.ISVIEWOWNER forSDMPropertyWithName:@"ISVIEWOWNER" error:&innerError];
        [self addRelativeLinksToSDMEntryFromDictionary:[self getSDMEntriesForNavigationProperties]];
        if (innerError) {
            if (error) {
                *error = innerError;
            }
            return nil;
        }
	}
    return m_SDMEntry;
}

+ (void)loadEntitySchema:(ODataServiceDocument *)aService
{
    ODataCollection *collectionSchema = [aService.schema getCollectionByName:@"reportpagelayout" workspaceOfCollection:nil];
    reportpagelayoutTypeEntitySchema = collectionSchema.entitySchema;
}

+ (void)loadLabels:(ODataServiceDocument *)aService
{
		NSMutableDictionary *properties = [BaseODataObject getSchemaPropertiesFromCollection:@"reportpagelayout" andService:aService];
    	if (properties) {    
	    	reportpagelayoutTypeLabels = [@{} mutableCopy];
	    	for (ODataPropertyInfo *property in [properties allValues]) {
	        	reportpagelayoutTypeLabels[property.name] = property.label;;
	    	}
	    }
	    else {
        	LOGERROR(@"Failed to load SAP labels from service metadata");
    	}
}


+ (NSString *)getLabelForProperty:(NSString *)aPropertyName
{
    return [BaseODataObject getLabelFromDictionary:reportpagelayoutTypeLabels forProperty:aPropertyName];
}

- (void)loadProperties
{
    [super loadProperties];
	self.REPORTPAGEID = [self getStringValueForSDMPropertyWithName:@"REPORTPAGEID"];
	self.ROWNUMBER = [self getIntValueForSDMPropertyWithName:@"ROWNUMBER"];
	self.COLUMNNUMBER = [self getIntValueForSDMPropertyWithName:@"COLUMNNUMBER"];
	self.REPORTID = [self getStringValueForSDMPropertyWithName:@"REPORTID"];
	self.REPORTVIEWNAME = [self getStringValueForSDMPropertyWithName:@"REPORTVIEWNAME"];
	self.REPORTVIEWID = [self getStringValueForSDMPropertyWithName:@"REPORTVIEWID"];
	self.REPORTVIEWTYPE = [self getStringValueForSDMPropertyWithName:@"REPORTVIEWTYPE"];
	self.ROWSPAN = [self getIntValueForSDMPropertyWithName:@"ROWSPAN"];
	self.COLUMNSPAN = [self getIntValueForSDMPropertyWithName:@"COLUMNSPAN"];
	self.LEGENDPOSITION = [self getStringValueForSDMPropertyWithName:@"LEGENDPOSITION"];
	self.NAVIGATIONID = [self getStringValueForSDMPropertyWithName:@"NAVIGATIONID"];
	self.DISPLAYLEGEND = [self getStringValueForSDMPropertyWithName:@"DISPLAYLEGEND"];
	self.IS_KPI = [self getStringValueForSDMPropertyWithName:@"IS_KPI"];
	self.IS_GEOENABLED = [self getStringValueForSDMPropertyWithName:@"IS_GEOENABLED"];
	self.ISPAGEOWNER = [self getStringValueForSDMPropertyWithName:@"ISPAGEOWNER"];
	self.ISVIEWOWNER = [self getStringValueForSDMPropertyWithName:@"ISVIEWOWNER"];
}

- (void)loadNavigationPropertyQueries
{
    [super loadNavigationPropertyQueries];
    self.reportviewQuery = [self getRelatedLinkForNavigationName:@"reportview"];
}

- (void)loadNavigationPropertyData
{
    [super loadNavigationPropertyData];
    
    NSMutableArray *entries = nil;

    entries = [self getInlinedRelatedEntriesForNavigationName:@"reportview"];
    self.reportview = [reportviewTypeV0 createReportviewTypeEntriesForSDMEntries:entries];

}

+ (NSMutableArray *)createReportpagelayoutTypeEntriesForSDMEntries:(NSMutableArray *)sdmEntries
{
    NSMutableArray *entries = [@[] mutableCopy];
    for (ODataEntry *entry in sdmEntries) {
        reportpagelayoutTypeV0 *reportpagelayoutTypeObject = [[reportpagelayoutTypeV0 alloc] initWithSDMEntry:entry];
        [entries addObject:reportpagelayoutTypeObject];
    }
    return entries;
}


+ (NSMutableArray *)parseReportpagelayoutTypeEntriesWithData:(NSData *)aData error:(NSError **)error
{
    NSMutableArray *sdmEntries = [BaseEntityType getSDMEntriesForEntitySchema:reportpagelayoutTypeEntitySchema andData:aData error:error];
    if (!sdmEntries) {
    	return nil;
    }
	return [reportpagelayoutTypeV0 createReportpagelayoutTypeEntriesForSDMEntries:sdmEntries];
}

+ (NSMutableArray *)parseExpandedReportpagelayoutTypeEntriesWithData:(NSData *)aData andServiceDocument:(ODataServiceDocument *)aServiceDocument error:(NSError **)error
{
    NSMutableArray *sdmEntries = [BaseEntityType getExpandedSDMEntriesForEntitySchema:reportpagelayoutTypeEntitySchema andData:aData andServiceDocument:aServiceDocument error:error];
    if (!sdmEntries) {
    	return nil;
    }
	return [reportpagelayoutTypeV0 createReportpagelayoutTypeEntriesForSDMEntries:sdmEntries];
}

+ (reportpagelayoutTypeV0 *)parseReportpagelayoutTypeEntryWithData:(NSData *)aData error:(NSError **)error
{
    NSMutableArray *reportpagelayoutTypeEntries = [reportpagelayoutTypeV0 parseReportpagelayoutTypeEntriesWithData:aData error:error];
    if (!reportpagelayoutTypeEntries) {
    	return nil;
    }
    return (reportpagelayoutTypeV0 *)[reportpagelayoutTypeV0 getFirstObjectFromArray:reportpagelayoutTypeEntries];
}

+ (reportpagelayoutTypeV0 *)parseExpandedReportpagelayoutTypeEntryWithData:(NSData *)aData andServiceDocument:(ODataServiceDocument *)aServiceDocument error:(NSError **)error
{
	NSMutableArray *sdmEntries = [BaseEntityType getExpandedSDMEntriesForEntitySchema:reportpagelayoutTypeEntitySchema andData:aData andServiceDocument:aServiceDocument error:error];
    NSMutableArray *reportpagelayoutTypeEntries = [reportpagelayoutTypeV0 createReportpagelayoutTypeEntriesForSDMEntries:sdmEntries];
	return (reportpagelayoutTypeV0 *)[reportpagelayoutTypeV0 getFirstObjectFromArray:reportpagelayoutTypeEntries];
}


#pragma mark Entity Navigation Property loading methods
- (BOOL)loadReportviewWithData:(NSData *)aData error:(NSError **)error
{
    self.reportview = [reportviewTypeV0 parseReportviewTypeEntriesWithData:aData error:error];
    if (!self.reportview) {
    	return NO;
    }
    return YES;
}


@end

#pragma mark - reportviewTypeV0
@implementation reportviewTypeV0

static NSMutableDictionary *reportviewTypeLabels = nil;
static ODataEntitySchema *reportviewTypeEntitySchema = nil;

- (id)init
{
    self = [super init];
    if (self) {
        m_SDMEntry = [BaseEntityType createEmptyODataEntryWithSchema:reportviewTypeEntitySchema error:nil];
        if (!m_SDMEntry) {
            return nil;
        }        
        m_properties = nil;
        self.baseUrl = nil;
    }
    return self;
}



- (ODataEntry *)buildSDMEntryFromPropertiesAndReturnError:(NSError **)error
{
    if (m_SDMEntry) {
        NSError *innerError = nil;
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.REPORTID forSDMPropertyWithName:@"REPORTID" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.REPORTVIEWID forSDMPropertyWithName:@"REPORTVIEWID" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.ATTR_ID forSDMPropertyWithName:@"ATTR_ID" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.ATTR_NAME forSDMPropertyWithName:@"ATTR_NAME" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.ATTR_TYPE forSDMPropertyWithName:@"ATTR_TYPE" error:&innerError];
    	[BaseODataObject setIntValueForSDMEntry:m_SDMEntry withValue:self.SEQUENCE forSDMPropertyWithName:@"SEQUENCE" error:&innerError];
        if (innerError) {
            if (error) {
                *error = innerError;
            }
            return nil;
        }
	}
    return m_SDMEntry;
}

+ (void)loadEntitySchema:(ODataServiceDocument *)aService
{
    ODataCollection *collectionSchema = [aService.schema getCollectionByName:@"reportview" workspaceOfCollection:nil];
    reportviewTypeEntitySchema = collectionSchema.entitySchema;
}

+ (void)loadLabels:(ODataServiceDocument *)aService
{
		NSMutableDictionary *properties = [BaseODataObject getSchemaPropertiesFromCollection:@"reportview" andService:aService];
    	if (properties) {    
	    	reportviewTypeLabels = [@{} mutableCopy];
	    	for (ODataPropertyInfo *property in [properties allValues]) {
	        	reportviewTypeLabels[property.name] = property.label;;
	    	}
	    }
	    else {
        	LOGERROR(@"Failed to load SAP labels from service metadata");
    	}
}


+ (NSString *)getLabelForProperty:(NSString *)aPropertyName
{
    return [BaseODataObject getLabelFromDictionary:reportviewTypeLabels forProperty:aPropertyName];
}

- (void)loadProperties
{
    [super loadProperties];
	self.REPORTID = [self getStringValueForSDMPropertyWithName:@"REPORTID"];
	self.REPORTVIEWID = [self getStringValueForSDMPropertyWithName:@"REPORTVIEWID"];
	self.ATTR_ID = [self getStringValueForSDMPropertyWithName:@"ATTR_ID"];
	self.ATTR_NAME = [self getStringValueForSDMPropertyWithName:@"ATTR_NAME"];
	self.ATTR_TYPE = [self getStringValueForSDMPropertyWithName:@"ATTR_TYPE"];
	self.SEQUENCE = [self getIntValueForSDMPropertyWithName:@"SEQUENCE"];
}

+ (NSMutableArray *)createReportviewTypeEntriesForSDMEntries:(NSMutableArray *)sdmEntries
{
    NSMutableArray *entries = [@[] mutableCopy];
    for (ODataEntry *entry in sdmEntries) {
        reportviewTypeV0 *reportviewTypeObject = [[reportviewTypeV0 alloc] initWithSDMEntry:entry];
        [entries addObject:reportviewTypeObject];
    }
    return entries;
}


+ (NSMutableArray *)parseReportviewTypeEntriesWithData:(NSData *)aData error:(NSError **)error
{
    NSMutableArray *sdmEntries = [BaseEntityType getSDMEntriesForEntitySchema:reportviewTypeEntitySchema andData:aData error:error];
    if (!sdmEntries) {
    	return nil;
    }
	return [reportviewTypeV0 createReportviewTypeEntriesForSDMEntries:sdmEntries];
}

+ (NSMutableArray *)parseExpandedReportviewTypeEntriesWithData:(NSData *)aData andServiceDocument:(ODataServiceDocument *)aServiceDocument error:(NSError **)error
{
    NSMutableArray *sdmEntries = [BaseEntityType getExpandedSDMEntriesForEntitySchema:reportviewTypeEntitySchema andData:aData andServiceDocument:aServiceDocument error:error];
    if (!sdmEntries) {
    	return nil;
    }
	return [reportviewTypeV0 createReportviewTypeEntriesForSDMEntries:sdmEntries];
}

+ (reportviewTypeV0 *)parseReportviewTypeEntryWithData:(NSData *)aData error:(NSError **)error
{
    NSMutableArray *reportviewTypeEntries = [reportviewTypeV0 parseReportviewTypeEntriesWithData:aData error:error];
    if (!reportviewTypeEntries) {
    	return nil;
    }
    return (reportviewTypeV0 *)[reportviewTypeV0 getFirstObjectFromArray:reportviewTypeEntries];
}

+ (reportviewTypeV0 *)parseExpandedReportviewTypeEntryWithData:(NSData *)aData andServiceDocument:(ODataServiceDocument *)aServiceDocument error:(NSError **)error
{
	NSMutableArray *sdmEntries = [BaseEntityType getExpandedSDMEntriesForEntitySchema:reportviewTypeEntitySchema andData:aData andServiceDocument:aServiceDocument error:error];
    NSMutableArray *reportviewTypeEntries = [reportviewTypeV0 createReportviewTypeEntriesForSDMEntries:sdmEntries];
	return (reportviewTypeV0 *)[reportviewTypeV0 getFirstObjectFromArray:reportviewTypeEntries];
}



@end

#pragma mark - reportTypeV0
@implementation reportTypeV0

static NSMutableDictionary *reportTypeLabels = nil;
static ODataEntitySchema *reportTypeEntitySchema = nil;

- (id)init
{
    self = [super init];
    if (self) {
        m_SDMEntry = [BaseEntityType createEmptyODataEntryWithSchema:reportTypeEntitySchema error:nil];
        if (!m_SDMEntry) {
            return nil;
        }        
        m_properties = nil;
        self.baseUrl = nil;
    }
    return self;
}



- (ODataEntry *)buildSDMEntryFromPropertiesAndReturnError:(NSError **)error
{
    if (m_SDMEntry) {
        NSError *innerError = nil;
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.REPORTID forSDMPropertyWithName:@"REPORTID" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.ATTR_ID forSDMPropertyWithName:@"ATTR_ID" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.ATTR_DESCR_ID forSDMPropertyWithName:@"ATTR_DESCR_ID" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.PLAREA forSDMPropertyWithName:@"PLAREA" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.ATTR_NAME forSDMPropertyWithName:@"ATTR_NAME" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.ATTR_TYPE forSDMPropertyWithName:@"ATTR_TYPE" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.PLAN_OBJECT forSDMPropertyWithName:@"PLAN_OBJECT" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.PLAN_OBJECT_DESCR forSDMPropertyWithName:@"PLAN_OBJECT_DESCR" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.ISFILTERENABLED forSDMPropertyWithName:@"ISFILTERENABLED" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.ISBREAKDOWNENABLED forSDMPropertyWithName:@"ISBREAKDOWNENABLED" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.AUTOEXPAND forSDMPropertyWithName:@"AUTOEXPAND" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.ISPCHIER forSDMPropertyWithName:@"ISPCHIER" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.PARENT_ATTR forSDMPropertyWithName:@"PARENT_ATTR" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.ANCESTOR_ATTR forSDMPropertyWithName:@"ANCESTOR_ATTR" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.ISCONVATTR forSDMPropertyWithName:@"ISCONVATTR" error:&innerError];
        if (innerError) {
            if (error) {
                *error = innerError;
            }
            return nil;
        }
	}
    return m_SDMEntry;
}

+ (void)loadEntitySchema:(ODataServiceDocument *)aService
{
    ODataCollection *collectionSchema = [aService.schema getCollectionByName:@"report" workspaceOfCollection:nil];
    reportTypeEntitySchema = collectionSchema.entitySchema;
}

+ (void)loadLabels:(ODataServiceDocument *)aService
{
		NSMutableDictionary *properties = [BaseODataObject getSchemaPropertiesFromCollection:@"report" andService:aService];
    	if (properties) {    
	    	reportTypeLabels = [@{} mutableCopy];
	    	for (ODataPropertyInfo *property in [properties allValues]) {
	        	reportTypeLabels[property.name] = property.label;;
	    	}
	    }
	    else {
        	LOGERROR(@"Failed to load SAP labels from service metadata");
    	}
}


+ (NSString *)getLabelForProperty:(NSString *)aPropertyName
{
    return [BaseODataObject getLabelFromDictionary:reportTypeLabels forProperty:aPropertyName];
}

- (void)loadProperties
{
    [super loadProperties];
	self.REPORTID = [self getStringValueForSDMPropertyWithName:@"REPORTID"];
	self.ATTR_ID = [self getStringValueForSDMPropertyWithName:@"ATTR_ID"];
	self.ATTR_DESCR_ID = [self getStringValueForSDMPropertyWithName:@"ATTR_DESCR_ID"];
	self.PLAREA = [self getStringValueForSDMPropertyWithName:@"PLAREA"];
	self.ATTR_NAME = [self getStringValueForSDMPropertyWithName:@"ATTR_NAME"];
	self.ATTR_TYPE = [self getStringValueForSDMPropertyWithName:@"ATTR_TYPE"];
	self.PLAN_OBJECT = [self getStringValueForSDMPropertyWithName:@"PLAN_OBJECT"];
	self.PLAN_OBJECT_DESCR = [self getStringValueForSDMPropertyWithName:@"PLAN_OBJECT_DESCR"];
	self.ISFILTERENABLED = [self getStringValueForSDMPropertyWithName:@"ISFILTERENABLED"];
	self.ISBREAKDOWNENABLED = [self getStringValueForSDMPropertyWithName:@"ISBREAKDOWNENABLED"];
	self.AUTOEXPAND = [self getStringValueForSDMPropertyWithName:@"AUTOEXPAND"];
	self.ISPCHIER = [self getStringValueForSDMPropertyWithName:@"ISPCHIER"];
	self.PARENT_ATTR = [self getStringValueForSDMPropertyWithName:@"PARENT_ATTR"];
	self.ANCESTOR_ATTR = [self getStringValueForSDMPropertyWithName:@"ANCESTOR_ATTR"];
	self.ISCONVATTR = [self getStringValueForSDMPropertyWithName:@"ISCONVATTR"];
}

+ (NSMutableArray *)createReportTypeEntriesForSDMEntries:(NSMutableArray *)sdmEntries
{
    NSMutableArray *entries = [@[] mutableCopy];
    for (ODataEntry *entry in sdmEntries) {
        reportTypeV0 *reportTypeObject = [[reportTypeV0 alloc] initWithSDMEntry:entry];
        [entries addObject:reportTypeObject];
    }
    return entries;
}


+ (NSMutableArray *)parseReportTypeEntriesWithData:(NSData *)aData error:(NSError **)error
{
    NSMutableArray *sdmEntries = [BaseEntityType getSDMEntriesForEntitySchema:reportTypeEntitySchema andData:aData error:error];
    if (!sdmEntries) {
    	return nil;
    }
	return [reportTypeV0 createReportTypeEntriesForSDMEntries:sdmEntries];
}

+ (NSMutableArray *)parseExpandedReportTypeEntriesWithData:(NSData *)aData andServiceDocument:(ODataServiceDocument *)aServiceDocument error:(NSError **)error
{
    NSMutableArray *sdmEntries = [BaseEntityType getExpandedSDMEntriesForEntitySchema:reportTypeEntitySchema andData:aData andServiceDocument:aServiceDocument error:error];
    if (!sdmEntries) {
    	return nil;
    }
	return [reportTypeV0 createReportTypeEntriesForSDMEntries:sdmEntries];
}

+ (reportTypeV0 *)parseReportTypeEntryWithData:(NSData *)aData error:(NSError **)error
{
    NSMutableArray *reportTypeEntries = [reportTypeV0 parseReportTypeEntriesWithData:aData error:error];
    if (!reportTypeEntries) {
    	return nil;
    }
    return (reportTypeV0 *)[reportTypeV0 getFirstObjectFromArray:reportTypeEntries];
}

+ (reportTypeV0 *)parseExpandedReportTypeEntryWithData:(NSData *)aData andServiceDocument:(ODataServiceDocument *)aServiceDocument error:(NSError **)error
{
	NSMutableArray *sdmEntries = [BaseEntityType getExpandedSDMEntriesForEntitySchema:reportTypeEntitySchema andData:aData andServiceDocument:aServiceDocument error:error];
    NSMutableArray *reportTypeEntries = [reportTypeV0 createReportTypeEntriesForSDMEntries:sdmEntries];
	return (reportTypeV0 *)[reportTypeV0 getFirstObjectFromArray:reportTypeEntries];
}



@end

#pragma mark - reportqueryconstraintsTypeV0
@implementation reportqueryconstraintsTypeV0

static NSMutableDictionary *reportqueryconstraintsTypeLabels = nil;
static ODataEntitySchema *reportqueryconstraintsTypeEntitySchema = nil;

- (id)init
{
    self = [super init];
    if (self) {
        m_SDMEntry = [BaseEntityType createEmptyODataEntryWithSchema:reportqueryconstraintsTypeEntitySchema error:nil];
        if (!m_SDMEntry) {
            return nil;
        }        
        m_properties = nil;
        self.baseUrl = nil;
    }
    return self;
}



- (ODataEntry *)buildSDMEntryFromPropertiesAndReturnError:(NSError **)error
{
    if (m_SDMEntry) {
        NSError *innerError = nil;
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.REPORTID forSDMPropertyWithName:@"REPORTID" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.KFID forSDMPropertyWithName:@"KFID" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.ATTRID forSDMPropertyWithName:@"ATTRID" error:&innerError];
    	[BaseODataObject setIntValueForSDMEntry:m_SDMEntry withValue:self.FILTER forSDMPropertyWithName:@"FILTER" error:&innerError];
    	[BaseODataObject setIntValueForSDMEntry:m_SDMEntry withValue:self.GROUPBY forSDMPropertyWithName:@"GROUPBY" error:&innerError];
    	[BaseODataObject setIntValueForSDMEntry:m_SDMEntry withValue:self.CONVERSIONTOIND forSDMPropertyWithName:@"CONVERSIONTOIND" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.UOMDISPLAYFORMAT forSDMPropertyWithName:@"UOMDISPLAYFORMAT" error:&innerError];
    	[BaseODataObject setIntValueForSDMEntry:m_SDMEntry withValue:self.KFPRECISION forSDMPropertyWithName:@"KFPRECISION" error:&innerError];
    	[BaseODataObject setIntValueForSDMEntry:m_SDMEntry withValue:self.KFSCALE forSDMPropertyWithName:@"KFSCALE" error:&innerError];
        if (innerError) {
            if (error) {
                *error = innerError;
            }
            return nil;
        }
	}
    return m_SDMEntry;
}

+ (void)loadEntitySchema:(ODataServiceDocument *)aService
{
    ODataCollection *collectionSchema = [aService.schema getCollectionByName:@"reportqueryconstraints" workspaceOfCollection:nil];
    reportqueryconstraintsTypeEntitySchema = collectionSchema.entitySchema;
}

+ (void)loadLabels:(ODataServiceDocument *)aService
{
		NSMutableDictionary *properties = [BaseODataObject getSchemaPropertiesFromCollection:@"reportqueryconstraints" andService:aService];
    	if (properties) {    
	    	reportqueryconstraintsTypeLabels = [@{} mutableCopy];
	    	for (ODataPropertyInfo *property in [properties allValues]) {
	        	reportqueryconstraintsTypeLabels[property.name] = property.label;;
	    	}
	    }
	    else {
        	LOGERROR(@"Failed to load SAP labels from service metadata");
    	}
}


+ (NSString *)getLabelForProperty:(NSString *)aPropertyName
{
    return [BaseODataObject getLabelFromDictionary:reportqueryconstraintsTypeLabels forProperty:aPropertyName];
}

- (void)loadProperties
{
    [super loadProperties];
	self.REPORTID = [self getStringValueForSDMPropertyWithName:@"REPORTID"];
	self.KFID = [self getStringValueForSDMPropertyWithName:@"KFID"];
	self.ATTRID = [self getStringValueForSDMPropertyWithName:@"ATTRID"];
	self.FILTER = [self getIntValueForSDMPropertyWithName:@"FILTER"];
	self.GROUPBY = [self getIntValueForSDMPropertyWithName:@"GROUPBY"];
	self.CONVERSIONTOIND = [self getIntValueForSDMPropertyWithName:@"CONVERSIONTOIND"];
	self.UOMDISPLAYFORMAT = [self getStringValueForSDMPropertyWithName:@"UOMDISPLAYFORMAT"];
	self.KFPRECISION = [self getIntValueForSDMPropertyWithName:@"KFPRECISION"];
	self.KFSCALE = [self getIntValueForSDMPropertyWithName:@"KFSCALE"];
}

+ (NSMutableArray *)createReportqueryconstraintsTypeEntriesForSDMEntries:(NSMutableArray *)sdmEntries
{
    NSMutableArray *entries = [@[] mutableCopy];
    for (ODataEntry *entry in sdmEntries) {
        reportqueryconstraintsTypeV0 *reportqueryconstraintsTypeObject = [[reportqueryconstraintsTypeV0 alloc] initWithSDMEntry:entry];
        [entries addObject:reportqueryconstraintsTypeObject];
    }
    return entries;
}


+ (NSMutableArray *)parseReportqueryconstraintsTypeEntriesWithData:(NSData *)aData error:(NSError **)error
{
    NSMutableArray *sdmEntries = [BaseEntityType getSDMEntriesForEntitySchema:reportqueryconstraintsTypeEntitySchema andData:aData error:error];
    if (!sdmEntries) {
    	return nil;
    }
	return [reportqueryconstraintsTypeV0 createReportqueryconstraintsTypeEntriesForSDMEntries:sdmEntries];
}

+ (NSMutableArray *)parseExpandedReportqueryconstraintsTypeEntriesWithData:(NSData *)aData andServiceDocument:(ODataServiceDocument *)aServiceDocument error:(NSError **)error
{
    NSMutableArray *sdmEntries = [BaseEntityType getExpandedSDMEntriesForEntitySchema:reportqueryconstraintsTypeEntitySchema andData:aData andServiceDocument:aServiceDocument error:error];
    if (!sdmEntries) {
    	return nil;
    }
	return [reportqueryconstraintsTypeV0 createReportqueryconstraintsTypeEntriesForSDMEntries:sdmEntries];
}

+ (reportqueryconstraintsTypeV0 *)parseReportqueryconstraintsTypeEntryWithData:(NSData *)aData error:(NSError **)error
{
    NSMutableArray *reportqueryconstraintsTypeEntries = [reportqueryconstraintsTypeV0 parseReportqueryconstraintsTypeEntriesWithData:aData error:error];
    if (!reportqueryconstraintsTypeEntries) {
    	return nil;
    }
    return (reportqueryconstraintsTypeV0 *)[reportqueryconstraintsTypeV0 getFirstObjectFromArray:reportqueryconstraintsTypeEntries];
}

+ (reportqueryconstraintsTypeV0 *)parseExpandedReportqueryconstraintsTypeEntryWithData:(NSData *)aData andServiceDocument:(ODataServiceDocument *)aServiceDocument error:(NSError **)error
{
	NSMutableArray *sdmEntries = [BaseEntityType getExpandedSDMEntriesForEntitySchema:reportqueryconstraintsTypeEntitySchema andData:aData andServiceDocument:aServiceDocument error:error];
    NSMutableArray *reportqueryconstraintsTypeEntries = [reportqueryconstraintsTypeV0 createReportqueryconstraintsTypeEntriesForSDMEntries:sdmEntries];
	return (reportqueryconstraintsTypeV0 *)[reportqueryconstraintsTypeV0 getFirstObjectFromArray:reportqueryconstraintsTypeEntries];
}



@end

#pragma mark - reportviewsfilterTypeV0
@implementation reportviewsfilterTypeV0

static NSMutableDictionary *reportviewsfilterTypeLabels = nil;
static ODataEntitySchema *reportviewsfilterTypeEntitySchema = nil;

- (id)init
{
    self = [super init];
    if (self) {
        m_SDMEntry = [BaseEntityType createEmptyODataEntryWithSchema:reportviewsfilterTypeEntitySchema error:nil];
        if (!m_SDMEntry) {
            return nil;
        }        
        m_properties = nil;
        self.baseUrl = nil;
    }
    return self;
}



- (ODataEntry *)buildSDMEntryFromPropertiesAndReturnError:(NSError **)error
{
    if (m_SDMEntry) {
        NSError *innerError = nil;
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.REPORTID forSDMPropertyWithName:@"REPORTID" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.ATTR_ID forSDMPropertyWithName:@"ATTR_ID" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.ATTR_NAME forSDMPropertyWithName:@"ATTR_NAME" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.ATTR_TYPE forSDMPropertyWithName:@"ATTR_TYPE" error:&innerError];
        if (innerError) {
            if (error) {
                *error = innerError;
            }
            return nil;
        }
	}
    return m_SDMEntry;
}

+ (void)loadEntitySchema:(ODataServiceDocument *)aService
{
    ODataCollection *collectionSchema = [aService.schema getCollectionByName:@"reportviewsfilter" workspaceOfCollection:nil];
    reportviewsfilterTypeEntitySchema = collectionSchema.entitySchema;
}

+ (void)loadLabels:(ODataServiceDocument *)aService
{
		NSMutableDictionary *properties = [BaseODataObject getSchemaPropertiesFromCollection:@"reportviewsfilter" andService:aService];
    	if (properties) {    
	    	reportviewsfilterTypeLabels = [@{} mutableCopy];
	    	for (ODataPropertyInfo *property in [properties allValues]) {
	        	reportviewsfilterTypeLabels[property.name] = property.label;;
	    	}
	    }
	    else {
        	LOGERROR(@"Failed to load SAP labels from service metadata");
    	}
}


+ (NSString *)getLabelForProperty:(NSString *)aPropertyName
{
    return [BaseODataObject getLabelFromDictionary:reportviewsfilterTypeLabels forProperty:aPropertyName];
}

- (void)loadProperties
{
    [super loadProperties];
	self.REPORTID = [self getStringValueForSDMPropertyWithName:@"REPORTID"];
	self.ATTR_ID = [self getStringValueForSDMPropertyWithName:@"ATTR_ID"];
	self.ATTR_NAME = [self getStringValueForSDMPropertyWithName:@"ATTR_NAME"];
	self.ATTR_TYPE = [self getStringValueForSDMPropertyWithName:@"ATTR_TYPE"];
}

+ (NSMutableArray *)createReportviewsfilterTypeEntriesForSDMEntries:(NSMutableArray *)sdmEntries
{
    NSMutableArray *entries = [@[] mutableCopy];
    for (ODataEntry *entry in sdmEntries) {
        reportviewsfilterTypeV0 *reportviewsfilterTypeObject = [[reportviewsfilterTypeV0 alloc] initWithSDMEntry:entry];
        [entries addObject:reportviewsfilterTypeObject];
    }
    return entries;
}


+ (NSMutableArray *)parseReportviewsfilterTypeEntriesWithData:(NSData *)aData error:(NSError **)error
{
    NSMutableArray *sdmEntries = [BaseEntityType getSDMEntriesForEntitySchema:reportviewsfilterTypeEntitySchema andData:aData error:error];
    if (!sdmEntries) {
    	return nil;
    }
	return [reportviewsfilterTypeV0 createReportviewsfilterTypeEntriesForSDMEntries:sdmEntries];
}

+ (NSMutableArray *)parseExpandedReportviewsfilterTypeEntriesWithData:(NSData *)aData andServiceDocument:(ODataServiceDocument *)aServiceDocument error:(NSError **)error
{
    NSMutableArray *sdmEntries = [BaseEntityType getExpandedSDMEntriesForEntitySchema:reportviewsfilterTypeEntitySchema andData:aData andServiceDocument:aServiceDocument error:error];
    if (!sdmEntries) {
    	return nil;
    }
	return [reportviewsfilterTypeV0 createReportviewsfilterTypeEntriesForSDMEntries:sdmEntries];
}

+ (reportviewsfilterTypeV0 *)parseReportviewsfilterTypeEntryWithData:(NSData *)aData error:(NSError **)error
{
    NSMutableArray *reportviewsfilterTypeEntries = [reportviewsfilterTypeV0 parseReportviewsfilterTypeEntriesWithData:aData error:error];
    if (!reportviewsfilterTypeEntries) {
    	return nil;
    }
    return (reportviewsfilterTypeV0 *)[reportviewsfilterTypeV0 getFirstObjectFromArray:reportviewsfilterTypeEntries];
}

+ (reportviewsfilterTypeV0 *)parseExpandedReportviewsfilterTypeEntryWithData:(NSData *)aData andServiceDocument:(ODataServiceDocument *)aServiceDocument error:(NSError **)error
{
	NSMutableArray *sdmEntries = [BaseEntityType getExpandedSDMEntriesForEntitySchema:reportviewsfilterTypeEntitySchema andData:aData andServiceDocument:aServiceDocument error:error];
    NSMutableArray *reportviewsfilterTypeEntries = [reportviewsfilterTypeV0 createReportviewsfilterTypeEntriesForSDMEntries:sdmEntries];
	return (reportviewsfilterTypeV0 *)[reportviewsfilterTypeV0 getFirstObjectFromArray:reportviewsfilterTypeEntries];
}



@end

#pragma mark - sharedobjectsTypeV0
@implementation sharedobjectsTypeV0

static NSMutableDictionary *sharedobjectsTypeLabels = nil;
static ODataEntitySchema *sharedobjectsTypeEntitySchema = nil;

- (id)init
{
    self = [super init];
    if (self) {
        m_SDMEntry = [BaseEntityType createEmptyODataEntryWithSchema:sharedobjectsTypeEntitySchema error:nil];
        if (!m_SDMEntry) {
            return nil;
        }        
        m_properties = nil;
        self.baseUrl = nil;
    }
    return self;
}



- (ODataEntry *)buildSDMEntryFromPropertiesAndReturnError:(NSError **)error
{
    if (m_SDMEntry) {
        NSError *innerError = nil;
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.SHARED_WITH_ID forSDMPropertyWithName:@"SHARED_WITH_ID" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.SHARED_WITH_FIRST_NAME forSDMPropertyWithName:@"SHARED_WITH_FIRST_NAME" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.SHARED_WITH_LAST_NAME forSDMPropertyWithName:@"SHARED_WITH_LAST_NAME" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.SHARED_WITH_TYPE forSDMPropertyWithName:@"SHARED_WITH_TYPE" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.OBJECTID forSDMPropertyWithName:@"OBJECTID" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.OBJECTTYPE forSDMPropertyWithName:@"OBJECTTYPE" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.SHARED forSDMPropertyWithName:@"SHARED" error:&innerError];
        if (innerError) {
            if (error) {
                *error = innerError;
            }
            return nil;
        }
	}
    return m_SDMEntry;
}

+ (void)loadEntitySchema:(ODataServiceDocument *)aService
{
    ODataCollection *collectionSchema = [aService.schema getCollectionByName:@"sharedobjects" workspaceOfCollection:nil];
    sharedobjectsTypeEntitySchema = collectionSchema.entitySchema;
}

+ (void)loadLabels:(ODataServiceDocument *)aService
{
		NSMutableDictionary *properties = [BaseODataObject getSchemaPropertiesFromCollection:@"sharedobjects" andService:aService];
    	if (properties) {    
	    	sharedobjectsTypeLabels = [@{} mutableCopy];
	    	for (ODataPropertyInfo *property in [properties allValues]) {
	        	sharedobjectsTypeLabels[property.name] = property.label;;
	    	}
	    }
	    else {
        	LOGERROR(@"Failed to load SAP labels from service metadata");
    	}
}


+ (NSString *)getLabelForProperty:(NSString *)aPropertyName
{
    return [BaseODataObject getLabelFromDictionary:sharedobjectsTypeLabels forProperty:aPropertyName];
}

- (void)loadProperties
{
    [super loadProperties];
	self.SHARED_WITH_ID = [self getStringValueForSDMPropertyWithName:@"SHARED_WITH_ID"];
	self.SHARED_WITH_FIRST_NAME = [self getStringValueForSDMPropertyWithName:@"SHARED_WITH_FIRST_NAME"];
	self.SHARED_WITH_LAST_NAME = [self getStringValueForSDMPropertyWithName:@"SHARED_WITH_LAST_NAME"];
	self.SHARED_WITH_TYPE = [self getStringValueForSDMPropertyWithName:@"SHARED_WITH_TYPE"];
	self.OBJECTID = [self getStringValueForSDMPropertyWithName:@"OBJECTID"];
	self.OBJECTTYPE = [self getStringValueForSDMPropertyWithName:@"OBJECTTYPE"];
	self.SHARED = [self getStringValueForSDMPropertyWithName:@"SHARED"];
}

+ (NSMutableArray *)createSharedobjectsTypeEntriesForSDMEntries:(NSMutableArray *)sdmEntries
{
    NSMutableArray *entries = [@[] mutableCopy];
    for (ODataEntry *entry in sdmEntries) {
        sharedobjectsTypeV0 *sharedobjectsTypeObject = [[sharedobjectsTypeV0 alloc] initWithSDMEntry:entry];
        [entries addObject:sharedobjectsTypeObject];
    }
    return entries;
}


+ (NSMutableArray *)parseSharedobjectsTypeEntriesWithData:(NSData *)aData error:(NSError **)error
{
    NSMutableArray *sdmEntries = [BaseEntityType getSDMEntriesForEntitySchema:sharedobjectsTypeEntitySchema andData:aData error:error];
    if (!sdmEntries) {
    	return nil;
    }
	return [sharedobjectsTypeV0 createSharedobjectsTypeEntriesForSDMEntries:sdmEntries];
}

+ (NSMutableArray *)parseExpandedSharedobjectsTypeEntriesWithData:(NSData *)aData andServiceDocument:(ODataServiceDocument *)aServiceDocument error:(NSError **)error
{
    NSMutableArray *sdmEntries = [BaseEntityType getExpandedSDMEntriesForEntitySchema:sharedobjectsTypeEntitySchema andData:aData andServiceDocument:aServiceDocument error:error];
    if (!sdmEntries) {
    	return nil;
    }
	return [sharedobjectsTypeV0 createSharedobjectsTypeEntriesForSDMEntries:sdmEntries];
}

+ (sharedobjectsTypeV0 *)parseSharedobjectsTypeEntryWithData:(NSData *)aData error:(NSError **)error
{
    NSMutableArray *sharedobjectsTypeEntries = [sharedobjectsTypeV0 parseSharedobjectsTypeEntriesWithData:aData error:error];
    if (!sharedobjectsTypeEntries) {
    	return nil;
    }
    return (sharedobjectsTypeV0 *)[sharedobjectsTypeV0 getFirstObjectFromArray:sharedobjectsTypeEntries];
}

+ (sharedobjectsTypeV0 *)parseExpandedSharedobjectsTypeEntryWithData:(NSData *)aData andServiceDocument:(ODataServiceDocument *)aServiceDocument error:(NSError **)error
{
	NSMutableArray *sdmEntries = [BaseEntityType getExpandedSDMEntriesForEntitySchema:sharedobjectsTypeEntitySchema andData:aData andServiceDocument:aServiceDocument error:error];
    NSMutableArray *sharedobjectsTypeEntries = [sharedobjectsTypeV0 createSharedobjectsTypeEntriesForSDMEntries:sdmEntries];
	return (sharedobjectsTypeV0 *)[sharedobjectsTypeV0 getFirstObjectFromArray:sharedobjectsTypeEntries];
}



@end

#pragma mark - reportpagenavTypeV0
@implementation reportpagenavTypeV0

static NSMutableDictionary *reportpagenavTypeLabels = nil;
static ODataEntitySchema *reportpagenavTypeEntitySchema = nil;

- (id)init
{
    self = [super init];
    if (self) {
        m_SDMEntry = [BaseEntityType createEmptyODataEntryWithSchema:reportpagenavTypeEntitySchema error:nil];
        if (!m_SDMEntry) {
            return nil;
        }        
        m_properties = nil;
        self.baseUrl = nil;
    }
    return self;
}



- (ODataEntry *)buildSDMEntryFromPropertiesAndReturnError:(NSError **)error
{
    if (m_SDMEntry) {
        NSError *innerError = nil;
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.REPORTPAGEID forSDMPropertyWithName:@"REPORTPAGEID" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.NAVIGATIONID forSDMPropertyWithName:@"NAVIGATIONID" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.FROM_REPORTVIEWID forSDMPropertyWithName:@"FROM_REPORTVIEWID" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.TO_REPORTVIEWID forSDMPropertyWithName:@"TO_REPORTVIEWID" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.NAVIGATIONATTR forSDMPropertyWithName:@"NAVIGATIONATTR" error:&innerError];
        if (innerError) {
            if (error) {
                *error = innerError;
            }
            return nil;
        }
	}
    return m_SDMEntry;
}

+ (void)loadEntitySchema:(ODataServiceDocument *)aService
{
    ODataCollection *collectionSchema = [aService.schema getCollectionByName:@"reportpagenav" workspaceOfCollection:nil];
    reportpagenavTypeEntitySchema = collectionSchema.entitySchema;
}

+ (void)loadLabels:(ODataServiceDocument *)aService
{
		NSMutableDictionary *properties = [BaseODataObject getSchemaPropertiesFromCollection:@"reportpagenav" andService:aService];
    	if (properties) {    
	    	reportpagenavTypeLabels = [@{} mutableCopy];
	    	for (ODataPropertyInfo *property in [properties allValues]) {
	        	reportpagenavTypeLabels[property.name] = property.label;;
	    	}
	    }
	    else {
        	LOGERROR(@"Failed to load SAP labels from service metadata");
    	}
}


+ (NSString *)getLabelForProperty:(NSString *)aPropertyName
{
    return [BaseODataObject getLabelFromDictionary:reportpagenavTypeLabels forProperty:aPropertyName];
}

- (void)loadProperties
{
    [super loadProperties];
	self.REPORTPAGEID = [self getStringValueForSDMPropertyWithName:@"REPORTPAGEID"];
	self.NAVIGATIONID = [self getStringValueForSDMPropertyWithName:@"NAVIGATIONID"];
	self.FROM_REPORTVIEWID = [self getStringValueForSDMPropertyWithName:@"FROM_REPORTVIEWID"];
	self.TO_REPORTVIEWID = [self getStringValueForSDMPropertyWithName:@"TO_REPORTVIEWID"];
	self.NAVIGATIONATTR = [self getStringValueForSDMPropertyWithName:@"NAVIGATIONATTR"];
}

+ (NSMutableArray *)createReportpagenavTypeEntriesForSDMEntries:(NSMutableArray *)sdmEntries
{
    NSMutableArray *entries = [@[] mutableCopy];
    for (ODataEntry *entry in sdmEntries) {
        reportpagenavTypeV0 *reportpagenavTypeObject = [[reportpagenavTypeV0 alloc] initWithSDMEntry:entry];
        [entries addObject:reportpagenavTypeObject];
    }
    return entries;
}


+ (NSMutableArray *)parseReportpagenavTypeEntriesWithData:(NSData *)aData error:(NSError **)error
{
    NSMutableArray *sdmEntries = [BaseEntityType getSDMEntriesForEntitySchema:reportpagenavTypeEntitySchema andData:aData error:error];
    if (!sdmEntries) {
    	return nil;
    }
	return [reportpagenavTypeV0 createReportpagenavTypeEntriesForSDMEntries:sdmEntries];
}

+ (NSMutableArray *)parseExpandedReportpagenavTypeEntriesWithData:(NSData *)aData andServiceDocument:(ODataServiceDocument *)aServiceDocument error:(NSError **)error
{
    NSMutableArray *sdmEntries = [BaseEntityType getExpandedSDMEntriesForEntitySchema:reportpagenavTypeEntitySchema andData:aData andServiceDocument:aServiceDocument error:error];
    if (!sdmEntries) {
    	return nil;
    }
	return [reportpagenavTypeV0 createReportpagenavTypeEntriesForSDMEntries:sdmEntries];
}

+ (reportpagenavTypeV0 *)parseReportpagenavTypeEntryWithData:(NSData *)aData error:(NSError **)error
{
    NSMutableArray *reportpagenavTypeEntries = [reportpagenavTypeV0 parseReportpagenavTypeEntriesWithData:aData error:error];
    if (!reportpagenavTypeEntries) {
    	return nil;
    }
    return (reportpagenavTypeV0 *)[reportpagenavTypeV0 getFirstObjectFromArray:reportpagenavTypeEntries];
}

+ (reportpagenavTypeV0 *)parseExpandedReportpagenavTypeEntryWithData:(NSData *)aData andServiceDocument:(ODataServiceDocument *)aServiceDocument error:(NSError **)error
{
	NSMutableArray *sdmEntries = [BaseEntityType getExpandedSDMEntriesForEntitySchema:reportpagenavTypeEntitySchema andData:aData andServiceDocument:aServiceDocument error:error];
    NSMutableArray *reportpagenavTypeEntries = [reportpagenavTypeV0 createReportpagenavTypeEntriesForSDMEntries:sdmEntries];
	return (reportpagenavTypeV0 *)[reportpagenavTypeV0 getFirstObjectFromArray:reportpagenavTypeEntries];
}



@end

#pragma mark - reportviewpagesTypeV0
@implementation reportviewpagesTypeV0

static NSMutableDictionary *reportviewpagesTypeLabels = nil;
static ODataEntitySchema *reportviewpagesTypeEntitySchema = nil;

- (id)init
{
    self = [super init];
    if (self) {
        m_SDMEntry = [BaseEntityType createEmptyODataEntryWithSchema:reportviewpagesTypeEntitySchema error:nil];
        if (!m_SDMEntry) {
            return nil;
        }        
        m_properties = nil;
        self.baseUrl = nil;
    }
    return self;
}



- (ODataEntry *)buildSDMEntryFromPropertiesAndReturnError:(NSError **)error
{
    if (m_SDMEntry) {
        NSError *innerError = nil;
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.REPORTVIEWID forSDMPropertyWithName:@"REPORTVIEWID" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.REPORTPAGEID forSDMPropertyWithName:@"REPORTPAGEID" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.PAGETYPE forSDMPropertyWithName:@"PAGETYPE" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.LANDING_RPTVIEW forSDMPropertyWithName:@"LANDING_RPTVIEW" error:&innerError];
        if (innerError) {
            if (error) {
                *error = innerError;
            }
            return nil;
        }
	}
    return m_SDMEntry;
}

+ (void)loadEntitySchema:(ODataServiceDocument *)aService
{
    ODataCollection *collectionSchema = [aService.schema getCollectionByName:@"reportviewpages" workspaceOfCollection:nil];
    reportviewpagesTypeEntitySchema = collectionSchema.entitySchema;
}

+ (void)loadLabels:(ODataServiceDocument *)aService
{
		NSMutableDictionary *properties = [BaseODataObject getSchemaPropertiesFromCollection:@"reportviewpages" andService:aService];
    	if (properties) {    
	    	reportviewpagesTypeLabels = [@{} mutableCopy];
	    	for (ODataPropertyInfo *property in [properties allValues]) {
	        	reportviewpagesTypeLabels[property.name] = property.label;;
	    	}
	    }
	    else {
        	LOGERROR(@"Failed to load SAP labels from service metadata");
    	}
}


+ (NSString *)getLabelForProperty:(NSString *)aPropertyName
{
    return [BaseODataObject getLabelFromDictionary:reportviewpagesTypeLabels forProperty:aPropertyName];
}

- (void)loadProperties
{
    [super loadProperties];
	self.REPORTVIEWID = [self getStringValueForSDMPropertyWithName:@"REPORTVIEWID"];
	self.REPORTPAGEID = [self getStringValueForSDMPropertyWithName:@"REPORTPAGEID"];
	self.PAGETYPE = [self getStringValueForSDMPropertyWithName:@"PAGETYPE"];
	self.LANDING_RPTVIEW = [self getStringValueForSDMPropertyWithName:@"LANDING_RPTVIEW"];
}

+ (NSMutableArray *)createReportviewpagesTypeEntriesForSDMEntries:(NSMutableArray *)sdmEntries
{
    NSMutableArray *entries = [@[] mutableCopy];
    for (ODataEntry *entry in sdmEntries) {
        reportviewpagesTypeV0 *reportviewpagesTypeObject = [[reportviewpagesTypeV0 alloc] initWithSDMEntry:entry];
        [entries addObject:reportviewpagesTypeObject];
    }
    return entries;
}


+ (NSMutableArray *)parseReportviewpagesTypeEntriesWithData:(NSData *)aData error:(NSError **)error
{
    NSMutableArray *sdmEntries = [BaseEntityType getSDMEntriesForEntitySchema:reportviewpagesTypeEntitySchema andData:aData error:error];
    if (!sdmEntries) {
    	return nil;
    }
	return [reportviewpagesTypeV0 createReportviewpagesTypeEntriesForSDMEntries:sdmEntries];
}

+ (NSMutableArray *)parseExpandedReportviewpagesTypeEntriesWithData:(NSData *)aData andServiceDocument:(ODataServiceDocument *)aServiceDocument error:(NSError **)error
{
    NSMutableArray *sdmEntries = [BaseEntityType getExpandedSDMEntriesForEntitySchema:reportviewpagesTypeEntitySchema andData:aData andServiceDocument:aServiceDocument error:error];
    if (!sdmEntries) {
    	return nil;
    }
	return [reportviewpagesTypeV0 createReportviewpagesTypeEntriesForSDMEntries:sdmEntries];
}

+ (reportviewpagesTypeV0 *)parseReportviewpagesTypeEntryWithData:(NSData *)aData error:(NSError **)error
{
    NSMutableArray *reportviewpagesTypeEntries = [reportviewpagesTypeV0 parseReportviewpagesTypeEntriesWithData:aData error:error];
    if (!reportviewpagesTypeEntries) {
    	return nil;
    }
    return (reportviewpagesTypeV0 *)[reportviewpagesTypeV0 getFirstObjectFromArray:reportviewpagesTypeEntries];
}

+ (reportviewpagesTypeV0 *)parseExpandedReportviewpagesTypeEntryWithData:(NSData *)aData andServiceDocument:(ODataServiceDocument *)aServiceDocument error:(NSError **)error
{
	NSMutableArray *sdmEntries = [BaseEntityType getExpandedSDMEntriesForEntitySchema:reportviewpagesTypeEntitySchema andData:aData andServiceDocument:aServiceDocument error:error];
    NSMutableArray *reportviewpagesTypeEntries = [reportviewpagesTypeV0 createReportviewpagesTypeEntriesForSDMEntries:sdmEntries];
	return (reportviewpagesTypeV0 *)[reportviewpagesTypeV0 getFirstObjectFromArray:reportviewpagesTypeEntries];
}



@end

#pragma mark - reportviewwbfavTypeV0
@implementation reportviewwbfavTypeV0

static NSMutableDictionary *reportviewwbfavTypeLabels = nil;
static ODataEntitySchema *reportviewwbfavTypeEntitySchema = nil;

- (id)init
{
    self = [super init];
    if (self) {
        m_SDMEntry = [BaseEntityType createEmptyODataEntryWithSchema:reportviewwbfavTypeEntitySchema error:nil];
        if (!m_SDMEntry) {
            return nil;
        }        
        m_properties = nil;
        self.baseUrl = nil;
    }
    return self;
}



- (ODataEntry *)buildSDMEntryFromPropertiesAndReturnError:(NSError **)error
{
    if (m_SDMEntry) {
        NSError *innerError = nil;
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.REPORTVIEWID forSDMPropertyWithName:@"REPORTVIEWID" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.WORKBOOKID forSDMPropertyWithName:@"WORKBOOKID" error:&innerError];
        if (innerError) {
            if (error) {
                *error = innerError;
            }
            return nil;
        }
	}
    return m_SDMEntry;
}

+ (void)loadEntitySchema:(ODataServiceDocument *)aService
{
    ODataCollection *collectionSchema = [aService.schema getCollectionByName:@"reportviewwbfav" workspaceOfCollection:nil];
    reportviewwbfavTypeEntitySchema = collectionSchema.entitySchema;
}

+ (void)loadLabels:(ODataServiceDocument *)aService
{
		NSMutableDictionary *properties = [BaseODataObject getSchemaPropertiesFromCollection:@"reportviewwbfav" andService:aService];
    	if (properties) {    
	    	reportviewwbfavTypeLabels = [@{} mutableCopy];
	    	for (ODataPropertyInfo *property in [properties allValues]) {
	        	reportviewwbfavTypeLabels[property.name] = property.label;;
	    	}
	    }
	    else {
        	LOGERROR(@"Failed to load SAP labels from service metadata");
    	}
}


+ (NSString *)getLabelForProperty:(NSString *)aPropertyName
{
    return [BaseODataObject getLabelFromDictionary:reportviewwbfavTypeLabels forProperty:aPropertyName];
}

- (void)loadProperties
{
    [super loadProperties];
	self.REPORTVIEWID = [self getStringValueForSDMPropertyWithName:@"REPORTVIEWID"];
	self.WORKBOOKID = [self getStringValueForSDMPropertyWithName:@"WORKBOOKID"];
}

+ (NSMutableArray *)createReportviewwbfavTypeEntriesForSDMEntries:(NSMutableArray *)sdmEntries
{
    NSMutableArray *entries = [@[] mutableCopy];
    for (ODataEntry *entry in sdmEntries) {
        reportviewwbfavTypeV0 *reportviewwbfavTypeObject = [[reportviewwbfavTypeV0 alloc] initWithSDMEntry:entry];
        [entries addObject:reportviewwbfavTypeObject];
    }
    return entries;
}


+ (NSMutableArray *)parseReportviewwbfavTypeEntriesWithData:(NSData *)aData error:(NSError **)error
{
    NSMutableArray *sdmEntries = [BaseEntityType getSDMEntriesForEntitySchema:reportviewwbfavTypeEntitySchema andData:aData error:error];
    if (!sdmEntries) {
    	return nil;
    }
	return [reportviewwbfavTypeV0 createReportviewwbfavTypeEntriesForSDMEntries:sdmEntries];
}

+ (NSMutableArray *)parseExpandedReportviewwbfavTypeEntriesWithData:(NSData *)aData andServiceDocument:(ODataServiceDocument *)aServiceDocument error:(NSError **)error
{
    NSMutableArray *sdmEntries = [BaseEntityType getExpandedSDMEntriesForEntitySchema:reportviewwbfavTypeEntitySchema andData:aData andServiceDocument:aServiceDocument error:error];
    if (!sdmEntries) {
    	return nil;
    }
	return [reportviewwbfavTypeV0 createReportviewwbfavTypeEntriesForSDMEntries:sdmEntries];
}

+ (reportviewwbfavTypeV0 *)parseReportviewwbfavTypeEntryWithData:(NSData *)aData error:(NSError **)error
{
    NSMutableArray *reportviewwbfavTypeEntries = [reportviewwbfavTypeV0 parseReportviewwbfavTypeEntriesWithData:aData error:error];
    if (!reportviewwbfavTypeEntries) {
    	return nil;
    }
    return (reportviewwbfavTypeV0 *)[reportviewwbfavTypeV0 getFirstObjectFromArray:reportviewwbfavTypeEntries];
}

+ (reportviewwbfavTypeV0 *)parseExpandedReportviewwbfavTypeEntryWithData:(NSData *)aData andServiceDocument:(ODataServiceDocument *)aServiceDocument error:(NSError **)error
{
	NSMutableArray *sdmEntries = [BaseEntityType getExpandedSDMEntriesForEntitySchema:reportviewwbfavTypeEntitySchema andData:aData andServiceDocument:aServiceDocument error:error];
    NSMutableArray *reportviewwbfavTypeEntries = [reportviewwbfavTypeV0 createReportviewwbfavTypeEntriesForSDMEntries:sdmEntries];
	return (reportviewwbfavTypeV0 *)[reportviewwbfavTypeV0 getFirstObjectFromArray:reportviewwbfavTypeEntries];
}



@end


#pragma mark - sapsopaV0 Service Proxy


@implementation sapsopaServiceV0

- (NSString *)getServiceDocumentFilename
{
	return SAPSOPA_SERVICE_DOCUMENTV0;
}

- (NSString *)getServiceMetadataFilename
{
	return SAPSOPA_SERVICE_METADATAV0;
}

- (void)loadEntitySetQueries
{
	[super loadEntitySetQueries];
    self.excludecharsQuery = [self getQueryForRelativePath:@"excludechars"];
    self.reportpagedefaultQuery = [self getQueryForRelativePath:@"reportpagedefault"];
    self.reportsQuery = [self getQueryForRelativePath:@"reports"];
    self.reportpagesQuery = [self getQueryForRelativePath:@"reportpages"];
    self.reportviewsQuery = [self getQueryForRelativePath:@"reportviews"];
    self.reportpagelayoutQuery = [self getQueryForRelativePath:@"reportpagelayout"];
    self.reportviewQuery = [self getQueryForRelativePath:@"reportview"];
    self.reportQuery = [self getQueryForRelativePath:@"report"];
    self.reportqueryconstraintsQuery = [self getQueryForRelativePath:@"reportqueryconstraints"];
    self.reportviewsfilterQuery = [self getQueryForRelativePath:@"reportviewsfilter"];
    self.sharedobjectsQuery = [self getQueryForRelativePath:@"sharedobjects"];
    self.reportpagenavQuery = [self getQueryForRelativePath:@"reportpagenav"];
    self.reportviewpagesQuery = [self getQueryForRelativePath:@"reportviewpages"];
    self.reportviewwbfavQuery = [self getQueryForRelativePath:@"reportviewwbfav"];
}

- (void)loadEntitySchemaForAllEntityTypes
{
    [super loadEntitySchemaForAllEntityTypes];
    [excludecharsTypeV0 loadEntitySchema:self.sdmServiceDocument];
    [reportpagedefaultTypeV0 loadEntitySchema:self.sdmServiceDocument];
    [reportsTypeV0 loadEntitySchema:self.sdmServiceDocument];
    [reportpagesTypeV0 loadEntitySchema:self.sdmServiceDocument];
    [reportviewsTypeV0 loadEntitySchema:self.sdmServiceDocument];
    [reportpagelayoutTypeV0 loadEntitySchema:self.sdmServiceDocument];
    [reportviewTypeV0 loadEntitySchema:self.sdmServiceDocument];
    [reportTypeV0 loadEntitySchema:self.sdmServiceDocument];
    [reportqueryconstraintsTypeV0 loadEntitySchema:self.sdmServiceDocument];
    [reportviewsfilterTypeV0 loadEntitySchema:self.sdmServiceDocument];
    [sharedobjectsTypeV0 loadEntitySchema:self.sdmServiceDocument];
    [reportpagenavTypeV0 loadEntitySchema:self.sdmServiceDocument];
    [reportviewpagesTypeV0 loadEntitySchema:self.sdmServiceDocument];
    [reportviewwbfavTypeV0 loadEntitySchema:self.sdmServiceDocument];
}

- (void)loadLabels
{
    [super loadLabels];
    [excludecharsTypeV0 loadLabels:self.sdmServiceDocument];
    [reportpagedefaultTypeV0 loadLabels:self.sdmServiceDocument];
    [reportsTypeV0 loadLabels:self.sdmServiceDocument];
    [reportpagesTypeV0 loadLabels:self.sdmServiceDocument];
    [reportviewsTypeV0 loadLabels:self.sdmServiceDocument];
    [reportpagelayoutTypeV0 loadLabels:self.sdmServiceDocument];
    [reportviewTypeV0 loadLabels:self.sdmServiceDocument];
    [reportTypeV0 loadLabels:self.sdmServiceDocument];
    [reportqueryconstraintsTypeV0 loadLabels:self.sdmServiceDocument];
    [reportviewsfilterTypeV0 loadLabels:self.sdmServiceDocument];
    [sharedobjectsTypeV0 loadLabels:self.sdmServiceDocument];
    [reportpagenavTypeV0 loadLabels:self.sdmServiceDocument];
    [reportviewpagesTypeV0 loadLabels:self.sdmServiceDocument];
    [reportviewwbfavTypeV0 loadLabels:self.sdmServiceDocument];
}

 
#pragma mark Service Entity Set methods
- (NSMutableArray *)getExcludecharsWithData:(NSData *)aData error:(NSError **)error
{
	return [excludecharsTypeV0 parseExpandedExcludecharsTypeEntriesWithData:aData andServiceDocument:self.sdmServiceDocument error:error];
}

- (ODataQuery *)getExcludecharsEntryQueryWithSP_CHAR_ID:(NSString *)SP_CHAR_ID
{
	SP_CHAR_ID = [ODataQuery encodeURLParameter:SP_CHAR_ID];
	NSString *relativePath = [NSString stringWithFormat:@"excludechars(SP_CHAR_ID=%@)", SP_CHAR_ID];
	ODataQuery *query = [self getQueryForRelativePath:relativePath];
	return query;
}

- (ODataQuery *)getExcludecharsEntryQueryTypedWithSP_CHAR_ID:(NSNumber *)SP_CHAR_ID
{
	id <URITypeConverting> converter = [ODataURITypeConverter uniqueInstance];
	NSString *SP_CHAR_IDUri = [ODataQuery encodeURLParameter:[converter convertToEdmInt32URI:SP_CHAR_ID]];
	NSString *relativePath = [NSString stringWithFormat:@"excludechars(SP_CHAR_ID=%@)", SP_CHAR_IDUri];
	ODataQuery *query = [self getQueryForRelativePath:relativePath];
	return query;
}

- (excludecharsTypeV0 *)getExcludecharsEntryWithData:(NSData *)aData error:(NSError **)error
{
	return [excludecharsTypeV0 parseExpandedExcludecharsTypeEntryWithData:aData andServiceDocument:self.sdmServiceDocument error:error];
}

- (NSMutableArray *)getReportpagedefaultWithData:(NSData *)aData error:(NSError **)error
{
	return [reportpagedefaultTypeV0 parseExpandedReportpagedefaultTypeEntriesWithData:aData andServiceDocument:self.sdmServiceDocument error:error];
}

- (ODataQuery *)getReportpagedefaultEntryQueryWithUSERID:(NSString *)USERID
{
	USERID = [ODataQuery encodeURLParameter:USERID];
	NSString *relativePath = [NSString stringWithFormat:@"reportpagedefault(USERID=%@)", USERID];
	ODataQuery *query = [self getQueryForRelativePath:relativePath];
	return query;
}

- (ODataQuery *)getReportpagedefaultEntryQueryTypedWithUSERID:(NSString *)USERID
{
	id <URITypeConverting> converter = [ODataURITypeConverter uniqueInstance];
	NSString *USERIDUri = [ODataQuery encodeURLParameter:[converter convertToEdmStringURI:USERID]];
	NSString *relativePath = [NSString stringWithFormat:@"reportpagedefault(USERID=%@)", USERIDUri];
	ODataQuery *query = [self getQueryForRelativePath:relativePath];
	return query;
}

- (reportpagedefaultTypeV0 *)getReportpagedefaultEntryWithData:(NSData *)aData error:(NSError **)error
{
	return [reportpagedefaultTypeV0 parseExpandedReportpagedefaultTypeEntryWithData:aData andServiceDocument:self.sdmServiceDocument error:error];
}

- (NSMutableArray *)getReportsWithData:(NSData *)aData error:(NSError **)error
{
	return [reportsTypeV0 parseExpandedReportsTypeEntriesWithData:aData andServiceDocument:self.sdmServiceDocument error:error];
}

- (ODataQuery *)getReportsEntryQueryWithREPORTID:(NSString *)REPORTID
{
	REPORTID = [ODataQuery encodeURLParameter:REPORTID];
	NSString *relativePath = [NSString stringWithFormat:@"reports(REPORTID=%@)", REPORTID];
	ODataQuery *query = [self getQueryForRelativePath:relativePath];
	return query;
}

- (ODataQuery *)getReportsEntryQueryTypedWithREPORTID:(NSString *)REPORTID
{
	id <URITypeConverting> converter = [ODataURITypeConverter uniqueInstance];
	NSString *REPORTIDUri = [ODataQuery encodeURLParameter:[converter convertToEdmStringURI:REPORTID]];
	NSString *relativePath = [NSString stringWithFormat:@"reports(REPORTID=%@)", REPORTIDUri];
	ODataQuery *query = [self getQueryForRelativePath:relativePath];
	return query;
}

- (reportsTypeV0 *)getReportsEntryWithData:(NSData *)aData error:(NSError **)error
{
	return [reportsTypeV0 parseExpandedReportsTypeEntryWithData:aData andServiceDocument:self.sdmServiceDocument error:error];
}

- (NSMutableArray *)getReportpagesWithData:(NSData *)aData error:(NSError **)error
{
	return [reportpagesTypeV0 parseExpandedReportpagesTypeEntriesWithData:aData andServiceDocument:self.sdmServiceDocument error:error];
}

- (ODataQuery *)getReportpagesEntryQueryWithREPORTPAGEID:(NSString *)REPORTPAGEID
{
	REPORTPAGEID = [ODataQuery encodeURLParameter:REPORTPAGEID];
	NSString *relativePath = [NSString stringWithFormat:@"reportpages(REPORTPAGEID=%@)", REPORTPAGEID];
	ODataQuery *query = [self getQueryForRelativePath:relativePath];
	return query;
}

- (ODataQuery *)getReportpagesEntryQueryTypedWithREPORTPAGEID:(NSString *)REPORTPAGEID
{
	id <URITypeConverting> converter = [ODataURITypeConverter uniqueInstance];
	NSString *REPORTPAGEIDUri = [ODataQuery encodeURLParameter:[converter convertToEdmStringURI:REPORTPAGEID]];
	NSString *relativePath = [NSString stringWithFormat:@"reportpages(REPORTPAGEID=%@)", REPORTPAGEIDUri];
	ODataQuery *query = [self getQueryForRelativePath:relativePath];
	return query;
}

- (reportpagesTypeV0 *)getReportpagesEntryWithData:(NSData *)aData error:(NSError **)error
{
	return [reportpagesTypeV0 parseExpandedReportpagesTypeEntryWithData:aData andServiceDocument:self.sdmServiceDocument error:error];
}

- (NSMutableArray *)getReportviewsWithData:(NSData *)aData error:(NSError **)error
{
	return [reportviewsTypeV0 parseExpandedReportviewsTypeEntriesWithData:aData andServiceDocument:self.sdmServiceDocument error:error];
}

- (ODataQuery *)getReportviewsEntryQueryWithREPORTVIEWID:(NSString *)REPORTVIEWID
{
	REPORTVIEWID = [ODataQuery encodeURLParameter:REPORTVIEWID];
	NSString *relativePath = [NSString stringWithFormat:@"reportviews(REPORTVIEWID=%@)", REPORTVIEWID];
	ODataQuery *query = [self getQueryForRelativePath:relativePath];
	return query;
}

- (ODataQuery *)getReportviewsEntryQueryTypedWithREPORTVIEWID:(NSString *)REPORTVIEWID
{
	id <URITypeConverting> converter = [ODataURITypeConverter uniqueInstance];
	NSString *REPORTVIEWIDUri = [ODataQuery encodeURLParameter:[converter convertToEdmStringURI:REPORTVIEWID]];
	NSString *relativePath = [NSString stringWithFormat:@"reportviews(REPORTVIEWID=%@)", REPORTVIEWIDUri];
	ODataQuery *query = [self getQueryForRelativePath:relativePath];
	return query;
}

- (reportviewsTypeV0 *)getReportviewsEntryWithData:(NSData *)aData error:(NSError **)error
{
	return [reportviewsTypeV0 parseExpandedReportviewsTypeEntryWithData:aData andServiceDocument:self.sdmServiceDocument error:error];
}

- (NSMutableArray *)getReportpagelayoutWithData:(NSData *)aData error:(NSError **)error
{
	return [reportpagelayoutTypeV0 parseExpandedReportpagelayoutTypeEntriesWithData:aData andServiceDocument:self.sdmServiceDocument error:error];
}

- (ODataQuery *)getReportpagelayoutEntryQueryWithREPORTPAGEID:(NSString *)REPORTPAGEID andROWNUMBER:(NSString *)ROWNUMBER andCOLUMNNUMBER:(NSString *)COLUMNNUMBER
{
	REPORTPAGEID = [ODataQuery encodeURLParameter:REPORTPAGEID];
	ROWNUMBER = [ODataQuery encodeURLParameter:ROWNUMBER];
	COLUMNNUMBER = [ODataQuery encodeURLParameter:COLUMNNUMBER];
	NSString *relativePath = [NSString stringWithFormat:@"reportpagelayout(REPORTPAGEID=%@,ROWNUMBER=%@,COLUMNNUMBER=%@)", REPORTPAGEID, ROWNUMBER, COLUMNNUMBER];
	ODataQuery *query = [self getQueryForRelativePath:relativePath];
	return query;
}

- (ODataQuery *)getReportpagelayoutEntryQueryTypedWithREPORTPAGEID:(NSString *)REPORTPAGEID andROWNUMBER:(NSNumber *)ROWNUMBER andCOLUMNNUMBER:(NSNumber *)COLUMNNUMBER
{
	id <URITypeConverting> converter = [ODataURITypeConverter uniqueInstance];
	NSString *REPORTPAGEIDUri = [ODataQuery encodeURLParameter:[converter convertToEdmStringURI:REPORTPAGEID]];
	NSString *ROWNUMBERUri = [ODataQuery encodeURLParameter:[converter convertToEdmByteURI:ROWNUMBER]];
	NSString *COLUMNNUMBERUri = [ODataQuery encodeURLParameter:[converter convertToEdmByteURI:COLUMNNUMBER]];
	NSString *relativePath = [NSString stringWithFormat:@"reportpagelayout(REPORTPAGEID=%@,ROWNUMBER=%@,COLUMNNUMBER=%@)", REPORTPAGEIDUri, ROWNUMBERUri, COLUMNNUMBERUri];
	ODataQuery *query = [self getQueryForRelativePath:relativePath];
	return query;
}

- (reportpagelayoutTypeV0 *)getReportpagelayoutEntryWithData:(NSData *)aData error:(NSError **)error
{
	return [reportpagelayoutTypeV0 parseExpandedReportpagelayoutTypeEntryWithData:aData andServiceDocument:self.sdmServiceDocument error:error];
}

- (NSMutableArray *)getReportviewWithData:(NSData *)aData error:(NSError **)error
{
	return [reportviewTypeV0 parseExpandedReportviewTypeEntriesWithData:aData andServiceDocument:self.sdmServiceDocument error:error];
}

- (ODataQuery *)getReportviewEntryQueryWithREPORTVIEWID:(NSString *)REPORTVIEWID andATTR_ID:(NSString *)ATTR_ID
{
	REPORTVIEWID = [ODataQuery encodeURLParameter:REPORTVIEWID];
	ATTR_ID = [ODataQuery encodeURLParameter:ATTR_ID];
	NSString *relativePath = [NSString stringWithFormat:@"reportview(REPORTVIEWID=%@,ATTR_ID=%@)", REPORTVIEWID, ATTR_ID];
	ODataQuery *query = [self getQueryForRelativePath:relativePath];
	return query;
}

- (ODataQuery *)getReportviewEntryQueryTypedWithREPORTVIEWID:(NSString *)REPORTVIEWID andATTR_ID:(NSString *)ATTR_ID
{
	id <URITypeConverting> converter = [ODataURITypeConverter uniqueInstance];
	NSString *REPORTVIEWIDUri = [ODataQuery encodeURLParameter:[converter convertToEdmStringURI:REPORTVIEWID]];
	NSString *ATTR_IDUri = [ODataQuery encodeURLParameter:[converter convertToEdmStringURI:ATTR_ID]];
	NSString *relativePath = [NSString stringWithFormat:@"reportview(REPORTVIEWID=%@,ATTR_ID=%@)", REPORTVIEWIDUri, ATTR_IDUri];
	ODataQuery *query = [self getQueryForRelativePath:relativePath];
	return query;
}

- (reportviewTypeV0 *)getReportviewEntryWithData:(NSData *)aData error:(NSError **)error
{
	return [reportviewTypeV0 parseExpandedReportviewTypeEntryWithData:aData andServiceDocument:self.sdmServiceDocument error:error];
}

- (NSMutableArray *)getReportWithData:(NSData *)aData error:(NSError **)error
{
	return [reportTypeV0 parseExpandedReportTypeEntriesWithData:aData andServiceDocument:self.sdmServiceDocument error:error];
}

- (ODataQuery *)getReportEntryQueryWithREPORTID:(NSString *)REPORTID andATTR_ID:(NSString *)ATTR_ID
{
	REPORTID = [ODataQuery encodeURLParameter:REPORTID];
	ATTR_ID = [ODataQuery encodeURLParameter:ATTR_ID];
	NSString *relativePath = [NSString stringWithFormat:@"report(REPORTID=%@,ATTR_ID=%@)", REPORTID, ATTR_ID];
	ODataQuery *query = [self getQueryForRelativePath:relativePath];
	return query;
}

- (ODataQuery *)getReportEntryQueryTypedWithREPORTID:(NSString *)REPORTID andATTR_ID:(NSString *)ATTR_ID
{
	id <URITypeConverting> converter = [ODataURITypeConverter uniqueInstance];
	NSString *REPORTIDUri = [ODataQuery encodeURLParameter:[converter convertToEdmStringURI:REPORTID]];
	NSString *ATTR_IDUri = [ODataQuery encodeURLParameter:[converter convertToEdmStringURI:ATTR_ID]];
	NSString *relativePath = [NSString stringWithFormat:@"report(REPORTID=%@,ATTR_ID=%@)", REPORTIDUri, ATTR_IDUri];
	ODataQuery *query = [self getQueryForRelativePath:relativePath];
	return query;
}

- (reportTypeV0 *)getReportEntryWithData:(NSData *)aData error:(NSError **)error
{
	return [reportTypeV0 parseExpandedReportTypeEntryWithData:aData andServiceDocument:self.sdmServiceDocument error:error];
}

- (NSMutableArray *)getReportqueryconstraintsWithData:(NSData *)aData error:(NSError **)error
{
	return [reportqueryconstraintsTypeV0 parseExpandedReportqueryconstraintsTypeEntriesWithData:aData andServiceDocument:self.sdmServiceDocument error:error];
}

- (ODataQuery *)getReportqueryconstraintsEntryQueryWithREPORTID:(NSString *)REPORTID andKFID:(NSString *)KFID andATTRID:(NSString *)ATTRID
{
	REPORTID = [ODataQuery encodeURLParameter:REPORTID];
	KFID = [ODataQuery encodeURLParameter:KFID];
	ATTRID = [ODataQuery encodeURLParameter:ATTRID];
	NSString *relativePath = [NSString stringWithFormat:@"reportqueryconstraints(REPORTID=%@,KFID=%@,ATTRID=%@)", REPORTID, KFID, ATTRID];
	ODataQuery *query = [self getQueryForRelativePath:relativePath];
	return query;
}

- (ODataQuery *)getReportqueryconstraintsEntryQueryTypedWithREPORTID:(NSString *)REPORTID andKFID:(NSString *)KFID andATTRID:(NSString *)ATTRID
{
	id <URITypeConverting> converter = [ODataURITypeConverter uniqueInstance];
	NSString *REPORTIDUri = [ODataQuery encodeURLParameter:[converter convertToEdmStringURI:REPORTID]];
	NSString *KFIDUri = [ODataQuery encodeURLParameter:[converter convertToEdmStringURI:KFID]];
	NSString *ATTRIDUri = [ODataQuery encodeURLParameter:[converter convertToEdmStringURI:ATTRID]];
	NSString *relativePath = [NSString stringWithFormat:@"reportqueryconstraints(REPORTID=%@,KFID=%@,ATTRID=%@)", REPORTIDUri, KFIDUri, ATTRIDUri];
	ODataQuery *query = [self getQueryForRelativePath:relativePath];
	return query;
}

- (reportqueryconstraintsTypeV0 *)getReportqueryconstraintsEntryWithData:(NSData *)aData error:(NSError **)error
{
	return [reportqueryconstraintsTypeV0 parseExpandedReportqueryconstraintsTypeEntryWithData:aData andServiceDocument:self.sdmServiceDocument error:error];
}

- (NSMutableArray *)getReportviewsfilterWithData:(NSData *)aData error:(NSError **)error
{
	return [reportviewsfilterTypeV0 parseExpandedReportviewsfilterTypeEntriesWithData:aData andServiceDocument:self.sdmServiceDocument error:error];
}

- (ODataQuery *)getReportviewsfilterEntryQueryWithREPORTID:(NSString *)REPORTID andATTR_ID:(NSString *)ATTR_ID
{
	REPORTID = [ODataQuery encodeURLParameter:REPORTID];
	ATTR_ID = [ODataQuery encodeURLParameter:ATTR_ID];
	NSString *relativePath = [NSString stringWithFormat:@"reportviewsfilter(REPORTID=%@,ATTR_ID=%@)", REPORTID, ATTR_ID];
	ODataQuery *query = [self getQueryForRelativePath:relativePath];
	return query;
}

- (ODataQuery *)getReportviewsfilterEntryQueryTypedWithREPORTID:(NSString *)REPORTID andATTR_ID:(NSString *)ATTR_ID
{
	id <URITypeConverting> converter = [ODataURITypeConverter uniqueInstance];
	NSString *REPORTIDUri = [ODataQuery encodeURLParameter:[converter convertToEdmStringURI:REPORTID]];
	NSString *ATTR_IDUri = [ODataQuery encodeURLParameter:[converter convertToEdmStringURI:ATTR_ID]];
	NSString *relativePath = [NSString stringWithFormat:@"reportviewsfilter(REPORTID=%@,ATTR_ID=%@)", REPORTIDUri, ATTR_IDUri];
	ODataQuery *query = [self getQueryForRelativePath:relativePath];
	return query;
}

- (reportviewsfilterTypeV0 *)getReportviewsfilterEntryWithData:(NSData *)aData error:(NSError **)error
{
	return [reportviewsfilterTypeV0 parseExpandedReportviewsfilterTypeEntryWithData:aData andServiceDocument:self.sdmServiceDocument error:error];
}

- (NSMutableArray *)getSharedobjectsWithData:(NSData *)aData error:(NSError **)error
{
	return [sharedobjectsTypeV0 parseExpandedSharedobjectsTypeEntriesWithData:aData andServiceDocument:self.sdmServiceDocument error:error];
}

- (ODataQuery *)getSharedobjectsEntryQueryWithSHARED_WITH_ID:(NSString *)SHARED_WITH_ID andOBJECTID:(NSString *)OBJECTID
{
	SHARED_WITH_ID = [ODataQuery encodeURLParameter:SHARED_WITH_ID];
	OBJECTID = [ODataQuery encodeURLParameter:OBJECTID];
	NSString *relativePath = [NSString stringWithFormat:@"sharedobjects(SHARED_WITH_ID=%@,OBJECTID=%@)", SHARED_WITH_ID, OBJECTID];
	ODataQuery *query = [self getQueryForRelativePath:relativePath];
	return query;
}

- (ODataQuery *)getSharedobjectsEntryQueryTypedWithSHARED_WITH_ID:(NSString *)SHARED_WITH_ID andOBJECTID:(NSString *)OBJECTID
{
	id <URITypeConverting> converter = [ODataURITypeConverter uniqueInstance];
	NSString *SHARED_WITH_IDUri = [ODataQuery encodeURLParameter:[converter convertToEdmStringURI:SHARED_WITH_ID]];
	NSString *OBJECTIDUri = [ODataQuery encodeURLParameter:[converter convertToEdmStringURI:OBJECTID]];
	NSString *relativePath = [NSString stringWithFormat:@"sharedobjects(SHARED_WITH_ID=%@,OBJECTID=%@)", SHARED_WITH_IDUri, OBJECTIDUri];
	ODataQuery *query = [self getQueryForRelativePath:relativePath];
	return query;
}

- (sharedobjectsTypeV0 *)getSharedobjectsEntryWithData:(NSData *)aData error:(NSError **)error
{
	return [sharedobjectsTypeV0 parseExpandedSharedobjectsTypeEntryWithData:aData andServiceDocument:self.sdmServiceDocument error:error];
}

- (NSMutableArray *)getReportpagenavWithData:(NSData *)aData error:(NSError **)error
{
	return [reportpagenavTypeV0 parseExpandedReportpagenavTypeEntriesWithData:aData andServiceDocument:self.sdmServiceDocument error:error];
}

- (ODataQuery *)getReportpagenavEntryQueryWithREPORTPAGEID:(NSString *)REPORTPAGEID andNAVIGATIONID:(NSString *)NAVIGATIONID andNAVIGATIONATTR:(NSString *)NAVIGATIONATTR
{
	REPORTPAGEID = [ODataQuery encodeURLParameter:REPORTPAGEID];
	NAVIGATIONID = [ODataQuery encodeURLParameter:NAVIGATIONID];
	NAVIGATIONATTR = [ODataQuery encodeURLParameter:NAVIGATIONATTR];
	NSString *relativePath = [NSString stringWithFormat:@"reportpagenav(REPORTPAGEID=%@,NAVIGATIONID=%@,NAVIGATIONATTR=%@)", REPORTPAGEID, NAVIGATIONID, NAVIGATIONATTR];
	ODataQuery *query = [self getQueryForRelativePath:relativePath];
	return query;
}

- (ODataQuery *)getReportpagenavEntryQueryTypedWithREPORTPAGEID:(NSString *)REPORTPAGEID andNAVIGATIONID:(NSString *)NAVIGATIONID andNAVIGATIONATTR:(NSString *)NAVIGATIONATTR
{
	id <URITypeConverting> converter = [ODataURITypeConverter uniqueInstance];
	NSString *REPORTPAGEIDUri = [ODataQuery encodeURLParameter:[converter convertToEdmStringURI:REPORTPAGEID]];
	NSString *NAVIGATIONIDUri = [ODataQuery encodeURLParameter:[converter convertToEdmStringURI:NAVIGATIONID]];
	NSString *NAVIGATIONATTRUri = [ODataQuery encodeURLParameter:[converter convertToEdmStringURI:NAVIGATIONATTR]];
	NSString *relativePath = [NSString stringWithFormat:@"reportpagenav(REPORTPAGEID=%@,NAVIGATIONID=%@,NAVIGATIONATTR=%@)", REPORTPAGEIDUri, NAVIGATIONIDUri, NAVIGATIONATTRUri];
	ODataQuery *query = [self getQueryForRelativePath:relativePath];
	return query;
}

- (reportpagenavTypeV0 *)getReportpagenavEntryWithData:(NSData *)aData error:(NSError **)error
{
	return [reportpagenavTypeV0 parseExpandedReportpagenavTypeEntryWithData:aData andServiceDocument:self.sdmServiceDocument error:error];
}

- (NSMutableArray *)getReportviewpagesWithData:(NSData *)aData error:(NSError **)error
{
	return [reportviewpagesTypeV0 parseExpandedReportviewpagesTypeEntriesWithData:aData andServiceDocument:self.sdmServiceDocument error:error];
}

- (ODataQuery *)getReportviewpagesEntryQueryWithREPORTVIEWID:(NSString *)REPORTVIEWID andREPORTPAGEID:(NSString *)REPORTPAGEID
{
	REPORTVIEWID = [ODataQuery encodeURLParameter:REPORTVIEWID];
	REPORTPAGEID = [ODataQuery encodeURLParameter:REPORTPAGEID];
	NSString *relativePath = [NSString stringWithFormat:@"reportviewpages(REPORTVIEWID=%@,REPORTPAGEID=%@)", REPORTVIEWID, REPORTPAGEID];
	ODataQuery *query = [self getQueryForRelativePath:relativePath];
	return query;
}

- (ODataQuery *)getReportviewpagesEntryQueryTypedWithREPORTVIEWID:(NSString *)REPORTVIEWID andREPORTPAGEID:(NSString *)REPORTPAGEID
{
	id <URITypeConverting> converter = [ODataURITypeConverter uniqueInstance];
	NSString *REPORTVIEWIDUri = [ODataQuery encodeURLParameter:[converter convertToEdmStringURI:REPORTVIEWID]];
	NSString *REPORTPAGEIDUri = [ODataQuery encodeURLParameter:[converter convertToEdmStringURI:REPORTPAGEID]];
	NSString *relativePath = [NSString stringWithFormat:@"reportviewpages(REPORTVIEWID=%@,REPORTPAGEID=%@)", REPORTVIEWIDUri, REPORTPAGEIDUri];
	ODataQuery *query = [self getQueryForRelativePath:relativePath];
	return query;
}

- (reportviewpagesTypeV0 *)getReportviewpagesEntryWithData:(NSData *)aData error:(NSError **)error
{
	return [reportviewpagesTypeV0 parseExpandedReportviewpagesTypeEntryWithData:aData andServiceDocument:self.sdmServiceDocument error:error];
}

- (NSMutableArray *)getReportviewwbfavWithData:(NSData *)aData error:(NSError **)error
{
	return [reportviewwbfavTypeV0 parseExpandedReportviewwbfavTypeEntriesWithData:aData andServiceDocument:self.sdmServiceDocument error:error];
}

- (ODataQuery *)getReportviewwbfavEntryQueryWithREPORTVIEWID:(NSString *)REPORTVIEWID andWORKBOOKID:(NSString *)WORKBOOKID
{
	REPORTVIEWID = [ODataQuery encodeURLParameter:REPORTVIEWID];
	WORKBOOKID = [ODataQuery encodeURLParameter:WORKBOOKID];
	NSString *relativePath = [NSString stringWithFormat:@"reportviewwbfav(REPORTVIEWID=%@,WORKBOOKID=%@)", REPORTVIEWID, WORKBOOKID];
	ODataQuery *query = [self getQueryForRelativePath:relativePath];
	return query;
}

- (ODataQuery *)getReportviewwbfavEntryQueryTypedWithREPORTVIEWID:(NSString *)REPORTVIEWID andWORKBOOKID:(NSString *)WORKBOOKID
{
	id <URITypeConverting> converter = [ODataURITypeConverter uniqueInstance];
	NSString *REPORTVIEWIDUri = [ODataQuery encodeURLParameter:[converter convertToEdmStringURI:REPORTVIEWID]];
	NSString *WORKBOOKIDUri = [ODataQuery encodeURLParameter:[converter convertToEdmStringURI:WORKBOOKID]];
	NSString *relativePath = [NSString stringWithFormat:@"reportviewwbfav(REPORTVIEWID=%@,WORKBOOKID=%@)", REPORTVIEWIDUri, WORKBOOKIDUri];
	ODataQuery *query = [self getQueryForRelativePath:relativePath];
	return query;
}

- (reportviewwbfavTypeV0 *)getReportviewwbfavEntryWithData:(NSData *)aData error:(NSError **)error
{
	return [reportviewwbfavTypeV0 parseExpandedReportviewwbfavTypeEntryWithData:aData andServiceDocument:self.sdmServiceDocument error:error];
}



#pragma mark Service Function Import methods 

@end
