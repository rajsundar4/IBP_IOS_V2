/*
 
 Auto-Generated by SAP NetWeaver Gateway Productivity Accelerator, Version 1.0
 
 File: sapsopaRequestHandler.h
 Abstract: A singleton class responsible for sending the appropriate service requests (for retrieving and modifying service data) and parsing the responses into semantic objects, using the sapsopa service proxy and the SDMConnectivityHelper class. The sent requests also consider the service URL and the SAP client defined in the application settings. The class is also responsible for sending the appropriate notifications to the application delegate and view controllers, for handling the request success, failure and authentication challenge.
 
 */

#import <Foundation/Foundation.h>
#import <Foundation/NSData.h>
#import "SDMHttpRequestDelegate.h"
#import "SDMConnectivityHelper.h"
#import "sapsopaServiceDeclarations.h"
#import "ServiceNegotiator.h"
#import "RequestHandlerConstants.h"
#import "Authenticating.h"



#pragma mark - Notifications



extern NSString * const kLoadReportsCompletedNotification; ///< Notification key for complete loading of reports items.
extern NSString * const kLoadReportsTypeCompletedNotification; ///< Notification key for complete loading of a specific reportsType item.
extern NSString * const kLoadReportForReportsTypeCompletedNotification; ///< Notification key for complete loading of report navigation items for a specific reportsType item.
extern NSString * const kCreateReportsTypeCompletedNotification; ///< Notification key for complete creating a reportsType collection item.
extern NSString * const kUpdateReportsTypeCompletedNotification; ///< Notification key for complete updating a reportsType collection item.
extern NSString * const kDeleteReportsTypeCompletedNotification; ///< Notification key for complete deleting a reportsType item.

extern NSString * const kLoadReportpagesCompletedNotification; ///< Notification key for complete loading of reportpages items.
extern NSString * const kLoadReportpagesTypeCompletedNotification; ///< Notification key for complete loading of a specific reportpagesType item.
extern NSString * const kLoadReportpagelayoutForReportpagesTypeCompletedNotification; ///< Notification key for complete loading of reportpagelayout navigation items for a specific reportpagesType item.
extern NSString * const kCreateReportpagesTypeCompletedNotification; ///< Notification key for complete creating a reportpagesType collection item.
extern NSString * const kUpdateReportpagesTypeCompletedNotification; ///< Notification key for complete updating a reportpagesType collection item.
extern NSString * const kDeleteReportpagesTypeCompletedNotification; ///< Notification key for complete deleting a reportpagesType item.

extern NSString * const kLoadReportviewsCompletedNotification; ///< Notification key for complete loading of reportviews items.
extern NSString * const kLoadReportviewsTypeCompletedNotification; ///< Notification key for complete loading of a specific reportviewsType item.
extern NSString * const kLoadReportviewForReportviewsTypeCompletedNotification; ///< Notification key for complete loading of reportview navigation items for a specific reportviewsType item.
extern NSString * const kLoadReportviewfiltersForReportviewsTypeCompletedNotification; ///< Notification key for complete loading of reportviewfilters navigation items for a specific reportviewsType item.
extern NSString * const kCreateReportviewsTypeCompletedNotification; ///< Notification key for complete creating a reportviewsType collection item.
extern NSString * const kUpdateReportviewsTypeCompletedNotification; ///< Notification key for complete updating a reportviewsType collection item.
extern NSString * const kDeleteReportviewsTypeCompletedNotification; ///< Notification key for complete deleting a reportviewsType item.

extern NSString * const kLoadReportpagelayoutCompletedNotification; ///< Notification key for complete loading of reportpagelayout items.
extern NSString * const kLoadReportpagelayoutTypeCompletedNotification; ///< Notification key for complete loading of a specific reportpagelayoutType item.
extern NSString * const kLoadReportviewForReportpagelayoutTypeCompletedNotification; ///< Notification key for complete loading of reportview navigation items for a specific reportpagelayoutType item.
extern NSString * const kCreateReportpagelayoutTypeCompletedNotification; ///< Notification key for complete creating a reportpagelayoutType collection item.
extern NSString * const kUpdateReportpagelayoutTypeCompletedNotification; ///< Notification key for complete updating a reportpagelayoutType collection item.
extern NSString * const kDeleteReportpagelayoutTypeCompletedNotification; ///< Notification key for complete deleting a reportpagelayoutType item.

extern NSString * const kLoadReportviewCompletedNotification; ///< Notification key for complete loading of reportview items.
extern NSString * const kLoadReportviewTypeCompletedNotification; ///< Notification key for complete loading of a specific reportviewType item.
extern NSString * const kCreateReportviewTypeCompletedNotification; ///< Notification key for complete creating a reportviewType collection item.
extern NSString * const kUpdateReportviewTypeCompletedNotification; ///< Notification key for complete updating a reportviewType collection item.
extern NSString * const kDeleteReportviewTypeCompletedNotification; ///< Notification key for complete deleting a reportviewType item.

extern NSString * const kLoadReportCompletedNotification; ///< Notification key for complete loading of report items.
extern NSString * const kLoadReportTypeCompletedNotification; ///< Notification key for complete loading of a specific reportType item.
extern NSString * const kCreateReportTypeCompletedNotification; ///< Notification key for complete creating a reportType collection item.
extern NSString * const kUpdateReportTypeCompletedNotification; ///< Notification key for complete updating a reportType collection item.
extern NSString * const kDeleteReportTypeCompletedNotification; ///< Notification key for complete deleting a reportType item.

extern NSString * const kLoadReportviewfiltersCompletedNotification; ///< Notification key for complete loading of reportviewfilters items.
extern NSString * const kLoadReportviewfiltersTypeCompletedNotification; ///< Notification key for complete loading of a specific reportviewfiltersType item.
extern NSString * const kCreateReportviewfiltersTypeCompletedNotification; ///< Notification key for complete creating a reportviewfiltersType collection item.
extern NSString * const kUpdateReportviewfiltersTypeCompletedNotification; ///< Notification key for complete updating a reportviewfiltersType collection item.
extern NSString * const kDeleteReportviewfiltersTypeCompletedNotification; ///< Notification key for complete deleting a reportviewfiltersType item.










#pragma mark -

/**
 A singleton class responsible for sending the appropriate service requests (for retrieving service data needed by the application views) and parsing the responses into semantic objects, using the sapsopa service proxy and the SDMConnectivityHelper class. The sent requests also consider the service URL and the SAP client defined in the application settings. The class is also responsible for sending the appropriate notifications to the application delegate and view controllers, for handling the request success, failure and authentication challenge.
 */
@interface sapsopaRequestHandler : NSObject <SDMHttpRequestDelegate, SDMConnectivityHelperDelegate> {
    SDMConnectivityHelper *connectivityHelper;
    sapsopaService *service;
    CSRFData *csrfData;
    NSString *deviceLanguage;
	ServiceNegotiator *serviceNegotiator;
	SecIdentityRef certificate;
}

@property (strong, nonatomic, setter = setServiceDocumentURL:) NSString *serviceDocumentURL; ///< sapsopa service document URL (used as base URL for service requests).
@property (strong, nonatomic, setter = setBaseServerURL:) NSString *baseServerURL; ///< sapsopa service document URL (used as base URL for service requests).
@property (strong, nonatomic, setter = setSAPClient:) NSString *client; ///< SAP client (may be empty or nil for default client).
@property (assign, nonatomic) BOOL useServiceNegotiation; ///< Indicates if the service negotiation process should be performed. This property is considered only when the useLocalMetadata property is set to NO.
@property (assign, nonatomic) BOOL useLocalMetadata; ///< Indicates if the service proxy is initialized using local metadata.
@property (strong, nonatomic, setter = setCsrfToken:) NSString *csrfToken;
@property (strong, nonatomic, setter = setXsSessionId:) NSString *xsSessionId;
/// For saving status code.
@property (nonatomic, readwrite) int responseCode;

/**
 @return sapsopaRequestHandler singleton instance.
 */
+ (sapsopaRequestHandler *)uniqueInstance;

/**
 @return BOOL indicating if service is valid.
 */
- (BOOL)isServiceValid;

#pragma mark - User Login


//- (BOOL)executeSOPLogin;
- (BOOL) executeSOPLoginWithUsername:(NSString *) aUsername andPassword:(NSString *) aPassword andReturnError:(__autoreleasing NSError **) aError;
- (BOOL) executeSOPLogoutAndReturnError:(__autoreleasing NSError **) aError;
- (NSDictionary *)loadReportJsonSyncWithReportview:(NSString *) aReportview andReturnError:(__autoreleasing NSError **) aError;
- (NSString *)getUserPlanningAreaWithUsername:(NSString *) username andReturnError:(__autoreleasing NSError **) aError;
- (NSDictionary *) getUserFavoritesWithUsername:(NSString *) aUsername andPlanArea:(NSString *) aPlanArea andReturnError:(__autoreleasing NSError **) aError;
- (BOOL) getUserSession:(NSString *) aUsername andReturnError:(__autoreleasing NSError **) aError;

/**
 Authenticates the given user name and password against the service, and initiate the service proxy according to the appropriate service URL, metadata and service document. If the useServiceNegotiation propery is YES, the method will also execute the service negotiation as part of the login process.  If the useLocalMetadata propery is YES, the method will use the local service metadata in order to initialize the service proxy object.
 Make sure to call this method before calling any other method of this class for executing service requests.
 If SUP connetivity is required, make sure to set the application and SUP server values in the ConnectivitySettings class, before calling this method.
 For enabling Single Sign On (SSO):
 At the first application run pass the username and password to securely store the user credentials on the device.
 At later calls, pass empty credentials to exctract the stored user credentials.
 @param aUsername The user name used for the authentication. If domain is required, the username should be in the format: [domain]\[user]
 @param aPassword The password for the provided user name.
 @param aVaultPassword a password for the vault (required only for SUP connectivity, otherwise this value is ignored).
 @param error A pointer to an NSError object.
 @return BOOL indicating if authentication succeeded.
 */
- (BOOL)executeLoginWithUsername:(NSString *)aUsername andPassword:(NSString *)aPassword andVaultPassword:(NSString *)aVaultPassword error:(NSError * __autoreleasing *)error;

/**
 Authenticates the client certificate against the service, and initiate the service proxy according to the appropriate service URL, metadata and service document. If the useServiceNegotiation propery is YES, the method will also execute the service negotiation as part of the login process. If the useLocalMetadata propery is YES, the method will use the local service metadata in order to initialize the service proxy object (without service negotiation).
 Make sure to call this method before calling any other method of this class for executing service requests.
 If SUP connetivity is required, make sure to set the application and SUP server values in the ConnectivitySettings class, before calling this method.
 @param aVaultPassword a password for the vault (required only for SUP connectivity, otherwise this value is ignored).
 @param error A pointer to an NSError object.
 @return BOOL indicating if authentication succeeded.
 */
- (BOOL)executeLoginWithCertificateAndVaultPassword:(NSString *)aVaultPassword error:(NSError *__autoreleasing *)error;



#pragma mark - Service Negotiation

/**
 Updates the service document URL with the result of the best matching service query of the Gateway service catalog.
 Is performed as part of the login process (in the executeLoginWithUsername:andPassword method), if the useServiceNegotiation propery is YES.
 @param authenticator The implementation of Authenticating protocol according to the required authentication method.
 @param error A pointer to an NSError object.
 @return BOOL indicating if service negotiation succeeded.
 */
- (BOOL)negotiateServiceVersionAndUpdateServiceDocumentUrlUsingAuthenticator:(id <Authenticating>)authenticator error:(NSError * __autoreleasing *)error;




#pragma mark - Reports methods

/**
 Load the service entity-set Reports items, parsed into reportsType objects.
 May send notifications with the following keys and associated objects (as userInfo dictionary):
 - kLoadReportsCompletedNotification for operation completion, along with the array of reportsType items (for kResponseItems key) or parsing error (for kParsingError key) or server response error (for kServerResponseError).
 - kAuthenticationNeededNotification for request authentication challenge.
 */
- (void)loadReports;

/**
 Load a specific reportsType item, parsed into reportsType object.
 May send notifications with the following keys and associated objects (as userInfo dictionary):
 - kLoadReportsTypeCompletedNotification for operation completion, along with the reportsType item given as parameter (for kResponseParentItem key), and the response reportsType item (for kResponseItem key) or parsing error (for kParsingError key) or server response error (for kServerResponseError).
 - kAuthenticationNeededNotification for request authentication challenge.
 @param aReportsType The specific item to load.
 */
- (void)loadReportsType:(reportsType *)aReportsType;
/**
 Load a specific reportsType item, parsed into reportsType object.
 May send notifications with the following keys and associated objects (as userInfo dictionary):
 - kLoadReportsTypeCompletedNotification for operation completion, along with the reportsType item given as parameter (for kResponseParentItem key), and the response reportsType item (for kResponseItem key) or parsing error (for kParsingError key) or server response error (for kServerResponseError).
 - kAuthenticationNeededNotification for request authentication challenge.
 @param aReportsType The specific item to load.
 @param expand Should load the specific item with all its related items (using $expand query parameter)
 */
- (void)loadReportsType:(reportsType *)aReportsType expand:(BOOL)expand;

/**
 Load the report navigation items for a specific reportsType item, parsed into reportType objects.
 May send notifications with the following keys and associated objects (as userInfo dictionary):
 - kLoadReportForReportsTypeCompletedNotification for operation completion, along with the reportsType item given as parameter (for kResponseParentItem key), and the array of the reportType items (for kResponseItems key) or parsing error (for kParsingError key) or server response error (for kServerResponseError).
 - kAuthenticationNeededNotification for request authentication challenge.
 @param aReportsType The specific item to load its report navigation items.
 */
- (void)loadReportForReportsType:(reportsType *)aReportsType;

/**
 Creates a reportsType item and add it to the Reports.
 May send notifications with the following keys and associated objects (as userInfo dictionary):
 - kCreateReportsTypeCompletedNotification for operation completion, along with the reportsType item given as parameter (for kResponseParentItem key), and the response reportsType item (for kResponseItem key) or parsing error (for kParsingError key) or server response error (for kServerResponseError).
 - kAuthenticationNeededNotification for request authentication challenge.
 @param aReportsType The specific item to create.
 */
- (void)createReportsType:(reportsType *)aReportsType;

/**
 Creates a reportType item for a reportsType item (using report navigation query).
 May send notifications with the following keys and associated objects (as userInfo dictionary):
 - kCreatereportTypeCompletedNotification for operation completion, along with the reportType item given as parameter (for kResponseParentItem key), and the response reportType item (for kResponseItem key) or parsing error (for kParsingError key) or server response error (for kServerResponseError).
 - kAuthenticationNeededNotification for request authentication challenge.
 @param aNewReportType The specific item to create.
 @param aReportsType The item which the created item will be associated to.
 */
- (void)createReportType:(reportType *)aNewReportType forReportsType:(reportsType *)aReportsType;

/**
 Updates a reportsType item in the Reports.
 May send notifications with the following keys and associated objects (as userInfo dictionary):
 - kUpdateReportsTypeCompletedNotification for operation completion, along with the reportsType item given as parameter (for kResponseParentItem key), and the response reportsType item (for kResponseItem key) or parsing error (for kParsingError key) or server response error (for kServerResponseError).
 - kAuthenticationNeededNotification for request authentication challenge.
 @param aReportsType The specific item to update.
 */
- (void)updateReportsType:(reportsType *)aReportsType;

/**
 Deletes a specific reportsType item from its collection.
 May send notifications with the following keys and associated objects (as userInfo dictionary):
 - kDeleteReportsTypeCompletedNotification for operation completion, along with the reportsType item given as parameter (for kResponseParentItem key) or server response error (for kServerResponseError).
 - kAuthenticationNeededNotification for request authentication challenge.
 @param aReportsType The specific item to delete.
 */
- (void)deleteReportsType:(reportsType *)aReportsType;

#pragma mark - Reportpages methods

/**
 Load the service entity-set Reportpages items, parsed into reportpagesType objects.
 May send notifications with the following keys and associated objects (as userInfo dictionary):
 - kLoadReportpagesCompletedNotification for operation completion, along with the array of reportpagesType items (for kResponseItems key) or parsing error (for kParsingError key) or server response error (for kServerResponseError).
 - kAuthenticationNeededNotification for request authentication challenge.
 */
- (void)loadReportpages;

/**
 Load a specific reportpagesType item, parsed into reportpagesType object.
 May send notifications with the following keys and associated objects (as userInfo dictionary):
 - kLoadReportpagesTypeCompletedNotification for operation completion, along with the reportpagesType item given as parameter (for kResponseParentItem key), and the response reportpagesType item (for kResponseItem key) or parsing error (for kParsingError key) or server response error (for kServerResponseError).
 - kAuthenticationNeededNotification for request authentication challenge.
 @param aReportpagesType The specific item to load.
 */
- (void)loadReportpagesType:(reportpagesType *)aReportpagesType;
/**
 Load a specific reportpagesType item, parsed into reportpagesType object.
 May send notifications with the following keys and associated objects (as userInfo dictionary):
 - kLoadReportpagesTypeCompletedNotification for operation completion, along with the reportpagesType item given as parameter (for kResponseParentItem key), and the response reportpagesType item (for kResponseItem key) or parsing error (for kParsingError key) or server response error (for kServerResponseError).
 - kAuthenticationNeededNotification for request authentication challenge.
 @param aReportpagesType The specific item to load.
 @param expand Should load the specific item with all its related items (using $expand query parameter)
 */
- (void)loadReportpagesType:(reportpagesType *)aReportpagesType expand:(BOOL)expand;

/**
 Load the reportpagelayout navigation items for a specific reportpagesType item, parsed into reportpagelayoutType objects.
 May send notifications with the following keys and associated objects (as userInfo dictionary):
 - kLoadReportpagelayoutForReportpagesTypeCompletedNotification for operation completion, along with the reportpagesType item given as parameter (for kResponseParentItem key), and the array of the reportpagelayoutType items (for kResponseItems key) or parsing error (for kParsingError key) or server response error (for kServerResponseError).
 - kAuthenticationNeededNotification for request authentication challenge.
 @param aReportpagesType The specific item to load its reportpagelayout navigation items.
 */
- (void)loadReportpagelayoutForReportpagesType:(reportpagesType *)aReportpagesType;

/**
 Creates a reportpagesType item and add it to the Reportpages.
 May send notifications with the following keys and associated objects (as userInfo dictionary):
 - kCreateReportpagesTypeCompletedNotification for operation completion, along with the reportpagesType item given as parameter (for kResponseParentItem key), and the response reportpagesType item (for kResponseItem key) or parsing error (for kParsingError key) or server response error (for kServerResponseError).
 - kAuthenticationNeededNotification for request authentication challenge.
 @param aReportpagesType The specific item to create.
 */
- (void)createReportpagesType:(reportpagesType *)aReportpagesType;

/**
 Creates a reportpagelayoutType item for a reportpagesType item (using reportpagelayout navigation query).
 May send notifications with the following keys and associated objects (as userInfo dictionary):
 - kCreatereportpagelayoutTypeCompletedNotification for operation completion, along with the reportpagelayoutType item given as parameter (for kResponseParentItem key), and the response reportpagelayoutType item (for kResponseItem key) or parsing error (for kParsingError key) or server response error (for kServerResponseError).
 - kAuthenticationNeededNotification for request authentication challenge.
 @param aNewReportpagelayoutType The specific item to create.
 @param aReportpagesType The item which the created item will be associated to.
 */
- (void)createReportpagelayoutType:(reportpagelayoutType *)aNewReportpagelayoutType forReportpagesType:(reportpagesType *)aReportpagesType;

/**
 Updates a reportpagesType item in the Reportpages.
 May send notifications with the following keys and associated objects (as userInfo dictionary):
 - kUpdateReportpagesTypeCompletedNotification for operation completion, along with the reportpagesType item given as parameter (for kResponseParentItem key), and the response reportpagesType item (for kResponseItem key) or parsing error (for kParsingError key) or server response error (for kServerResponseError).
 - kAuthenticationNeededNotification for request authentication challenge.
 @param aReportpagesType The specific item to update.
 */
- (void)updateReportpagesType:(reportpagesType *)aReportpagesType;

/**
 Deletes a specific reportpagesType item from its collection.
 May send notifications with the following keys and associated objects (as userInfo dictionary):
 - kDeleteReportpagesTypeCompletedNotification for operation completion, along with the reportpagesType item given as parameter (for kResponseParentItem key) or server response error (for kServerResponseError).
 - kAuthenticationNeededNotification for request authentication challenge.
 @param aReportpagesType The specific item to delete.
 */
- (void)deleteReportpagesType:(reportpagesType *)aReportpagesType;

#pragma mark - Reportviews methods

/**
 Load the service entity-set Reportviews items, parsed into reportviewsType objects.
 May send notifications with the following keys and associated objects (as userInfo dictionary):
 - kLoadReportviewsCompletedNotification for operation completion, along with the array of reportviewsType items (for kResponseItems key) or parsing error (for kParsingError key) or server response error (for kServerResponseError).
 - kAuthenticationNeededNotification for request authentication challenge.
 */
- (void)loadReportviews;

/**
 Load a specific reportviewsType item, parsed into reportviewsType object.
 May send notifications with the following keys and associated objects (as userInfo dictionary):
 - kLoadReportviewsTypeCompletedNotification for operation completion, along with the reportviewsType item given as parameter (for kResponseParentItem key), and the response reportviewsType item (for kResponseItem key) or parsing error (for kParsingError key) or server response error (for kServerResponseError).
 - kAuthenticationNeededNotification for request authentication challenge.
 @param aReportviewsType The specific item to load.
 */
- (void)loadReportviewsType:(reportviewsType *)aReportviewsType;
/**
 Load a specific reportviewsType item, parsed into reportviewsType object.
 May send notifications with the following keys and associated objects (as userInfo dictionary):
 - kLoadReportviewsTypeCompletedNotification for operation completion, along with the reportviewsType item given as parameter (for kResponseParentItem key), and the response reportviewsType item (for kResponseItem key) or parsing error (for kParsingError key) or server response error (for kServerResponseError).
 - kAuthenticationNeededNotification for request authentication challenge.
 @param aReportviewsType The specific item to load.
 @param expand Should load the specific item with all its related items (using $expand query parameter)
 */
- (void)loadReportviewsType:(reportviewsType *)aReportviewsType expand:(BOOL)expand;

/**
 Load the reportview navigation items for a specific reportviewsType item, parsed into reportviewType objects.
 May send notifications with the following keys and associated objects (as userInfo dictionary):
 - kLoadReportviewForReportviewsTypeCompletedNotification for operation completion, along with the reportviewsType item given as parameter (for kResponseParentItem key), and the array of the reportviewType items (for kResponseItems key) or parsing error (for kParsingError key) or server response error (for kServerResponseError).
 - kAuthenticationNeededNotification for request authentication challenge.
 @param aReportviewsType The specific item to load its reportview navigation items.
 */
- (void)loadReportviewForReportviewsType:(reportviewsType *)aReportviewsType;

/**
 Load the reportviewfilters navigation items for a specific reportviewsType item, parsed into reportviewfiltersType objects.
 May send notifications with the following keys and associated objects (as userInfo dictionary):
 - kLoadReportviewfiltersForReportviewsTypeCompletedNotification for operation completion, along with the reportviewsType item given as parameter (for kResponseParentItem key), and the array of the reportviewfiltersType items (for kResponseItems key) or parsing error (for kParsingError key) or server response error (for kServerResponseError).
 - kAuthenticationNeededNotification for request authentication challenge.
 @param aReportviewsType The specific item to load its reportviewfilters navigation items.
 */
- (void)loadReportviewfiltersForReportviewsType:(reportviewsType *)aReportviewsType;

/**
 Creates a reportviewsType item and add it to the Reportviews.
 May send notifications with the following keys and associated objects (as userInfo dictionary):
 - kCreateReportviewsTypeCompletedNotification for operation completion, along with the reportviewsType item given as parameter (for kResponseParentItem key), and the response reportviewsType item (for kResponseItem key) or parsing error (for kParsingError key) or server response error (for kServerResponseError).
 - kAuthenticationNeededNotification for request authentication challenge.
 @param aReportviewsType The specific item to create.
 */
- (void)createReportviewsType:(reportviewsType *)aReportviewsType;

/**
 Creates a reportviewType item for a reportviewsType item (using reportview navigation query).
 May send notifications with the following keys and associated objects (as userInfo dictionary):
 - kCreatereportviewTypeCompletedNotification for operation completion, along with the reportviewType item given as parameter (for kResponseParentItem key), and the response reportviewType item (for kResponseItem key) or parsing error (for kParsingError key) or server response error (for kServerResponseError).
 - kAuthenticationNeededNotification for request authentication challenge.
 @param aNewReportviewType The specific item to create.
 @param aReportviewsType The item which the created item will be associated to.
 */
- (void)createReportviewType:(reportviewType *)aNewReportviewType forReportviewsType:(reportviewsType *)aReportviewsType;

/**
 Creates a reportviewfiltersType item for a reportviewsType item (using reportviewfilters navigation query).
 May send notifications with the following keys and associated objects (as userInfo dictionary):
 - kCreatereportviewfiltersTypeCompletedNotification for operation completion, along with the reportviewfiltersType item given as parameter (for kResponseParentItem key), and the response reportviewfiltersType item (for kResponseItem key) or parsing error (for kParsingError key) or server response error (for kServerResponseError).
 - kAuthenticationNeededNotification for request authentication challenge.
 @param aNewReportviewfiltersType The specific item to create.
 @param aReportviewsType The item which the created item will be associated to.
 */
- (void)createReportviewfiltersType:(reportviewfiltersType *)aNewReportviewfiltersType forReportviewsType:(reportviewsType *)aReportviewsType;

/**
 Updates a reportviewsType item in the Reportviews.
 May send notifications with the following keys and associated objects (as userInfo dictionary):
 - kUpdateReportviewsTypeCompletedNotification for operation completion, along with the reportviewsType item given as parameter (for kResponseParentItem key), and the response reportviewsType item (for kResponseItem key) or parsing error (for kParsingError key) or server response error (for kServerResponseError).
 - kAuthenticationNeededNotification for request authentication challenge.
 @param aReportviewsType The specific item to update.
 */
- (void)updateReportviewsType:(reportviewsType *)aReportviewsType;

/**
 Deletes a specific reportviewsType item from its collection.
 May send notifications with the following keys and associated objects (as userInfo dictionary):
 - kDeleteReportviewsTypeCompletedNotification for operation completion, along with the reportviewsType item given as parameter (for kResponseParentItem key) or server response error (for kServerResponseError).
 - kAuthenticationNeededNotification for request authentication challenge.
 @param aReportviewsType The specific item to delete.
 */
- (void)deleteReportviewsType:(reportviewsType *)aReportviewsType;

#pragma mark - Reportpagelayout methods

/**
 Load the service entity-set Reportpagelayout items, parsed into reportpagelayoutType objects.
 May send notifications with the following keys and associated objects (as userInfo dictionary):
 - kLoadReportpagelayoutCompletedNotification for operation completion, along with the array of reportpagelayoutType items (for kResponseItems key) or parsing error (for kParsingError key) or server response error (for kServerResponseError).
 - kAuthenticationNeededNotification for request authentication challenge.
 */
- (void)loadReportpagelayout;

/**
 Load a specific reportpagelayoutType item, parsed into reportpagelayoutType object.
 May send notifications with the following keys and associated objects (as userInfo dictionary):
 - kLoadReportpagelayoutTypeCompletedNotification for operation completion, along with the reportpagelayoutType item given as parameter (for kResponseParentItem key), and the response reportpagelayoutType item (for kResponseItem key) or parsing error (for kParsingError key) or server response error (for kServerResponseError).
 - kAuthenticationNeededNotification for request authentication challenge.
 @param aReportpagelayoutType The specific item to load.
 */
- (void)loadReportpagelayoutType:(reportpagelayoutType *)aReportpagelayoutType;
/**
 Load a specific reportpagelayoutType item, parsed into reportpagelayoutType object.
 May send notifications with the following keys and associated objects (as userInfo dictionary):
 - kLoadReportpagelayoutTypeCompletedNotification for operation completion, along with the reportpagelayoutType item given as parameter (for kResponseParentItem key), and the response reportpagelayoutType item (for kResponseItem key) or parsing error (for kParsingError key) or server response error (for kServerResponseError).
 - kAuthenticationNeededNotification for request authentication challenge.
 @param aReportpagelayoutType The specific item to load.
 @param expand Should load the specific item with all its related items (using $expand query parameter)
 */
- (void)loadReportpagelayoutType:(reportpagelayoutType *)aReportpagelayoutType expand:(BOOL)expand;

/**
 Load the reportview navigation items for a specific reportpagelayoutType item, parsed into reportviewType objects.
 May send notifications with the following keys and associated objects (as userInfo dictionary):
 - kLoadReportviewForReportpagelayoutTypeCompletedNotification for operation completion, along with the reportpagelayoutType item given as parameter (for kResponseParentItem key), and the array of the reportviewType items (for kResponseItems key) or parsing error (for kParsingError key) or server response error (for kServerResponseError).
 - kAuthenticationNeededNotification for request authentication challenge.
 @param aReportpagelayoutType The specific item to load its reportview navigation items.
 */
- (void)loadReportviewForReportpagelayoutType:(reportpagelayoutType *)aReportpagelayoutType;

/**
 Creates a reportpagelayoutType item and add it to the Reportpagelayout.
 May send notifications with the following keys and associated objects (as userInfo dictionary):
 - kCreateReportpagelayoutTypeCompletedNotification for operation completion, along with the reportpagelayoutType item given as parameter (for kResponseParentItem key), and the response reportpagelayoutType item (for kResponseItem key) or parsing error (for kParsingError key) or server response error (for kServerResponseError).
 - kAuthenticationNeededNotification for request authentication challenge.
 @param aReportpagelayoutType The specific item to create.
 */
- (void)createReportpagelayoutType:(reportpagelayoutType *)aReportpagelayoutType;

/**
 Creates a reportviewType item for a reportpagelayoutType item (using reportview navigation query).
 May send notifications with the following keys and associated objects (as userInfo dictionary):
 - kCreatereportviewTypeCompletedNotification for operation completion, along with the reportviewType item given as parameter (for kResponseParentItem key), and the response reportviewType item (for kResponseItem key) or parsing error (for kParsingError key) or server response error (for kServerResponseError).
 - kAuthenticationNeededNotification for request authentication challenge.
 @param aNewReportviewType The specific item to create.
 @param aReportpagelayoutType The item which the created item will be associated to.
 */
- (void)createReportviewType:(reportviewType *)aNewReportviewType forReportpagelayoutType:(reportpagelayoutType *)aReportpagelayoutType;

/**
 Updates a reportpagelayoutType item in the Reportpagelayout.
 May send notifications with the following keys and associated objects (as userInfo dictionary):
 - kUpdateReportpagelayoutTypeCompletedNotification for operation completion, along with the reportpagelayoutType item given as parameter (for kResponseParentItem key), and the response reportpagelayoutType item (for kResponseItem key) or parsing error (for kParsingError key) or server response error (for kServerResponseError).
 - kAuthenticationNeededNotification for request authentication challenge.
 @param aReportpagelayoutType The specific item to update.
 */
- (void)updateReportpagelayoutType:(reportpagelayoutType *)aReportpagelayoutType;

/**
 Deletes a specific reportpagelayoutType item from its collection.
 May send notifications with the following keys and associated objects (as userInfo dictionary):
 - kDeleteReportpagelayoutTypeCompletedNotification for operation completion, along with the reportpagelayoutType item given as parameter (for kResponseParentItem key) or server response error (for kServerResponseError).
 - kAuthenticationNeededNotification for request authentication challenge.
 @param aReportpagelayoutType The specific item to delete.
 */
- (void)deleteReportpagelayoutType:(reportpagelayoutType *)aReportpagelayoutType;

#pragma mark - Reportview methods

/**
 Load the service entity-set Reportview items, parsed into reportviewType objects.
 May send notifications with the following keys and associated objects (as userInfo dictionary):
 - kLoadReportviewCompletedNotification for operation completion, along with the array of reportviewType items (for kResponseItems key) or parsing error (for kParsingError key) or server response error (for kServerResponseError).
 - kAuthenticationNeededNotification for request authentication challenge.
 */
- (void)loadReportview;

/**
 Load a specific reportviewType item, parsed into reportviewType object.
 May send notifications with the following keys and associated objects (as userInfo dictionary):
 - kLoadReportviewTypeCompletedNotification for operation completion, along with the reportviewType item given as parameter (for kResponseParentItem key), and the response reportviewType item (for kResponseItem key) or parsing error (for kParsingError key) or server response error (for kServerResponseError).
 - kAuthenticationNeededNotification for request authentication challenge.
 @param aReportviewType The specific item to load.
 */
- (void)loadReportviewType:(reportviewType *)aReportviewType;

/**
 Creates a reportviewType item and add it to the Reportview.
 May send notifications with the following keys and associated objects (as userInfo dictionary):
 - kCreateReportviewTypeCompletedNotification for operation completion, along with the reportviewType item given as parameter (for kResponseParentItem key), and the response reportviewType item (for kResponseItem key) or parsing error (for kParsingError key) or server response error (for kServerResponseError).
 - kAuthenticationNeededNotification for request authentication challenge.
 @param aReportviewType The specific item to create.
 */
- (void)createReportviewType:(reportviewType *)aReportviewType;

/**
 Updates a reportviewType item in the Reportview.
 May send notifications with the following keys and associated objects (as userInfo dictionary):
 - kUpdateReportviewTypeCompletedNotification for operation completion, along with the reportviewType item given as parameter (for kResponseParentItem key), and the response reportviewType item (for kResponseItem key) or parsing error (for kParsingError key) or server response error (for kServerResponseError).
 - kAuthenticationNeededNotification for request authentication challenge.
 @param aReportviewType The specific item to update.
 */
- (void)updateReportviewType:(reportviewType *)aReportviewType;

/**
 Deletes a specific reportviewType item from its collection.
 May send notifications with the following keys and associated objects (as userInfo dictionary):
 - kDeleteReportviewTypeCompletedNotification for operation completion, along with the reportviewType item given as parameter (for kResponseParentItem key) or server response error (for kServerResponseError).
 - kAuthenticationNeededNotification for request authentication challenge.
 @param aReportviewType The specific item to delete.
 */
- (void)deleteReportviewType:(reportviewType *)aReportviewType;

#pragma mark - Report methods

/**
 Load the service entity-set Report items, parsed into reportType objects.
 May send notifications with the following keys and associated objects (as userInfo dictionary):
 - kLoadReportCompletedNotification for operation completion, along with the array of reportType items (for kResponseItems key) or parsing error (for kParsingError key) or server response error (for kServerResponseError).
 - kAuthenticationNeededNotification for request authentication challenge.
 */
- (void)loadReport;

/**
 Load a specific reportType item, parsed into reportType object.
 May send notifications with the following keys and associated objects (as userInfo dictionary):
 - kLoadReportTypeCompletedNotification for operation completion, along with the reportType item given as parameter (for kResponseParentItem key), and the response reportType item (for kResponseItem key) or parsing error (for kParsingError key) or server response error (for kServerResponseError).
 - kAuthenticationNeededNotification for request authentication challenge.
 @param aReportType The specific item to load.
 */
- (void)loadReportType:(reportType *)aReportType;

/**
 Creates a reportType item and add it to the Report.
 May send notifications with the following keys and associated objects (as userInfo dictionary):
 - kCreateReportTypeCompletedNotification for operation completion, along with the reportType item given as parameter (for kResponseParentItem key), and the response reportType item (for kResponseItem key) or parsing error (for kParsingError key) or server response error (for kServerResponseError).
 - kAuthenticationNeededNotification for request authentication challenge.
 @param aReportType The specific item to create.
 */
- (void)createReportType:(reportType *)aReportType;

/**
 Updates a reportType item in the Report.
 May send notifications with the following keys and associated objects (as userInfo dictionary):
 - kUpdateReportTypeCompletedNotification for operation completion, along with the reportType item given as parameter (for kResponseParentItem key), and the response reportType item (for kResponseItem key) or parsing error (for kParsingError key) or server response error (for kServerResponseError).
 - kAuthenticationNeededNotification for request authentication challenge.
 @param aReportType The specific item to update.
 */
- (void)updateReportType:(reportType *)aReportType;

/**
 Deletes a specific reportType item from its collection.
 May send notifications with the following keys and associated objects (as userInfo dictionary):
 - kDeleteReportTypeCompletedNotification for operation completion, along with the reportType item given as parameter (for kResponseParentItem key) or server response error (for kServerResponseError).
 - kAuthenticationNeededNotification for request authentication challenge.
 @param aReportType The specific item to delete.
 */
- (void)deleteReportType:(reportType *)aReportType;

#pragma mark - Reportviewfilters methods

/**
 Load the service entity-set Reportviewfilters items, parsed into reportviewfiltersType objects.
 May send notifications with the following keys and associated objects (as userInfo dictionary):
 - kLoadReportviewfiltersCompletedNotification for operation completion, along with the array of reportviewfiltersType items (for kResponseItems key) or parsing error (for kParsingError key) or server response error (for kServerResponseError).
 - kAuthenticationNeededNotification for request authentication challenge.
 */
- (void)loadReportviewfilters;

/**
 Load a specific reportviewfiltersType item, parsed into reportviewfiltersType object.
 May send notifications with the following keys and associated objects (as userInfo dictionary):
 - kLoadReportviewfiltersTypeCompletedNotification for operation completion, along with the reportviewfiltersType item given as parameter (for kResponseParentItem key), and the response reportviewfiltersType item (for kResponseItem key) or parsing error (for kParsingError key) or server response error (for kServerResponseError).
 - kAuthenticationNeededNotification for request authentication challenge.
 @param aReportviewfiltersType The specific item to load.
 */
- (void)loadReportviewfiltersType:(reportviewfiltersType *)aReportviewfiltersType;

/**
 Creates a reportviewfiltersType item and add it to the Reportviewfilters.
 May send notifications with the following keys and associated objects (as userInfo dictionary):
 - kCreateReportviewfiltersTypeCompletedNotification for operation completion, along with the reportviewfiltersType item given as parameter (for kResponseParentItem key), and the response reportviewfiltersType item (for kResponseItem key) or parsing error (for kParsingError key) or server response error (for kServerResponseError).
 - kAuthenticationNeededNotification for request authentication challenge.
 @param aReportviewfiltersType The specific item to create.
 */
- (void)createReportviewfiltersType:(reportviewfiltersType *)aReportviewfiltersType;

/**
 Updates a reportviewfiltersType item in the Reportviewfilters.
 May send notifications with the following keys and associated objects (as userInfo dictionary):
 - kUpdateReportviewfiltersTypeCompletedNotification for operation completion, along with the reportviewfiltersType item given as parameter (for kResponseParentItem key), and the response reportviewfiltersType item (for kResponseItem key) or parsing error (for kParsingError key) or server response error (for kServerResponseError).
 - kAuthenticationNeededNotification for request authentication challenge.
 @param aReportviewfiltersType The specific item to update.
 */
- (void)updateReportviewfiltersType:(reportviewfiltersType *)aReportviewfiltersType;

/**
 Deletes a specific reportviewfiltersType item from its collection.
 May send notifications with the following keys and associated objects (as userInfo dictionary):
 - kDeleteReportviewfiltersTypeCompletedNotification for operation completion, along with the reportviewfiltersType item given as parameter (for kResponseParentItem key) or server response error (for kServerResponseError).
 - kAuthenticationNeededNotification for request authentication challenge.
 @param aReportviewfiltersType The specific item to delete.
 */
- (void)deleteReportviewfiltersType:(reportviewfiltersType *)aReportviewfiltersType;

#pragma mark - Function Import methods



@end
