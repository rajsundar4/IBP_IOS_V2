/*
 Auto-Generated by SAP NetWeaver Gateway Productivity Accelerator, Version 1.0
 
 File: sapsopaRequestHandler.m
 Abstract: A singleton class responsible for sending the appropriate service requests (for retrieving and modifying service data) and parsing the responses into semantic objects, using the sapsopa service proxy and the SDMConnectivityHelper class. The sent requests also consider the service URL and the SAP client defined in the application settings. The class is also responsible for sending the appropriate notifications to the application delegate and view controllers, for handling the request success, failure and authentication challenge.  
 
*/
 
#import "sapsopaRequestHandler.h"
#import "SDMRequestBuilder.h"
#import "SDMHttpRequest.h"
#import "SDMFormDataRequest.h"
#import "Logger.h"
#import "ErrorHandling.h"
#import "ConnectivitySettings.h"
#import "UsernamePasswordAuthenticator.h"
#import "PortalAuthenticator.h"
#import "CertificateAuthenticator.h"
#import "KeychainHelper.h"
#import "SUPHelper.h"
#import "ServiceErrorXmlParser.h"
#import <Foundation/NSData.h>
#import <Foundation/NSJSONSerialization.h>

#pragma mark - Notifications

static NSString * const kRequestUserInfoCompletedNotification = @"requestCompletedNotificaiton";




NSString * const kLoadReportsCompletedNotification = @"LoadReportsCompleted";
NSString * const kLoadReportsTypeCompletedNotification = @"LoadReportsTypeCompleted";
NSString * const kLoadReportForReportsTypeCompletedNotification = @"LoadReportForReportsTypeCompleted";
NSString * const kCreateReportsTypeCompletedNotification = @"CreateReportsTypeCompleted";
NSString * const kUpdateReportsTypeCompletedNotification = @"UpdateReportsTypeCompleted";
NSString * const kDeleteReportsTypeCompletedNotification = @"DeleteReportsTypeCompleted";

NSString * const kLoadReportpagesCompletedNotification = @"LoadReportpagesCompleted";
NSString * const kLoadReportpagesTypeCompletedNotification = @"LoadReportpagesTypeCompleted";
NSString * const kLoadReportpagelayoutForReportpagesTypeCompletedNotification = @"LoadReportpagelayoutForReportpagesTypeCompleted";
NSString * const kCreateReportpagesTypeCompletedNotification = @"CreateReportpagesTypeCompleted";
NSString * const kUpdateReportpagesTypeCompletedNotification = @"UpdateReportpagesTypeCompleted";
NSString * const kDeleteReportpagesTypeCompletedNotification = @"DeleteReportpagesTypeCompleted";

NSString * const kLoadReportviewsCompletedNotification = @"LoadReportviewsCompleted";
NSString * const kLoadReportviewsTypeCompletedNotification = @"LoadReportviewsTypeCompleted";
NSString * const kLoadReportviewForReportviewsTypeCompletedNotification = @"LoadReportviewForReportviewsTypeCompleted";
NSString * const kLoadReportviewfiltersForReportviewsTypeCompletedNotification = @"LoadReportviewfiltersForReportviewsTypeCompleted";
NSString * const kCreateReportviewsTypeCompletedNotification = @"CreateReportviewsTypeCompleted";
NSString * const kUpdateReportviewsTypeCompletedNotification = @"UpdateReportviewsTypeCompleted";
NSString * const kDeleteReportviewsTypeCompletedNotification = @"DeleteReportviewsTypeCompleted";

NSString * const kLoadReportpagelayoutCompletedNotification = @"LoadReportpagelayoutCompleted";
NSString * const kLoadReportpagelayoutTypeCompletedNotification = @"LoadReportpagelayoutTypeCompleted";
NSString * const kLoadReportviewForReportpagelayoutTypeCompletedNotification = @"LoadReportviewForReportpagelayoutTypeCompleted";
NSString * const kCreateReportpagelayoutTypeCompletedNotification = @"CreateReportpagelayoutTypeCompleted";
NSString * const kUpdateReportpagelayoutTypeCompletedNotification = @"UpdateReportpagelayoutTypeCompleted";
NSString * const kDeleteReportpagelayoutTypeCompletedNotification = @"DeleteReportpagelayoutTypeCompleted";

NSString * const kLoadReportviewCompletedNotification = @"LoadReportviewCompleted";
NSString * const kLoadReportviewTypeCompletedNotification = @"LoadReportviewTypeCompleted";
NSString * const kCreateReportviewTypeCompletedNotification = @"CreateReportviewTypeCompleted";
NSString * const kUpdateReportviewTypeCompletedNotification = @"UpdateReportviewTypeCompleted";
NSString * const kDeleteReportviewTypeCompletedNotification = @"DeleteReportviewTypeCompleted";

NSString * const kLoadReportCompletedNotification = @"LoadReportCompleted";
NSString * const kLoadReportTypeCompletedNotification = @"LoadReportTypeCompleted";
NSString * const kCreateReportTypeCompletedNotification = @"CreateReportTypeCompleted";
NSString * const kUpdateReportTypeCompletedNotification = @"UpdateReportTypeCompleted";
NSString * const kDeleteReportTypeCompletedNotification = @"DeleteReportTypeCompleted";

NSString * const kLoadReportviewfiltersCompletedNotification = @"LoadReportviewfiltersCompleted";
NSString * const kLoadReportviewfiltersTypeCompletedNotification = @"LoadReportviewfiltersTypeCompleted";
NSString * const kCreateReportviewfiltersTypeCompletedNotification = @"CreateReportviewfiltersTypeCompleted";
NSString * const kUpdateReportviewfiltersTypeCompletedNotification = @"UpdateReportviewfiltersTypeCompleted";
NSString * const kDeleteReportviewfiltersTypeCompletedNotification = @"DeleteReportviewfiltersTypeCompleted";










#pragma mark -

// Service Negotiation constants (used for the service negotiation process):
NSString * const CatalogServiceUrl = @"/sap/opu/odata/iwfnd/CatalogService/";

NSString * const kOdataBaseService = @"/sap/sop/services/analytics/sapsopa.xsodata";
NSString * const kTokenService = @"/sap/hana/xs/formLogin/token.xsjs";
NSString * const kLoginForm = @"/sap/hana/xs/formLogin/login.xscfunc";
NSString * const kLogoutForm = @"/sap/hana/xs/formLogin/logout.xscfunc";
NSString * const kReportviewService = @"/sap/sop/services/analytics/sopa.xsjs";
NSString * const kUserpreferenceService = @"/sap/sop/services/userpreference.xsjs";
NSString * const kUserFavoritesService = @"/sap/sop/services/favorites.xsjs";
NSString * const kUserSessionService = @"/sap/sop/services/usersession.xsjs";

static NSString * const TechnicalServiceName = @"";
static NSInteger const TechnicalServiceVersionMin = 0;
static NSInteger const TechnicalServiceVersionMax = 0;

@implementation sapsopaRequestHandler

#pragma mark - Initialization

- (id)init
{
    self = [super init];
    if (self) { 
        service = [[sapsopaService alloc] init]; // This will be re-initiated with the updated metadata from the server (according to the user locale), in first login. See executeLoginWithUsername:andPassword:error method implementation.
		
        connectivityHelper = [[SDMConnectivityHelper alloc] init];
        connectivityHelper.delegate = self;
        
        self.useServiceNegotiation = YES; // Can be later set to 'NO' to disable service negotiation
        
        deviceLanguage = [NSLocale preferredLanguages][0]; // Language ISO 639 code (2 letters)
    }
    return self;
}

#pragma mark - Singleton

+ (sapsopaRequestHandler *)uniqueInstance
{
    static sapsopaRequestHandler *instance;
	
    @synchronized(self) {
        if (!instance) {
            instance = [[sapsopaRequestHandler alloc] init];
        }
        return instance;
    }
}

#pragma mark - User Login

- (NSData *)executeServiceDocumentRequestAndReturnError:(NSError * __autoreleasing *)error
{
    id<SDMRequesting> serviceDocumentRequest = [connectivityHelper executeBasicSyncRequestWithQuery:[[ODataQuery alloc] initWithURL:[NSURL URLWithString:self.serviceDocumentURL]]];
    
    if ((!serviceDocumentRequest.error) && (serviceDocumentRequest.responseStatusCode == 200) && serviceDocumentRequest.responseData) {
        //Authentication succeeded
        return serviceDocumentRequest.responseData;
    }
    else {
        //Authentication failed
        NSString *errorMessage = NSLocalizedString(@"Login failed.", @"Login failed.");
        if (error) {
            *error = [[NSError alloc] initWithDomain:ERROR_DOMAIN code:LOGIN_ERROR_CODE userInfo:@{NSLocalizedDescriptionKey: errorMessage}];
        }
        LOGERROR(@"Error getting service document. Login failed.");
        return nil;
    }
}

- (NSData *)executeServiceMetadataRequestAndReturnError:(NSError * __autoreleasing *)error
{
    NSString *serviceMetadataUrl = [NSString stringWithFormat:@"%@/$metadata",self.serviceDocumentURL];
    id<SDMRequesting> serviceMetadataRequest = [connectivityHelper executeBasicSyncRequestWithQuery:[[ODataQuery alloc] initWithURL:[NSURL URLWithString:serviceMetadataUrl]]];
    
    if ((!serviceMetadataRequest.error) && (serviceMetadataRequest.responseStatusCode == 200) && serviceMetadataRequest.responseData) {
        //Authentication succeeded
        return serviceMetadataRequest.responseData;
    }
    else {
        //Authentication failed
        NSString *errorMessage = NSLocalizedString(@"Login failed.", @"Login failed.");
        if (error) {
            *error = [[NSError alloc] initWithDomain:ERROR_DOMAIN code:LOGIN_ERROR_CODE userInfo:@{NSLocalizedDescriptionKey: errorMessage}];
        }
        LOGERROR(@"Error getting service metadata. Login failed");
        return nil;
    }
}

- (id <Authenticating>)activateCertificateAuthentication
{
    CertificateAuthenticator *authenticator = [[CertificateAuthenticator alloc] init];
    // The initialized certificate authenticator takes the certificate from the Keychain and exposes it using the following property
    certificate = authenticator.certificate;
    return authenticator;
}

- (id <Authenticating>)activatePortalAuthenticationWithUsername:(NSString *)aUsername andPassword:(NSString *)aPassword
{
    return [[PortalAuthenticator alloc] initWithUsername:aUsername andPassword:aPassword];
}

- (id <Authenticating>)activateUsernamePasswordAuthenticationWithUsername:(NSString *)aUsername andPassword:(NSString *)aPassword
{
    return [[UsernamePasswordAuthenticator alloc] initWithUsername:aUsername andPassword:aPassword];
}

// Initiate the appropriate authenticating implementation according to the Authentication Type configured in the ConnectivitySettings.
- (id <Authenticating>)activateAuthenticationWithUsername:(NSString *)aUsername andPassword:(NSString *)aPassword andVaultPassword:(NSString *)aVaultPassword
{
    id <Authenticating> authenticator;
    // in case in SUP mode, authentication type is defined between SUP Server and Gateway, so we need a simple UsernamePasswordAuthenticator
    if([ConnectivitySettings isSUPMode]) {
        return [[UsernamePasswordAuthenticator alloc] initWithUsername:aUsername andPassword:aPassword andSUPVaultPassword:aVaultPassword];
    }
    else {
        // in this case we don't use SUP server so we need to define the correct authenticator
        if ([ConnectivitySettings authenticationType] == UsernamePasswordAuthenticationType) {
            authenticator =  [self activateUsernamePasswordAuthenticationWithUsername:aUsername andPassword:aPassword];
        }
        else if ([ConnectivitySettings authenticationType] == PortalAuthenticationType) {
           authenticator =  [self activatePortalAuthenticationWithUsername:aUsername andPassword:aPassword];
        }
        else if ([ConnectivitySettings authenticationType] == CertificateAuthenticationType) {
            authenticator = [self activateCertificateAuthentication];
        }
    }
    // Set SAP client:
    authenticator.sapClient = self.client; 
    
    return authenticator;
}

- (BOOL)isServiceDocumentURLValidAndReturnError:(NSError * __autoreleasing *)error
{
    if ([self.serviceDocumentURL length] == 0) {
        NSString *errorMessage = NSLocalizedString(@"Service URL is empty.", @"Service URL is empty.");
        if([ConnectivitySettings isSUPMode]) {
            errorMessage = NSLocalizedString(@"Application End Point URL returned from SUP server is empty.", @"Application End Point URL returned from SUP server is empty."); 
        }
        if (error) {
            *error = [[NSError alloc] initWithDomain:ERROR_DOMAIN code:SERVICE_URL_EMPTY_ERROR_CODE userInfo:@{NSLocalizedDescriptionKey: errorMessage}];
        }
        LOGERROR(errorMessage);
        return NO;
    }
    return YES;
}

- (BOOL)setURLAndClientWithSUPApplicationEndPointAndReturnError:(NSError * __autoreleasing *)error
{
    NSString *endPointURL = nil;
    @try {
        endPointURL = [SUPHelper getSUPApplicationEndPoint];
    }
    @catch (NSException *exception) {
        self.serviceDocumentURL = nil;
        self.client = nil;
        NSString *errorMessage = NSLocalizedString(@"Login failed.", @"Login failed.");
        if (error) {
            *error = [[NSError alloc] initWithDomain:ERROR_DOMAIN code:LOGIN_ERROR_CODE userInfo:@{NSLocalizedDescriptionKey: errorMessage}];
        }
        NSString *errorLogMessage = [NSString stringWithFormat:@"Error getting Application End Point URL from SUP server. Login failed. %@.",[exception reason]];
        LOGERROR(errorLogMessage);
        return NO;
    }
    
    // Extract Base URL and SAP Client from application end point URL:
    
    NSRange range = [endPointURL rangeOfString:@"?"];
    
    if (range.location != NSNotFound) {

        self.serviceDocumentURL = [endPointURL substringToIndex:range.location]; // URL without parameters
        
        // Extract SAP Client parameter:
        NSString *parameters = [endPointURL substringFromIndex:(range.location + range.length)];
        range = [parameters rangeOfString:@"sap-client="];
        NSString *clientValue = nil;
        if (range.location != NSNotFound) {
            
           clientValue = [parameters substringFromIndex:(range.location + range.length)];
            
            // Remove what's after & or / charachters (if exist) from client value
            NSRange range = [clientValue rangeOfString:@"&"];
            if (range.location == NSNotFound) {
               range = [clientValue rangeOfString:@"/"];        
            }
            if (range.location != NSNotFound) {
                clientValue = [clientValue substringToIndex:range.location];
            }
        }
        
        self.client = clientValue;
    }
    else {
        self.serviceDocumentURL = endPointURL;
        self.client = nil;
    }
    
    return YES;
}

//
//  Adde by LLC
//

- (BOOL) executeSOPLogoutAndReturnError:(__autoreleasing NSError **) aError
{
    // First get a new csrf token.
    // This is a change required by support pack on hana system.
    
    NSString *serverURL = [NSString stringWithFormat:@"%@%@", self.baseServerURL, kTokenService];
    SDMHttpRequest *sopRequest = [SDMHttpRequest requestWithURL:[NSURL URLWithString: serverURL]];
    NSLog(@"Request initialized with token URL: %@", serverURL);
    
    [sopRequest addRequestHeader:@"X-CSRF-Token" value:@"Fetch"];
    NSLog(@"Completed token request setup...now starting sync.");
    
    [sopRequest setRequestMethod:@"GET"];
    [sopRequest buildRequestHeaders];
    [sopRequest startSynchronous];
    NSLog(@"response cookies: %@", [sopRequest responseCookies]);
    NSLog(@"response string: %@", [sopRequest responseString]);
    NSLog(@"Response headers: %@", [sopRequest responseHeaders]);
    NSLog(@"Response status code: %d", [sopRequest responseStatusCode]);
    
    // Check http response code for errors
    if ([sopRequest responseStatusCode] != 200) {
        // Check to see that the error parameter was passed in
        if (aError != NULL) {
            // Insert code to populate NSError object
            NSError *returnError = [sopRequest error];
            *aError = [[NSError alloc] initWithDomain:[returnError domain] code:[returnError code] userInfo:[returnError userInfo]];
        }
        return NO;
    }
    
    NSDictionary *cookieDict = [NSHTTPCookie requestHeaderFieldsWithCookies:[sopRequest responseCookies]];
    NSLog(@" Cookie dictionary count:  %d", [cookieDict count]);
    NSLog(@"cookie dictionary: %@", cookieDict);
    
    //NSLog(@"Response data: %@", [sopRequest responseData]);
    NSDictionary *headerDict = sopRequest.responseHeaders;
    //NSString *csrfToken = [headerDict objectForKey:@"x-csrf-token"];
    //NSLog(@"CSRF Token: %@", csrfToken);
    [self setCsrfToken:[headerDict objectForKey:@"x-csrf-token"]];
    NSLog(@"CSRF Token: %@", [self csrfToken]);

    sopRequest = nil;
    
    // Now call the logout with the new csrf token.
    
    serverURL = [NSString stringWithFormat:@"%@%@", self.baseServerURL, kLogoutForm];
    NSLog(@"Logout form url: %@", serverURL);
    sopRequest = [SDMFormDataRequest requestWithURL:[NSURL URLWithString:serverURL]];
    NSLog(@"Request initialized with URL.");
    [sopRequest setRequestMethod:@"POST"];
    [sopRequest addRequestHeader:@"X-CSRF-Token" value:[self csrfToken]];
    [sopRequest buildPostBody];
    [sopRequest buildRequestHeaders];
    NSLog(@"request cookies: %@", [sopRequest requestCookies]);
    NSLog(@"request headers: %@", [sopRequest requestHeaders]);
    
    [sopRequest startSynchronous];
    NSLog(@"response cookies: %@", [sopRequest responseCookies]);
    NSLog(@"response string: %@", [sopRequest responseString]);
    NSLog(@"Response headers: %@", [sopRequest responseHeaders]);
    NSLog(@"Response status code: %d", [sopRequest responseStatusCode]);
    
    // Check http response code for errors
    // Modified to exclude 403 error due to bug in SAP server code.  Sessions are not being terminated.
    // Fixed.
    if ([sopRequest responseStatusCode] != 200) {
    //if ([sopRequest responseStatusCode] != 200  || [sopRequest responseStatusCode] != 403) {
                
        // Check to see that the error parameter was passed in
        if (aError != NULL) {
            // Insert code to populate NSError object
            NSError *returnError = [sopRequest error];
            *aError = [[NSError alloc] initWithDomain:[returnError domain] code:[returnError code] userInfo:[returnError userInfo]];
        }
        return NO;
    }
    [self setCsrfToken:nil];
    [self setXsSessionId:nil];
    
    return YES;
   
}

//
//  Added by LLC
//

- (BOOL) executeSOPLoginWithUsername:(NSString *) aUsername andPassword:(NSString *) aPassword andReturnError:(__autoreleasing NSError **) aError
{
    //  Required modifications:
    //  Use ConnectivityHelper create-sync call for POST to login form.
    //  Use ConnectivityHelper call to get CSRF token
    //  Create url from settings appending path to login script.
    
    //  First get the session ID and CSRF token
    NSLog(@"Inside executeSOPLogin function.");
    NSString *serverURL = [NSString stringWithFormat:@"%@%@", self.baseServerURL, kTokenService];
    SDMHttpRequest *sopRequest = [SDMHttpRequest requestWithURL:[NSURL URLWithString: serverURL]];
    NSLog(@"Request initialized with login URL: %@", serverURL);

    [sopRequest addRequestHeader:@"X-CSRF-Token" value:@"Fetch"];
    NSLog(@"Completed request setup...now starting sync.");
    
    //[connectivityHelper executeCreateSyncRequestWithQuery:<#(ODataQuery *)#> andBody:<#(NSString *)#> andCSRFData:<#(CSRFData *)#>]
    [sopRequest setRequestMethod:@"GET"];
    [sopRequest buildRequestHeaders];
    [sopRequest startSynchronous];
    NSLog(@"response cookies: %@", [sopRequest responseCookies]);
    NSLog(@"response string: %@", [sopRequest responseString]);
    NSLog(@"Response headers: %@", [sopRequest responseHeaders]);
    NSLog(@"Response status code: %d", [sopRequest responseStatusCode]);
    
    // Check http response code for errors
    if ([sopRequest responseStatusCode] != 200) {
        
        // Store response status code.
        if(!self.responseCode)
            [self setResponseCode:[sopRequest responseStatusCode]];
        
        // Check to see that the error parameter was passed in
        if (aError != NULL) {
            // Insert code to populate NSError object
            NSError *returnError = [sopRequest error];
            *aError = [[NSError alloc] initWithDomain:[returnError domain] code:[returnError code] userInfo:[returnError userInfo]];
        }
        return NO;
    }
    
    NSDictionary *cookieDict = [NSHTTPCookie requestHeaderFieldsWithCookies:[sopRequest responseCookies]];
    NSLog(@" Cookie dictionary count:  %d", [cookieDict count]);
    NSLog(@"cookie dictionary: %@", cookieDict);
    
    
    //NSLog(@"Response data: %@", [sopRequest responseData]);
    NSDictionary *headerDict = sopRequest.responseHeaders;
    //NSString *csrfToken = [headerDict objectForKey:@"x-csrf-token"];
    //NSLog(@"CSRF Token: %@", csrfToken);
    [self setCsrfToken:[headerDict objectForKey:@"x-csrf-token"]];
    NSLog(@"CSRF Token: %@", [self csrfToken]);
    NSString *setCookie = [headerDict objectForKey:@"Set-Cookie"];
    NSLog(@"Set-Cookie header:  %@", setCookie);
    NSString *sessionString = @"xsSessionId=";
    NSRange range = [setCookie rangeOfString:sessionString];
    range.location = range.location + [sessionString length];
    range.length = 32;
    //NSString *xsSessionId = [setCookie substringWithRange:range];
    //NSLog(@"xs Session ID:  %@", xsSessionId);
    [self setXsSessionId:[setCookie substringWithRange:range]];
    NSLog(@"xs Session ID:  %@", [self xsSessionId]);
    
    NSArray *cookieArray = sopRequest.responseCookies;
    NSLog(@"Response cookieArray item count:  %d", [cookieArray count]);
    for (int i=0; i<[cookieArray count];i++)
        NSLog(@"Cookie array object %i: %@", i, [cookieArray objectAtIndex:i]);
    
    // Use login form to authenticate user.
    serverURL = [NSString stringWithFormat:@"%@%@", self.baseServerURL, kLoginForm];
    NSLog(@"Login form url: %@", serverURL);
    SDMFormDataRequest *sopRequest2 = [SDMFormDataRequest requestWithURL:[NSURL URLWithString:serverURL]];
    NSLog(@"Request initialized with URL.");
    [sopRequest2 setRequestMethod:@"POST"];
    [sopRequest2 addRequestHeader:@"X-CSRF-Token" value:[self csrfToken]];
    //[sopRequest2 addRequestHeader:@"X-CSRF-Token" value:csrfToken];
    [sopRequest2 addPostValue:aUsername forKey:@"xs-username"];
    [sopRequest2 addPostValue:aPassword forKey:@"xs-password"];
    [sopRequest2 buildPostBody];
    [sopRequest2 buildRequestHeaders];
    [sopRequest2 startSynchronous];
    NSLog(@"response cookies: %@", [sopRequest2 responseCookies]);
    NSLog(@"response string: %@", [sopRequest2 responseString]);
    NSLog(@"Response headers: %@", [sopRequest2 responseHeaders]);
    NSLog(@"Response status code: %d", [sopRequest2 responseStatusCode]);
    
    
    // Check http response code for errors
    // additional error checks to add:
    // -checks for session ID and CSRF token!
    if ([sopRequest2 responseStatusCode] != 200) {
        
        // Store response status code.
        if(!self.responseCode)
            [self setResponseCode:[sopRequest responseStatusCode]];
        
        // Check to see that the error parameter was passed in
        if (aError != NULL) {
            // Insert code to populate NSError object
            NSError *returnError = [sopRequest2 error];
            *aError = [[NSError alloc] initWithDomain:[returnError domain] code:[returnError code] userInfo:[returnError userInfo]];
        }
        return NO;
    }
    
    return YES;
}

//
//  Added by LLC
//
/*!
 @function loadReportJsonSyncWithReportview:andReturnError
 @abstract -
 @discussion Retrieves Json dataset from S&OP system
 @param  NSString* Reportview (chart) ID, NSError aError
 @result NSDictionary data.
 */

- (NSDictionary *) loadReportJsonSyncWithReportview:(NSString *) aReportview andReturnError:(__autoreleasing NSError **) aError
{
    //NSLog(@"Inside loadReportJsonSync function.");
    NSError *jsonError = [[NSError alloc] init];
    NSDictionary *buffer = [NSDictionary dictionaryWithObjectsAndKeys:@"getReportViewData", @"ACTION", aReportview, @"reportview", nil];
    NSData* jsonData = [NSJSONSerialization dataWithJSONObject:buffer options:NSJSONWritingPrettyPrinted error:&jsonError ];
    
    if (!jsonData) {
        // Check to see that the error parameter was passed in
        //if (aError != NULL) {
        if (aError != NULL) {
            // Insert code to populate NSError object
            *aError = [[NSError alloc] initWithDomain:[jsonError domain] code:[jsonError code] userInfo:[jsonError userInfo]];
        }
        return nil;
    }
    
    NSString *serverURL = [NSString stringWithFormat:@"%@%@", self.baseServerURL, kReportviewService];
    SDMHttpRequest *sopRequest = [SDMHttpRequest requestWithURL:[NSURL URLWithString: serverURL]];
    [sopRequest setRequestMethod:@"POST"];
    [sopRequest appendPostData:jsonData];
    [sopRequest buildPostBody];
    [sopRequest buildRequestHeaders];
    [sopRequest startSynchronous];
    
    //NSLog(@"response cookies: %@", [sopRequest responseCookies]);
    //NSLog(@"response string: %@", [sopRequest responseString]);
    //NSLog(@"Response headers: %@", [sopRequest responseHeaders]);
    //NSLog(@"Response status code: %d", [sopRequest responseStatusCode]);
    //NSLog(@"Response status message: %@", [sopRequest responseStatusMessage]);
    //NSLog(@"Response data: %@", [sopRequest responseData]);
    
    // Check http response code for errors
    // Note:  Can receive 200 status but still receive no data!
    
    if ([sopRequest responseStatusCode] != 200) {
        // Check to see that the error parameter was passed in
        if (aError != NULL) {
            // Insert code to populate NSError object
            NSError *returnError = [sopRequest error];
            *aError = [[NSError alloc] initWithDomain:[returnError domain] code:[returnError code] userInfo:[returnError userInfo]];
            //*aError = [[NSError alloc] initWithDomain:@"JSONCallError" code:[sopRequest responseStatusCode] userInfo:[sopRequest responseStatusMessage]];
        }
        return nil;
    }
    
    NSData *responseData = [NSData dataWithData:[sopRequest responseData]];
    NSDictionary *data = [NSJSONSerialization JSONObjectWithData: responseData options:NSJSONReadingMutableContainers error:&jsonError];
    
    //if (!data) {
    if ([jsonError code]) {
        if (aError != NULL) {
            // Insert code to populate NSError object
            *aError = [[NSError alloc] initWithDomain:[jsonError domain] code:[jsonError code] userInfo:[jsonError userInfo]];
        }
    }
    
    if ([data count] == 0) {
        // Check to see that the error parameter was passed in
        if (aError != NULL) {
            // Insert code to populate NSError object
            NSDictionary *errorDict = [[NSDictionary alloc] initWithObjectsAndKeys:@"No data returned from json call.", @"jsonError", nil];
            *aError = [[NSError alloc] initWithDomain:@"loadReportJsonSyncWithReportview" code:100 userInfo:errorDict];
        }
    }
    
    DLog(@"In method-JSON data: %@", data);
    
    return data;
}

//
//  Added by LLC
//

- (BOOL) getUserSession:(NSString *) aUsername andReturnError:(__autoreleasing NSError **) aError
{
    NSError *jsonError = [[NSError alloc] init];
    NSString *serverURL = [NSString stringWithFormat:@"%@%@?api=userName", self.baseServerURL, kUserSessionService];
    NSLog(@"url: %@", serverURL);
    
    SDMHttpRequest *sopRequest = [SDMHttpRequest requestWithURL:[NSURL URLWithString: serverURL]];
    [sopRequest setRequestMethod:@"GET"];
    NSLog(@"request headers:  %@", [sopRequest requestHeaders]);
    NSLog(@"cookie headers:  %@", [sopRequest requestCookies]);
    [sopRequest buildRequestHeaders];
    NSLog(@"request headers:  %@", [sopRequest requestHeaders]);
    NSLog(@"cookie headers:  %@", [sopRequest requestCookies]);
    [sopRequest startSynchronous];
    
    if ([sopRequest responseStatusCode] != 200) {
        // Check to see that the error parameter was passed in
        if (aError != NULL) {
            // Insert code to populate NSError object
            NSError *returnError = [sopRequest error];
            *aError = [[NSError alloc] initWithDomain:[returnError domain] code:[returnError code] userInfo:[returnError userInfo]];
        }
        return NO;
    }
    
    NSLog(@"response cookies: %@", [sopRequest responseCookies]);
    NSLog(@"response string: %@", [sopRequest responseString]);
    NSLog(@"Response headers: %@", [sopRequest responseHeaders]);
    NSLog(@"Response data: %@", [sopRequest responseData]);
    
    NSData *responseData = [NSData dataWithData:[sopRequest responseData]];
    NSDictionary *data = [NSJSONSerialization JSONObjectWithData: responseData options:NSJSONReadingMutableContainers error:&jsonError];
    
    NSString *ucUsername = [aUsername uppercaseString];
    if ([ucUsername isEqualToString:[data valueForKey:@"userName"]])
        return YES;
    else
        return NO;
}

//
//  Added by LLC
//

- (NSString *) getUserPlanningAreaWithUsername:(NSString *) aUsername andReturnError:(__autoreleasing NSError **) aError
{
    NSError* jsonError = [[NSError alloc] init];
    
    NSString *serverURL = [NSString stringWithFormat:@"%@%@?userid=%@&api=planArea", self.baseServerURL, kUserpreferenceService, aUsername];
    NSLog(@"url: %@", serverURL);
    

    SDMHttpRequest *sopRequest = [SDMHttpRequest requestWithURL:[NSURL URLWithString: serverURL]];
    [sopRequest setRequestMethod:@"GET"];
    [sopRequest buildRequestHeaders];
    [sopRequest startSynchronous];
    
    if ([sopRequest responseStatusCode] != 200) {
        // Check to see that the error parameter was passed in
        if (aError != NULL) {
            // Insert code to populate NSError object
            NSError *returnError = [sopRequest error];
            *aError = [[NSError alloc] initWithDomain:[returnError domain] code:[returnError code] userInfo:[returnError userInfo]];
        }
        return nil;
    }
    
    NSLog(@"response cookies: %@", [sopRequest responseCookies]);
    NSLog(@"response string: %@", [sopRequest responseString]);
    NSLog(@"Response headers: %@", [sopRequest responseHeaders]);
    NSLog(@"Response data: %@", [sopRequest responseData]);
    
    NSData *responseData = [NSData dataWithData:[sopRequest responseData]];
    NSDictionary *data = [NSJSONSerialization JSONObjectWithData: responseData options:NSJSONReadingMutableContainers error:&jsonError];
    
    if (!data) {
        // Check to see that the error parameter was passed in
        if (aError != NULL) {
            // Insert code to populate NSError object
            *aError = [[NSError alloc] initWithDomain:[jsonError domain] code:[jsonError code] userInfo:[jsonError userInfo]];
        }
        return nil;
    }
    //NSLog(@"In method-JSON data: %@", data);
    
    return [data valueForKey:@"PLAN_AREA"];

}

//
//  Added by LLC
//

- (NSDictionary *) getUserFavoritesWithUsername:(NSString *) aUsername andPlanArea:(NSString *) aPlanArea andReturnError:(__autoreleasing NSError **) aError
{
    NSError *jsonError = [[NSError alloc] init];
    
    NSDictionary *buffer = [NSDictionary dictionaryWithObjectsAndKeys:@"getFavorites", @"ACTION", aUsername, @"USERID", aPlanArea, @"PLANAREA",nil];
    NSData* jsonData = [NSJSONSerialization dataWithJSONObject:buffer options:NSJSONWritingPrettyPrinted error:&jsonError ];
    
    if (!jsonData) {
        // Check to see that the error parameter was passed in
        if (aError != NULL) {
            // Insert code to populate NSError object
            *aError = [[NSError alloc] initWithDomain:[jsonError domain] code:[jsonError code] userInfo:[jsonError userInfo]];
        }
        return nil;
    }
    NSString *serverURL = [NSString stringWithFormat:@"%@%@", self.baseServerURL, kUserFavoritesService];
    NSLog(@"getFavorites URL: %@", serverURL);
    
    SDMHttpRequest *sopRequest = [SDMHttpRequest requestWithURL:[NSURL URLWithString: serverURL]];
    [sopRequest setRequestMethod:@"POST"];
    [sopRequest appendPostData:jsonData];
    [sopRequest buildPostBody];
    [sopRequest buildRequestHeaders];
    [sopRequest startSynchronous];

    if ([sopRequest responseStatusCode] != 200) {
        // Check to see that the error parameter was passed in
        if (aError != NULL) {
            // Insert code to populate NSError object
            NSError *returnError = [sopRequest error];
            *aError = [[NSError alloc] initWithDomain:[returnError domain] code:[returnError code] userInfo:[returnError userInfo]];
        }
        return nil;
    }
    
    NSLog(@"response cookies: %@", [sopRequest responseCookies]);
    NSLog(@"response string: %@", [sopRequest responseString]);
    NSLog(@"Response headers: %@", [sopRequest responseHeaders]);
    NSLog(@"Response data: %@", [sopRequest responseData]);
    
    NSData *responseData = [NSData dataWithData:[sopRequest responseData]];
    NSDictionary *data = [NSJSONSerialization JSONObjectWithData: responseData options:NSJSONReadingMutableContainers error:&jsonError];
    
    if (!data) {
        // Check to see that the error parameter was passed in
        if (aError != NULL) {
            // Insert code to populate NSError object
            *aError = [[NSError alloc] initWithDomain:[jsonError domain] code:[jsonError code] userInfo:[jsonError userInfo]];
        }
        return nil;
    }
    //NSLog(@"In method-JSON data: %@", data);
    
    return data;
    
}

- (BOOL)executeLoginWithUsername:(NSString *)aUsername andPassword:(NSString *)aPassword andVaultPassword:(NSString *)aVaultPassword error:(NSError *__autoreleasing *) error
{
    // In case local metadata is used to initiate the service proxy, validate the service before continue with authentication flow
    if (self.useLocalMetadata && ![self isServiceValid]) {
        NSString *errorMessage = NSLocalizedString(@"Service metadata is invalid. Please contact your administrator.", @"Service metadata is invalid. Please contact your administrator.");
        if (error) {
            *error = [[NSError alloc] initWithDomain:ERROR_DOMAIN code:SERVICE_METADATA_PARSE_ERROR_CODE userInfo:@{NSLocalizedDescriptionKey: errorMessage}];
        }
        LOGERROR(errorMessage);
        return NO;
    }
    
    // Activate required authentication type (and set SAP client):
    id <Authenticating> authenticator = [self activateAuthenticationWithUsername:aUsername andPassword:aPassword andVaultPassword:aVaultPassword];
    
    if ([ConnectivitySettings isSUPMode]) {
        // Get application end point from SUP server and use it as a base for the application requests.
        BOOL applicationEndPointReceived = [self setURLAndClientWithSUPApplicationEndPointAndReturnError:error];
        authenticator.sapClient = self.client;
        if (!applicationEndPointReceived) {
            return NO;
        }
    }
    
    // Check that the service URL property was set (from App Delegate or from SUP application end point)
    if (![self isServiceDocumentURLValidAndReturnError:error]) {
        return NO;
    }

    // In case local metadata is used, it's enought to call authenticator to validate credentials without parsing the response
    if (self.useLocalMetadata) {
        NSLog(@"%@:executeLogin...: Using local metadata", [self class]);
        // Get service document using the authenticator (negotiation is not supported in this scenario):
        NSData *serviceDocumentData = [authenticator authenticateWithODataQuery:[[ODataQuery alloc] initWithURL:[NSURL URLWithString:self.serviceDocumentURL]] error:error];
        
        if (serviceDocumentData) {
            return YES;
        }
        return NO;
    }
    // In case local metadata is not used, negotiate the best matching service version, get the service data, the service metadata, and re-initialize the service proxy object
    else {
        NSLog(@"%@:executeLogin...: Negotiating service version", [self class]);
        //Negotiate using the authenticator:
        BOOL serviceNegotiationResult = [self negotiateServiceVersionAndUpdateServiceDocumentUrlUsingAuthenticator:authenticator error:error];
        
        NSData *serviceDocumentData = nil;
        if (serviceNegotiationResult) {
            LOGNOTICE(@"Service negotiation succeeded.");
            // Get service document without authentication (rely on session cookie)
            serviceDocumentData = [self executeServiceDocumentRequestAndReturnError:error];
        }
        else {
            // Get service document using the authenticator:
            serviceDocumentData = [authenticator authenticateWithODataQuery:[[ODataQuery alloc] initWithURL:[NSURL URLWithString:self.serviceDocumentURL]] error:error];
        }
        // Get service metadata and use it to init the service proxy object:
        if (serviceDocumentData) {
            NSData *serviceMetadataData = [self executeServiceMetadataRequestAndReturnError:error];
            if (serviceMetadataData) {
                service = [[sapsopaService alloc] initWithServiceDocument:serviceDocumentData andMedatadata:serviceMetadataData];
                [service setServiceDocumentUrl:self.serviceDocumentURL];
                if ([self isServiceValid]) {
                    return YES;
                }
                else {
                    NSString *errorMessage = NSLocalizedString(@"Service metadata is invalid. Please contact your administrator.", @"Service metadata is invalid. Please contact your administrator.");
                    if (error) {
                        *error = [[NSError alloc] initWithDomain:ERROR_DOMAIN code:SERVICE_METADATA_PARSE_ERROR_CODE userInfo:@{NSLocalizedDescriptionKey: errorMessage}];
                    }
                    LOGERROR(errorMessage);
                    return NO;
                }
            }
        }
        return NO;
    }    
}

- (BOOL)executeLoginWithCertificateAndVaultPassword:(NSString *)aVaultPassword error:(NSError *__autoreleasing *)error
{
    if ([ConnectivitySettings isSUPMode]) {
        NSString *thePath = [[NSBundle mainBundle]
                             pathForResource:kCertificateFileName ofType:kCertificateFileExtension];
        if ([thePath length] > 0) {
	        CredentialsData *credentialsData = nil;
            @try {
                credentialsData = [SUPHelper getCredentialsFromCertificateFile:thePath withCertificatePassword:kCertificatePassword error:error];
            }
            @catch (NSException* e) {
                NSString *logError = [e description];
                LOGERROR(logError);
            }
	        if (!credentialsData) {
	        	NSString *errorMessage = NSLocalizedString(@"Failed to get certificate string from file", @"Failed to get certificate string from file");
	        	if (error) {
                    if(*error) {
                        NSString *logMessage = [*error localizedDescription];
                        LOGERROR(logMessage);
                    }
                    else {
                        *error = [NSError errorWithDomain:ERROR_DOMAIN code:CERTIFICATE_HANDLING_ERROR_CODE userInfo:@{NSLocalizedDescriptionKey: errorMessage}];
                        LOGERROR(errorMessage);
                    }
                }
                else {
                    LOGERROR(errorMessage);
                }
                return NO;
            }
	        return [self executeLoginWithUsername:credentialsData.username andPassword:credentialsData.password andVaultPassword:aVaultPassword error:error];
        }
        else {
        	NSString *localizedMessage = NSLocalizedString(@"Failed to extract Identity from certificate. Verify that certificate named %@.%@ exists", @"Failed to extract Identity from certificate. Verify that certificate named %@.%@ exists"); 
        	NSString *errorMessage = [NSString stringWithFormat:localizedMessage, kCertificateFileName, kCertificateFileExtension];
        	if(error) {
        		*error = [[NSError alloc] initWithDomain:ERROR_DOMAIN code:CERTIFICATE_HANDLING_ERROR_CODE userInfo:@{NSLocalizedDescriptionKey: errorMessage}]; 
        	}
        	LOGERROR(errorMessage);
        	return NO;
        }
    }
    return [self executeLoginWithUsername:nil andPassword:nil andVaultPassword:nil error:error];
}


#pragma mark - Service Negotitation Methods

- (NSData *)executeServiceNegotiationRequestUsingAuthenticator:(id <Authenticating>)authenticator AndReturnError:(NSError * __autoreleasing *)error
{
	NSData *serviceNegotiationResponse = nil;
    NSError *serviceNegotiationError = nil;
	
    ODataQuery *query = [serviceNegotiator getBestMatchingServiceQuery];
	if (query) {
		serviceNegotiationResponse = [authenticator authenticateWithODataQuery:query error:&serviceNegotiationError];
	}
	else {
		return nil;
	}
    
    if (!serviceNegotiationError) {
		return serviceNegotiationResponse;
    }
    else {
        NSString *errorMessage = NSLocalizedString(@"Service negotiation failed.", @"Service negotiation failed.");
        if (error) {
            *error = [[NSError alloc] initWithDomain:ERROR_DOMAIN code:SERVICE_NEGOTIATION_ERROR_CODE userInfo:@{NSLocalizedDescriptionKey: errorMessage}];
        }
        LOGERROR(@"Error getting best matching service. Service negotiation failed.");
        return nil;
    }
}

- (BOOL)negotiateServiceVersionAndUpdateServiceDocumentUrlUsingAuthenticator:(id <Authenticating>)authenticator error:(NSError * __autoreleasing *)error
{
	if (!self.useServiceNegotiation) {
		LOGNOTICE(@"Skipping service negotiation process.");
		return NO;
	}
		
	// Initialize service negotiation object
	serviceNegotiator = [[ServiceNegotiator alloc] initWithServiceUrl:self.serviceDocumentURL andCatalogRelativeUrl:CatalogServiceUrl];
	
	if (!serviceNegotiator) {
		LOGNOTICE(@"ServiceNegotiator was not initialized. Skipping service negotiation process.");
		return NO;
	}
	
	serviceNegotiator.technicalServiceName = TechnicalServiceName;
	serviceNegotiator.technicalServiceVersionMin = TechnicalServiceVersionMin;
	serviceNegotiator.technicalServiceVersionMax = TechnicalServiceVersionMax;
	
	NSData *serviceData = [self executeServiceNegotiationRequestUsingAuthenticator:authenticator AndReturnError:error];
	
	if (serviceData && [serviceNegotiator parseBestMatchingServiceResultWithData:serviceData]) {
		if (serviceNegotiator.bestMatchingServiceUrl && serviceNegotiator.bestMatchingServiceUrl.length > 0) {
			LOGNOTICE(@"Service negotiation process completed successfully. Updating service document URL.");
			self.serviceDocumentURL = serviceNegotiator.bestMatchingServiceUrl;
            // Make sure the service negotiation process runs only once.
            self.useServiceNegotiation = NO;
            return YES;
		}
	}
	return NO;
}

#pragma mark - Instance methods

- (BOOL)isServiceValid
{
    return (service != nil);
}

- (void)setServiceDocumentURL:(NSString *)serviceDocumentURL
{
    _serviceDocumentURL = serviceDocumentURL;
    
    if ([self.serviceDocumentURL length] > 0) {
        [service setServiceDocumentUrl:self.serviceDocumentURL];
    }
}

- (void)setSAPClient:(NSString *)client
{
    _client = client;
    connectivityHelper.sapClient = self.client;
}




#pragma mark - reports methods
#pragma mark Read

- (void)loadReportsCompleted:(id <SDMRequesting>)request
{
    NSDictionary *userInfoDict;
    NSError *error;
    NSMutableArray *items = [service getReportsWithData:request.responseData error:&error];
    if (error) {
    	userInfoDict = @{kParsingError: error};
    }
    else {
    	userInfoDict = @{kResponseItems: items};
    }
    [[NSNotificationCenter defaultCenter] postNotificationName:kLoadReportsCompletedNotification object:self userInfo:userInfoDict];
}

- (void)loadReports
{
    ODataQuery *query = service.reportsQuery;
    NSDictionary *userInfoDict = @{kRequestUserInfoCompletedNotification : kLoadReportsCompletedNotification};
    [connectivityHelper executeBasicAsyncRequestWithQuery:query andRequestDelegate:self andDidFinishSelector:@selector(loadReportsCompleted:) andUserInfo:userInfoDict];
}


- (void)loadReportsTypeCompleted:(id <SDMRequesting>)request
{
    NSMutableDictionary *userInfoDict = [NSMutableDictionary dictionaryWithDictionary:request.userInfo];
    NSError *error;
    reportsType *item = [reportsType parseExpandedReportsTypeEntryWithData:request.responseData andServiceDocument:service.sdmServiceDocument error:&error];
    if (error) {
    	userInfoDict[kParsingError] = error;
    }
    else {
    	userInfoDict[kResponseItem] = item;
    }
    [[NSNotificationCenter defaultCenter] postNotificationName:kLoadReportsTypeCompletedNotification object:self userInfo:userInfoDict];
}

- (void)loadReportsType:(reportsType *)aReportsType
{
    [self loadReportsType:aReportsType expand:NO];
}

- (void)loadReportsType:(reportsType *)aReportsType expand:(BOOL)expand
{
    ODataQuery *query = [[ODataQuery alloc] initWithURL:aReportsType.baseUrl];
    if (expand) {
        [query expand:@"report"]; 
    }
    NSDictionary *userInfoDict = @{kResponseParentItem : aReportsType , kRequestUserInfoCompletedNotification : kLoadReportsTypeCompletedNotification};
    [connectivityHelper executeBasicAsyncRequestWithQuery:query andRequestDelegate:self andDidFinishSelector:@selector(loadReportsTypeCompleted:) andUserInfo:userInfoDict];
}

- (void)loadReportForReportsTypeCompleted:(id <SDMRequesting>)request
{
    NSMutableDictionary *userInfoDict = [NSMutableDictionary dictionaryWithDictionary:request.userInfo];
    NSError *error;
    reportsType *parentReportsTypeItem = request.userInfo[kResponseParentItem];
    [parentReportsTypeItem loadReportWithData:request.responseData error:&error];
    if (error) {
    	userInfoDict[kParsingError] = error;
    }
    else {
    	userInfoDict[kResponseItems] = parentReportsTypeItem.report;
    }
    [[NSNotificationCenter defaultCenter] postNotificationName:kLoadReportForReportsTypeCompletedNotification object:self userInfo:userInfoDict];   
}

- (void)loadReportForReportsType:(reportsType *)aReportsType
{
    ODataQuery *query = aReportsType.reportQuery;
    NSDictionary *userInfoDict = @{kResponseParentItem : aReportsType , kRequestUserInfoCompletedNotification : kLoadReportForReportsTypeCompletedNotification}; 
    [connectivityHelper executeBasicAsyncRequestWithQuery:query andRequestDelegate:self andDidFinishSelector:@selector(loadReportForReportsTypeCompleted:) andUserInfo:userInfoDict];
}

#pragma mark Create

- (void)createReportsTypeCompleted:(id <SDMRequesting>)request
{
    NSMutableDictionary *userInfoDict = [NSMutableDictionary dictionaryWithDictionary:request.userInfo];
    NSData *responseData = request.responseData;
    if ([responseData length] > 0) {
        NSError *error;
        reportsType *item = [reportsType parseReportsTypeEntryWithData:responseData error:&error];
        if (error) {
        	userInfoDict[kParsingError] = error;
        }
        else{
        	userInfoDict[kResponseItem] = item;
        }
    }
    [[NSNotificationCenter defaultCenter] postNotificationName:kCreateReportsTypeCompletedNotification object:self userInfo:userInfoDict];

}

- (void)createReportsType:(reportsType *)aReportsType
{
    if (!csrfData) {
        csrfData = [connectivityHelper getCSRFDataForServiceQuery:service.serviceDocumentQuery];
    }
    NSError *error = nil;
    NSString *xml = [service getXMLForCreateRequest:aReportsType error:&error];
	if (error) {
        NSMutableDictionary *userInfoDict = [@{} mutableCopy];
        userInfoDict[kParsingError] = error;
        [[NSNotificationCenter defaultCenter] postNotificationName:kCreateReportsTypeCompletedNotification object:self userInfo:userInfoDict];
    }
    else {
        NSDictionary *userInfoDict = @{kResponseParentItem : aReportsType , kRequestUserInfoCompletedNotification : kCreateReportsTypeCompletedNotification};
    	[connectivityHelper executeCreateAsyncRequestWithQuery:service.reportsQuery andBody:xml andCSRFData:csrfData andRequestDelegate:self andDidFinishSelector:@selector(createReportsTypeCompleted:) andUserInfo:userInfoDict];
    }
}

- (void)createReportType:(reportType *)aNewReportType forReportsType:(reportsType *)aReportsType
{
	if (!csrfData) {
        csrfData = [connectivityHelper getCSRFDataForServiceQuery:service.serviceDocumentQuery];
    }
    NSError *error = nil;
    NSString *xml = [service getXMLForCreateRequest:aNewReportType error:&error];
	if (error) {
        NSMutableDictionary *userInfoDict = [@{} mutableCopy];
        userInfoDict[kParsingError] = error;
        [[NSNotificationCenter defaultCenter] postNotificationName:kCreateReportTypeCompletedNotification object:self userInfo:userInfoDict];
    }
    else {
        NSDictionary *userInfoDict = @{kResponseParentItem : aNewReportType , kRequestUserInfoCompletedNotification : kCreateReportTypeCompletedNotification};
    	[connectivityHelper executeCreateAsyncRequestWithQuery:aReportsType.reportQuery andBody:xml andCSRFData:csrfData andRequestDelegate:self andDidFinishSelector:@selector(createReportTypeCompleted:) andUserInfo:userInfoDict];
    }
}

#pragma mark Update

- (void)updateReportsTypeCompleted:(id <SDMRequesting>)request
{
    NSMutableDictionary *userInfoDict = [NSMutableDictionary dictionaryWithDictionary:request.userInfo];
    NSData *responseData = request.responseData;
    if ([responseData length] > 0) {
        NSError *error;
        reportsType *item = [reportsType parseReportsTypeEntryWithData:responseData error:&error];
        if (error) {
        	userInfoDict[kParsingError] = error;
        }
        else{
        	userInfoDict[kResponseItem] = item;
        }
    }
    [[NSNotificationCenter defaultCenter] postNotificationName:kUpdateReportsTypeCompletedNotification object:self userInfo:userInfoDict];

}

- (void)updateReportsType:(reportsType *)aReportsType
{
    if (!csrfData) {
        csrfData = [connectivityHelper getCSRFDataForServiceQuery:service.serviceDocumentQuery];
    }
    NSError *error = nil;
    NSString *xml = [service getXMLForUpdateRequest:aReportsType error:&error];
    if (error) {
        NSMutableDictionary *userInfoDict = [@{} mutableCopy];
        userInfoDict[kParsingError] = error;
        [[NSNotificationCenter defaultCenter] postNotificationName:kUpdateReportsTypeCompletedNotification object:self userInfo:userInfoDict];
    }
    else {
        ODataQuery *query = [[ODataQuery alloc] initWithURL:aReportsType.baseUrl];
    	NSDictionary *userInfoDict = @{kResponseParentItem : aReportsType , kRequestUserInfoCompletedNotification : kUpdateReportsTypeCompletedNotification};
    	[connectivityHelper executeUpdateAsyncRequestWithQuery:query andBody:xml andCSRFData:csrfData andRequestDelegate:self andDidFinishSelector:@selector(updateReportsTypeCompleted:) andUserInfo:userInfoDict andEtag:aReportsType.etag];
    }
}

#pragma mark Delete

- (void)deleteReportsTypeCompleted:(id <SDMRequesting>)request
{
    NSMutableDictionary *userInfoDict = [NSMutableDictionary dictionaryWithDictionary:request.userInfo];
    [[NSNotificationCenter defaultCenter] postNotificationName:kDeleteReportsTypeCompletedNotification object:self userInfo:userInfoDict];   
}

- (void)deleteReportsType:(reportsType *)aReportsType 
{
    if (!csrfData) {
        csrfData = [connectivityHelper getCSRFDataForServiceQuery:service.serviceDocumentQuery];
    }
    ODataQuery *query = [[ODataQuery alloc] initWithURL:aReportsType.baseUrl];
    NSDictionary *userInfoDict = @{kResponseParentItem : aReportsType , kRequestUserInfoCompletedNotification : kDeleteReportsTypeCompletedNotification};
    [connectivityHelper executeDeleteAsyncRequestWithQuery:query andCSRFData:csrfData andRequestDelegate:self andDidFinishSelector:@selector(deleteReportsTypeCompleted:) andUserInfo:userInfoDict andEtag:aReportsType.etag];
}

#pragma mark - reportpages methods
#pragma mark Read

- (void)loadReportpagesCompleted:(id <SDMRequesting>)request
{
    NSDictionary *userInfoDict;
    NSError *error;
    NSMutableArray *items = [service getReportpagesWithData:request.responseData error:&error];
    if (error) {
    	userInfoDict = @{kParsingError: error};
    }
    else {
    	userInfoDict = @{kResponseItems: items};
    }
    [[NSNotificationCenter defaultCenter] postNotificationName:kLoadReportpagesCompletedNotification object:self userInfo:userInfoDict];
}

- (void)loadReportpages
{
    ODataQuery *query = service.reportpagesQuery;
    NSDictionary *userInfoDict = @{kRequestUserInfoCompletedNotification : kLoadReportpagesCompletedNotification};
    [connectivityHelper executeBasicAsyncRequestWithQuery:query andRequestDelegate:self andDidFinishSelector:@selector(loadReportpagesCompleted:) andUserInfo:userInfoDict];
}


- (void)loadReportpagesTypeCompleted:(id <SDMRequesting>)request
{
    NSMutableDictionary *userInfoDict = [NSMutableDictionary dictionaryWithDictionary:request.userInfo];
    NSError *error;
    reportpagesType *item = [reportpagesType parseExpandedReportpagesTypeEntryWithData:request.responseData andServiceDocument:service.sdmServiceDocument error:&error];
    if (error) {
    	userInfoDict[kParsingError] = error;
    }
    else {
    	userInfoDict[kResponseItem] = item;
    }
    [[NSNotificationCenter defaultCenter] postNotificationName:kLoadReportpagesTypeCompletedNotification object:self userInfo:userInfoDict];
}

- (void)loadReportpagesType:(reportpagesType *)aReportpagesType
{
    [self loadReportpagesType:aReportpagesType expand:NO];
}

- (void)loadReportpagesType:(reportpagesType *)aReportpagesType expand:(BOOL)expand
{
    ODataQuery *query = [[ODataQuery alloc] initWithURL:aReportpagesType.baseUrl];
    if (expand) {
        [query expand:@"reportpagelayout"]; 
    }
    NSDictionary *userInfoDict = @{kResponseParentItem : aReportpagesType , kRequestUserInfoCompletedNotification : kLoadReportpagesTypeCompletedNotification};
    [connectivityHelper executeBasicAsyncRequestWithQuery:query andRequestDelegate:self andDidFinishSelector:@selector(loadReportpagesTypeCompleted:) andUserInfo:userInfoDict];
}

- (void)loadReportpagelayoutForReportpagesTypeCompleted:(id <SDMRequesting>)request
{
    NSMutableDictionary *userInfoDict = [NSMutableDictionary dictionaryWithDictionary:request.userInfo];
    NSError *error;
    reportpagesType *parentReportpagesTypeItem = request.userInfo[kResponseParentItem];
    [parentReportpagesTypeItem loadReportpagelayoutWithData:request.responseData error:&error];
    if (error) {
    	userInfoDict[kParsingError] = error;
    }
    else {
    	userInfoDict[kResponseItems] = parentReportpagesTypeItem.reportpagelayout;
    }
    [[NSNotificationCenter defaultCenter] postNotificationName:kLoadReportpagelayoutForReportpagesTypeCompletedNotification object:self userInfo:userInfoDict];   
}

// Added by LLC

- (void)loadReportpagelayoutForReportpagesTypeCompletedS:(id <SDMRequesting>)request
{
    NSDictionary *userInfoDict;
    //NSMutableDictionary *userInfoDict = [NSMutableDictionary dictionaryWithDictionary:request.userInfo];
    NSError *error;
    //reportpagesType *parentReportpagesTypeItem = request.userInfo[kResponseParentItem];
    //[parentReportpagesTypeItem loadReportpagelayoutWithData:request.responseData error:&error];
    NSMutableArray *items = [service getReportpagelayoutWithData:request.responseData error:&error];
    if (error) {
    	userInfoDict = @{kParsingError: error};
    }
    else {
    	userInfoDict= @{kResponseItems: items};
    }
    [[NSNotificationCenter defaultCenter] postNotificationName:kLoadReportpagelayoutForReportpagesTypeCompletedNotification object:self userInfo:userInfoDict];
}


//  Added by LLC
- (void)loadReportpagelayoutForReportpage:(NSString *) aReportpage
{
    NSString *odataURL = [NSString stringWithFormat:@"%@%@/reportpages('%@')/reportpagelayout", self.baseServerURL, kOdataBaseService,aReportpage];
    NSLog(@"Reportpagelayout for reportpages URL: %@", odataURL);
    ODataQuery *query = [[ODataQuery alloc] initWithURL:[NSURL URLWithString:odataURL]];
    //reportpagesType *aReportpagesType = [[reportpagesType alloc] init ];
    //NSDictionary *userInfoDict = @{kResponseParentItem : aReportpagesType , kRequestUserInfoCompletedNotification : kLoadReportpagelayoutForReportpagesTypeCompletedNotification};
    NSDictionary *userInfoDict = @{kRequestUserInfoCompletedNotification : kLoadReportpagelayoutCompletedNotification};
    [connectivityHelper executeBasicAsyncRequestWithQuery:query andRequestDelegate:self andDidFinishSelector:@selector(loadReportpagelayoutForReportpagesTypeCompletedS:) andUserInfo:userInfoDict];
}

- (void)loadReportpagelayoutForReportpagesType:(reportpagesType *)aReportpagesType
{
    ODataQuery *query = aReportpagesType.reportpagelayoutQuery;
    NSDictionary *userInfoDict = @{kResponseParentItem : aReportpagesType , kRequestUserInfoCompletedNotification : kLoadReportpagelayoutForReportpagesTypeCompletedNotification}; 
    [connectivityHelper executeBasicAsyncRequestWithQuery:query andRequestDelegate:self andDidFinishSelector:@selector(loadReportpagelayoutForReportpagesTypeCompleted:) andUserInfo:userInfoDict];
}

#pragma mark Create

- (void)createReportpagesTypeCompleted:(id <SDMRequesting>)request
{
    NSMutableDictionary *userInfoDict = [NSMutableDictionary dictionaryWithDictionary:request.userInfo];
    NSData *responseData = request.responseData;
    if ([responseData length] > 0) {
        NSError *error;
        reportpagesType *item = [reportpagesType parseReportpagesTypeEntryWithData:responseData error:&error];
        if (error) {
        	userInfoDict[kParsingError] = error;
        }
        else{
        	userInfoDict[kResponseItem] = item;
        }
    }
    [[NSNotificationCenter defaultCenter] postNotificationName:kCreateReportpagesTypeCompletedNotification object:self userInfo:userInfoDict];

}

- (void)createReportpagesType:(reportpagesType *)aReportpagesType
{
    if (!csrfData) {
        csrfData = [connectivityHelper getCSRFDataForServiceQuery:service.serviceDocumentQuery];
    }
    NSError *error = nil;
    NSString *xml = [service getXMLForCreateRequest:aReportpagesType error:&error];
	if (error) {
        NSMutableDictionary *userInfoDict = [@{} mutableCopy];
        userInfoDict[kParsingError] = error;
        [[NSNotificationCenter defaultCenter] postNotificationName:kCreateReportpagesTypeCompletedNotification object:self userInfo:userInfoDict];
    }
    else {
        NSDictionary *userInfoDict = @{kResponseParentItem : aReportpagesType , kRequestUserInfoCompletedNotification : kCreateReportpagesTypeCompletedNotification};
    	[connectivityHelper executeCreateAsyncRequestWithQuery:service.reportpagesQuery andBody:xml andCSRFData:csrfData andRequestDelegate:self andDidFinishSelector:@selector(createReportpagesTypeCompleted:) andUserInfo:userInfoDict];
    }
}

- (void)createReportpagelayoutType:(reportpagelayoutType *)aNewReportpagelayoutType forReportpagesType:(reportpagesType *)aReportpagesType
{
	if (!csrfData) {
        csrfData = [connectivityHelper getCSRFDataForServiceQuery:service.serviceDocumentQuery];
    }
    NSError *error = nil;
    NSString *xml = [service getXMLForCreateRequest:aNewReportpagelayoutType error:&error];
	if (error) {
        NSMutableDictionary *userInfoDict = [@{} mutableCopy];
        userInfoDict[kParsingError] = error;
        [[NSNotificationCenter defaultCenter] postNotificationName:kCreateReportpagelayoutTypeCompletedNotification object:self userInfo:userInfoDict];
    }
    else {
        NSDictionary *userInfoDict = @{kResponseParentItem : aNewReportpagelayoutType , kRequestUserInfoCompletedNotification : kCreateReportpagelayoutTypeCompletedNotification};
    	[connectivityHelper executeCreateAsyncRequestWithQuery:aReportpagesType.reportpagelayoutQuery andBody:xml andCSRFData:csrfData andRequestDelegate:self andDidFinishSelector:@selector(createReportpagelayoutTypeCompleted:) andUserInfo:userInfoDict];
    }
}

#pragma mark Update

- (void)updateReportpagesTypeCompleted:(id <SDMRequesting>)request
{
    NSMutableDictionary *userInfoDict = [NSMutableDictionary dictionaryWithDictionary:request.userInfo];
    NSData *responseData = request.responseData;
    if ([responseData length] > 0) {
        NSError *error;
        reportpagesType *item = [reportpagesType parseReportpagesTypeEntryWithData:responseData error:&error];
        if (error) {
        	userInfoDict[kParsingError] = error;
        }
        else{
        	userInfoDict[kResponseItem] = item;
        }
    }
    [[NSNotificationCenter defaultCenter] postNotificationName:kUpdateReportpagesTypeCompletedNotification object:self userInfo:userInfoDict];

}

- (void)updateReportpagesType:(reportpagesType *)aReportpagesType
{
    if (!csrfData) {
        csrfData = [connectivityHelper getCSRFDataForServiceQuery:service.serviceDocumentQuery];
    }
    NSError *error = nil;
    NSString *xml = [service getXMLForUpdateRequest:aReportpagesType error:&error];
    if (error) {
        NSMutableDictionary *userInfoDict = [@{} mutableCopy];
        userInfoDict[kParsingError] = error;
        [[NSNotificationCenter defaultCenter] postNotificationName:kUpdateReportpagesTypeCompletedNotification object:self userInfo:userInfoDict];
    }
    else {
        ODataQuery *query = [[ODataQuery alloc] initWithURL:aReportpagesType.baseUrl];
    	NSDictionary *userInfoDict = @{kResponseParentItem : aReportpagesType , kRequestUserInfoCompletedNotification : kUpdateReportpagesTypeCompletedNotification};
    	[connectivityHelper executeUpdateAsyncRequestWithQuery:query andBody:xml andCSRFData:csrfData andRequestDelegate:self andDidFinishSelector:@selector(updateReportpagesTypeCompleted:) andUserInfo:userInfoDict andEtag:aReportpagesType.etag];
    }
}

#pragma mark Delete

- (void)deleteReportpagesTypeCompleted:(id <SDMRequesting>)request
{
    NSMutableDictionary *userInfoDict = [NSMutableDictionary dictionaryWithDictionary:request.userInfo];
    [[NSNotificationCenter defaultCenter] postNotificationName:kDeleteReportpagesTypeCompletedNotification object:self userInfo:userInfoDict];   
}

- (void)deleteReportpagesType:(reportpagesType *)aReportpagesType 
{
    if (!csrfData) {
        csrfData = [connectivityHelper getCSRFDataForServiceQuery:service.serviceDocumentQuery];
    }
    ODataQuery *query = [[ODataQuery alloc] initWithURL:aReportpagesType.baseUrl];
    NSDictionary *userInfoDict = @{kResponseParentItem : aReportpagesType , kRequestUserInfoCompletedNotification : kDeleteReportpagesTypeCompletedNotification};
    [connectivityHelper executeDeleteAsyncRequestWithQuery:query andCSRFData:csrfData andRequestDelegate:self andDidFinishSelector:@selector(deleteReportpagesTypeCompleted:) andUserInfo:userInfoDict andEtag:aReportpagesType.etag];
}

#pragma mark - reportviews methods
#pragma mark Read

- (void)loadReportviewsCompleted:(id <SDMRequesting>)request
{
    NSDictionary *userInfoDict;
    NSError *error;
    NSMutableArray *items = [service getReportviewsWithData:request.responseData error:&error];
    if (error) {
    	userInfoDict = @{kParsingError: error};
    }
    else {
    	userInfoDict = @{kResponseItems: items};
    }
    [[NSNotificationCenter defaultCenter] postNotificationName:kLoadReportviewsCompletedNotification object:self userInfo:userInfoDict];
}

- (void)loadReportviews
{
    ODataQuery *query = service.reportviewsQuery;
    NSDictionary *userInfoDict = @{kRequestUserInfoCompletedNotification : kLoadReportviewsCompletedNotification};
    [connectivityHelper executeBasicAsyncRequestWithQuery:query andRequestDelegate:self andDidFinishSelector:@selector(loadReportviewsCompleted:) andUserInfo:userInfoDict];
}


- (void)loadReportviewsTypeCompleted:(id <SDMRequesting>)request
{
    NSMutableDictionary *userInfoDict = [NSMutableDictionary dictionaryWithDictionary:request.userInfo];
    NSError *error;
    reportviewsType *item = [reportviewsType parseExpandedReportviewsTypeEntryWithData:request.responseData andServiceDocument:service.sdmServiceDocument error:&error];
    if (error) {
    	userInfoDict[kParsingError] = error;
    }
    else {
    	userInfoDict[kResponseItem] = item;
    }
    [[NSNotificationCenter defaultCenter] postNotificationName:kLoadReportviewsTypeCompletedNotification object:self userInfo:userInfoDict];
}

- (void)loadReportviewsType:(reportviewsType *)aReportviewsType
{
    [self loadReportviewsType:aReportviewsType expand:NO];
}

- (void)loadReportviewsType:(reportviewsType *)aReportviewsType expand:(BOOL)expand
{
    ODataQuery *query = [[ODataQuery alloc] initWithURL:aReportviewsType.baseUrl];
    if (expand) {
        [query expand:@"reportview,reportviewfilters"]; 
    }
    NSDictionary *userInfoDict = @{kResponseParentItem : aReportviewsType , kRequestUserInfoCompletedNotification : kLoadReportviewsTypeCompletedNotification};
    [connectivityHelper executeBasicAsyncRequestWithQuery:query andRequestDelegate:self andDidFinishSelector:@selector(loadReportviewsTypeCompleted:) andUserInfo:userInfoDict];
}

- (void)loadReportviewForReportviewsTypeCompleted:(id <SDMRequesting>)request
{
    NSMutableDictionary *userInfoDict = [NSMutableDictionary dictionaryWithDictionary:request.userInfo];
    NSError *error;
    reportviewsType *parentReportviewsTypeItem = request.userInfo[kResponseParentItem];
    [parentReportviewsTypeItem loadReportviewWithData:request.responseData error:&error];
    if (error) {
    	userInfoDict[kParsingError] = error;
    }
    else {
    	userInfoDict[kResponseItems] = parentReportviewsTypeItem.reportview;
    }
    [[NSNotificationCenter defaultCenter] postNotificationName:kLoadReportviewForReportviewsTypeCompletedNotification object:self userInfo:userInfoDict];   
}

//
//  Added to retrieve reportview types for reportviews passed in as string.
//

- (void)loadReportviewForReportviewsTypeCompletedS:(id <SDMRequesting>)request
{
    NSDictionary *userInfoDict;
    //NSMutableDictionary *userInfoDict = [NSMutableDictionary dictionaryWithDictionary:request.userInfo];
    NSError *error;
    //reportviewsType *parentReportviewsTypeItem = request.userInfo[kResponseParentItem];
    //[parentReportviewsTypeItem loadReportviewWithData:request.responseData error:&error];
    NSMutableArray *items = [service getReportviewWithData:request.responseData error:&error];
    if (error) 
    	userInfoDict = @{kParsingError: error};
    else 
    	userInfoDict = @{kResponseItems: items};
    
    [[NSNotificationCenter defaultCenter] postNotificationName:kLoadReportviewForReportviewsTypeCompletedNotification object:self userInfo:userInfoDict];
}

- (void)loadReportviewForReportviews:(NSString *)aReportview
{
    NSString *odataURL = [NSString stringWithFormat:@"%@%@/reportviews('%@')/reportview", self.baseServerURL, kOdataBaseService,aReportview];
    NSLog(@"Reportview(s) for reportviews URL: %@", odataURL);
    ODataQuery *query = [[ODataQuery alloc] initWithURL:[NSURL URLWithString:odataURL]];
    
    //ODataQuery *query = aReportviewsType.reportviewQuery;
    //NSDictionary *userInfoDict = @{kResponseParentItem : aReportviewsType , kRequestUserInfoCompletedNotification : kLoadReportviewForReportviewsTypeCompletedNotification};
    NSDictionary *userInfoDict = @{kRequestUserInfoCompletedNotification : kLoadReportviewsCompletedNotification};
    [connectivityHelper executeBasicAsyncRequestWithQuery:query andRequestDelegate:self andDidFinishSelector:@selector(loadReportviewForReportviewsTypeCompletedS:) andUserInfo:userInfoDict];
}

- (void)loadReportviewForReportviewsType:(reportviewsType *)aReportviewsType
{
    ODataQuery *query = aReportviewsType.reportviewQuery;
    NSDictionary *userInfoDict = @{kResponseParentItem : aReportviewsType , kRequestUserInfoCompletedNotification : kLoadReportviewForReportviewsTypeCompletedNotification}; 
    [connectivityHelper executeBasicAsyncRequestWithQuery:query andRequestDelegate:self andDidFinishSelector:@selector(loadReportviewForReportviewsTypeCompletedS:) andUserInfo:userInfoDict];
}

- (void)loadReportviewfiltersForReportviewsTypeCompleted:(id <SDMRequesting>)request
{
    NSMutableDictionary *userInfoDict = [NSMutableDictionary dictionaryWithDictionary:request.userInfo];
    NSError *error;
    reportviewsType *parentReportviewsTypeItem = request.userInfo[kResponseParentItem];
    [parentReportviewsTypeItem loadReportviewfiltersWithData:request.responseData error:&error];
    if (error) {
    	userInfoDict[kParsingError] = error;
    }
    else {
    	userInfoDict[kResponseItems] = parentReportviewsTypeItem.reportviewfilters;
    }
    [[NSNotificationCenter defaultCenter] postNotificationName:kLoadReportviewfiltersForReportviewsTypeCompletedNotification object:self userInfo:userInfoDict];   
}

- (void)loadReportviewfiltersForReportviewsType:(reportviewsType *)aReportviewsType
{
    ODataQuery *query = aReportviewsType.reportviewfiltersQuery;
    NSDictionary *userInfoDict = @{kResponseParentItem : aReportviewsType , kRequestUserInfoCompletedNotification : kLoadReportviewfiltersForReportviewsTypeCompletedNotification}; 
    [connectivityHelper executeBasicAsyncRequestWithQuery:query andRequestDelegate:self andDidFinishSelector:@selector(loadReportviewfiltersForReportviewsTypeCompleted:) andUserInfo:userInfoDict];
}

#pragma mark Create

- (void)createReportviewsTypeCompleted:(id <SDMRequesting>)request
{
    NSMutableDictionary *userInfoDict = [NSMutableDictionary dictionaryWithDictionary:request.userInfo];
    NSData *responseData = request.responseData;
    if ([responseData length] > 0) {
        NSError *error;
        reportviewsType *item = [reportviewsType parseReportviewsTypeEntryWithData:responseData error:&error];
        if (error) {
        	userInfoDict[kParsingError] = error;
        }
        else{
        	userInfoDict[kResponseItem] = item;
        }
    }
    [[NSNotificationCenter defaultCenter] postNotificationName:kCreateReportviewsTypeCompletedNotification object:self userInfo:userInfoDict];

}

- (void)createReportviewsType:(reportviewsType *)aReportviewsType
{
    if (!csrfData) {
        csrfData = [connectivityHelper getCSRFDataForServiceQuery:service.serviceDocumentQuery];
    }
    NSError *error = nil;
    NSString *xml = [service getXMLForCreateRequest:aReportviewsType error:&error];
	if (error) {
        NSMutableDictionary *userInfoDict = [@{} mutableCopy];
        userInfoDict[kParsingError] = error;
        [[NSNotificationCenter defaultCenter] postNotificationName:kCreateReportviewsTypeCompletedNotification object:self userInfo:userInfoDict];
    }
    else {
        NSDictionary *userInfoDict = @{kResponseParentItem : aReportviewsType , kRequestUserInfoCompletedNotification : kCreateReportviewsTypeCompletedNotification};
    	[connectivityHelper executeCreateAsyncRequestWithQuery:service.reportviewsQuery andBody:xml andCSRFData:csrfData andRequestDelegate:self andDidFinishSelector:@selector(createReportviewsTypeCompleted:) andUserInfo:userInfoDict];
    }
}

- (void)createReportviewType:(reportviewType *)aNewReportviewType forReportviewsType:(reportviewsType *)aReportviewsType
{
	if (!csrfData) {
        csrfData = [connectivityHelper getCSRFDataForServiceQuery:service.serviceDocumentQuery];
    }
    NSError *error = nil;
    NSString *xml = [service getXMLForCreateRequest:aNewReportviewType error:&error];
	if (error) {
        NSMutableDictionary *userInfoDict = [@{} mutableCopy];
        userInfoDict[kParsingError] = error;
        [[NSNotificationCenter defaultCenter] postNotificationName:kCreateReportviewTypeCompletedNotification object:self userInfo:userInfoDict];
    }
    else {
        NSDictionary *userInfoDict = @{kResponseParentItem : aNewReportviewType , kRequestUserInfoCompletedNotification : kCreateReportviewTypeCompletedNotification};
    	[connectivityHelper executeCreateAsyncRequestWithQuery:aReportviewsType.reportviewQuery andBody:xml andCSRFData:csrfData andRequestDelegate:self andDidFinishSelector:@selector(createReportviewTypeCompleted:) andUserInfo:userInfoDict];
    }
}

- (void)createReportviewfiltersType:(reportviewfiltersType *)aNewReportviewfiltersType forReportviewsType:(reportviewsType *)aReportviewsType
{
	if (!csrfData) {
        csrfData = [connectivityHelper getCSRFDataForServiceQuery:service.serviceDocumentQuery];
    }
    NSError *error = nil;
    NSString *xml = [service getXMLForCreateRequest:aNewReportviewfiltersType error:&error];
	if (error) {
        NSMutableDictionary *userInfoDict = [@{} mutableCopy];
        userInfoDict[kParsingError] = error;
        [[NSNotificationCenter defaultCenter] postNotificationName:kCreateReportviewfiltersTypeCompletedNotification object:self userInfo:userInfoDict];
    }
    else {
        NSDictionary *userInfoDict = @{kResponseParentItem : aNewReportviewfiltersType , kRequestUserInfoCompletedNotification : kCreateReportviewfiltersTypeCompletedNotification};
    	[connectivityHelper executeCreateAsyncRequestWithQuery:aReportviewsType.reportviewfiltersQuery andBody:xml andCSRFData:csrfData andRequestDelegate:self andDidFinishSelector:@selector(createReportviewfiltersTypeCompleted:) andUserInfo:userInfoDict];
    }
}

#pragma mark Update

- (void)updateReportviewsTypeCompleted:(id <SDMRequesting>)request
{
    NSMutableDictionary *userInfoDict = [NSMutableDictionary dictionaryWithDictionary:request.userInfo];
    NSData *responseData = request.responseData;
    if ([responseData length] > 0) {
        NSError *error;
        reportviewsType *item = [reportviewsType parseReportviewsTypeEntryWithData:responseData error:&error];
        if (error) {
        	userInfoDict[kParsingError] = error;
        }
        else{
        	userInfoDict[kResponseItem] = item;
        }
    }
    [[NSNotificationCenter defaultCenter] postNotificationName:kUpdateReportviewsTypeCompletedNotification object:self userInfo:userInfoDict];

}

- (void)updateReportviewsType:(reportviewsType *)aReportviewsType
{
    if (!csrfData) {
        csrfData = [connectivityHelper getCSRFDataForServiceQuery:service.serviceDocumentQuery];
    }
    NSError *error = nil;
    NSString *xml = [service getXMLForUpdateRequest:aReportviewsType error:&error];
    if (error) {
        NSMutableDictionary *userInfoDict = [@{} mutableCopy];
        userInfoDict[kParsingError] = error;
        [[NSNotificationCenter defaultCenter] postNotificationName:kUpdateReportviewsTypeCompletedNotification object:self userInfo:userInfoDict];
    }
    else {
        ODataQuery *query = [[ODataQuery alloc] initWithURL:aReportviewsType.baseUrl];
    	NSDictionary *userInfoDict = @{kResponseParentItem : aReportviewsType , kRequestUserInfoCompletedNotification : kUpdateReportviewsTypeCompletedNotification};
    	[connectivityHelper executeUpdateAsyncRequestWithQuery:query andBody:xml andCSRFData:csrfData andRequestDelegate:self andDidFinishSelector:@selector(updateReportviewsTypeCompleted:) andUserInfo:userInfoDict andEtag:aReportviewsType.etag];
    }
}

#pragma mark Delete

- (void)deleteReportviewsTypeCompleted:(id <SDMRequesting>)request
{
    NSMutableDictionary *userInfoDict = [NSMutableDictionary dictionaryWithDictionary:request.userInfo];
    [[NSNotificationCenter defaultCenter] postNotificationName:kDeleteReportviewsTypeCompletedNotification object:self userInfo:userInfoDict];   
}

- (void)deleteReportviewsType:(reportviewsType *)aReportviewsType 
{
    if (!csrfData) {
        csrfData = [connectivityHelper getCSRFDataForServiceQuery:service.serviceDocumentQuery];
    }
    ODataQuery *query = [[ODataQuery alloc] initWithURL:aReportviewsType.baseUrl];
    NSDictionary *userInfoDict = @{kResponseParentItem : aReportviewsType , kRequestUserInfoCompletedNotification : kDeleteReportviewsTypeCompletedNotification};
    [connectivityHelper executeDeleteAsyncRequestWithQuery:query andCSRFData:csrfData andRequestDelegate:self andDidFinishSelector:@selector(deleteReportviewsTypeCompleted:) andUserInfo:userInfoDict andEtag:aReportviewsType.etag];
}

#pragma mark - reportpagelayout methods
#pragma mark Read

- (void)loadReportpagelayoutCompleted:(id <SDMRequesting>)request
{
    NSDictionary *userInfoDict;
    NSError *error;
    NSMutableArray *items = [service getReportpagelayoutWithData:request.responseData error:&error];
    if (error) {
    	userInfoDict = @{kParsingError: error};
    }
    else {
    	userInfoDict = @{kResponseItems: items};
    }
    [[NSNotificationCenter defaultCenter] postNotificationName:kLoadReportpagelayoutCompletedNotification object:self userInfo:userInfoDict];
}

- (void)loadReportpagelayout
{
    ODataQuery *query = service.reportpagelayoutQuery;
    NSDictionary *userInfoDict = @{kRequestUserInfoCompletedNotification : kLoadReportpagelayoutCompletedNotification};
    [connectivityHelper executeBasicAsyncRequestWithQuery:query andRequestDelegate:self andDidFinishSelector:@selector(loadReportpagelayoutCompleted:) andUserInfo:userInfoDict];
}


- (void)loadReportpagelayoutTypeCompleted:(id <SDMRequesting>)request
{
    NSMutableDictionary *userInfoDict = [NSMutableDictionary dictionaryWithDictionary:request.userInfo];
    NSError *error;
    reportpagelayoutType *item = [reportpagelayoutType parseExpandedReportpagelayoutTypeEntryWithData:request.responseData andServiceDocument:service.sdmServiceDocument error:&error];
    if (error) {
    	userInfoDict[kParsingError] = error;
    }
    else {
    	userInfoDict[kResponseItem] = item;
    }
    [[NSNotificationCenter defaultCenter] postNotificationName:kLoadReportpagelayoutTypeCompletedNotification object:self userInfo:userInfoDict];
}

- (void)loadReportpagelayoutType:(reportpagelayoutType *)aReportpagelayoutType
{
    [self loadReportpagelayoutType:aReportpagelayoutType expand:NO];
}

- (void)loadReportpagelayoutType:(reportpagelayoutType *)aReportpagelayoutType expand:(BOOL)expand
{
    ODataQuery *query = [[ODataQuery alloc] initWithURL:aReportpagelayoutType.baseUrl];
    if (expand) {
        [query expand:@"reportview"]; 
    }
    NSDictionary *userInfoDict = @{kResponseParentItem : aReportpagelayoutType , kRequestUserInfoCompletedNotification : kLoadReportpagelayoutTypeCompletedNotification};
    [connectivityHelper executeBasicAsyncRequestWithQuery:query andRequestDelegate:self andDidFinishSelector:@selector(loadReportpagelayoutTypeCompleted:) andUserInfo:userInfoDict];
}

- (void)loadReportviewForReportpagelayoutTypeCompleted:(id <SDMRequesting>)request
{
    NSMutableDictionary *userInfoDict = [NSMutableDictionary dictionaryWithDictionary:request.userInfo];
    NSError *error;
    reportpagelayoutType *parentReportpagelayoutTypeItem = request.userInfo[kResponseParentItem];
    [parentReportpagelayoutTypeItem loadReportviewWithData:request.responseData error:&error];
    if (error) {
    	userInfoDict[kParsingError] = error;
    }
    else {
    	userInfoDict[kResponseItems] = parentReportpagelayoutTypeItem.reportview;
    }
    [[NSNotificationCenter defaultCenter] postNotificationName:kLoadReportviewForReportpagelayoutTypeCompletedNotification object:self userInfo:userInfoDict];   
}

- (void)loadReportviewForReportpagelayoutType:(reportpagelayoutType *)aReportpagelayoutType
{
    ODataQuery *query = aReportpagelayoutType.reportviewQuery;
    NSDictionary *userInfoDict = @{kResponseParentItem : aReportpagelayoutType , kRequestUserInfoCompletedNotification : kLoadReportviewForReportpagelayoutTypeCompletedNotification}; 
    [connectivityHelper executeBasicAsyncRequestWithQuery:query andRequestDelegate:self andDidFinishSelector:@selector(loadReportviewForReportpagelayoutTypeCompleted:) andUserInfo:userInfoDict];
}

#pragma mark Create

- (void)createReportpagelayoutTypeCompleted:(id <SDMRequesting>)request
{
    NSMutableDictionary *userInfoDict = [NSMutableDictionary dictionaryWithDictionary:request.userInfo];
    NSData *responseData = request.responseData;
    if ([responseData length] > 0) {
        NSError *error;
        reportpagelayoutType *item = [reportpagelayoutType parseReportpagelayoutTypeEntryWithData:responseData error:&error];
        if (error) {
        	userInfoDict[kParsingError] = error;
        }
        else{
        	userInfoDict[kResponseItem] = item;
        }
    }
    [[NSNotificationCenter defaultCenter] postNotificationName:kCreateReportpagelayoutTypeCompletedNotification object:self userInfo:userInfoDict];

}

- (void)createReportpagelayoutType:(reportpagelayoutType *)aReportpagelayoutType
{
    if (!csrfData) {
        csrfData = [connectivityHelper getCSRFDataForServiceQuery:service.serviceDocumentQuery];
    }
    NSError *error = nil;
    NSString *xml = [service getXMLForCreateRequest:aReportpagelayoutType error:&error];
	if (error) {
        NSMutableDictionary *userInfoDict = [@{} mutableCopy];
        userInfoDict[kParsingError] = error;
        [[NSNotificationCenter defaultCenter] postNotificationName:kCreateReportpagelayoutTypeCompletedNotification object:self userInfo:userInfoDict];
    }
    else {
        NSDictionary *userInfoDict = @{kResponseParentItem : aReportpagelayoutType , kRequestUserInfoCompletedNotification : kCreateReportpagelayoutTypeCompletedNotification};
    	[connectivityHelper executeCreateAsyncRequestWithQuery:service.reportpagelayoutQuery andBody:xml andCSRFData:csrfData andRequestDelegate:self andDidFinishSelector:@selector(createReportpagelayoutTypeCompleted:) andUserInfo:userInfoDict];
    }
}

- (void)createReportviewType:(reportviewType *)aNewReportviewType forReportpagelayoutType:(reportpagelayoutType *)aReportpagelayoutType
{
	if (!csrfData) {
        csrfData = [connectivityHelper getCSRFDataForServiceQuery:service.serviceDocumentQuery];
    }
    NSError *error = nil;
    NSString *xml = [service getXMLForCreateRequest:aNewReportviewType error:&error];
	if (error) {
        NSMutableDictionary *userInfoDict = [@{} mutableCopy];
        userInfoDict[kParsingError] = error;
        [[NSNotificationCenter defaultCenter] postNotificationName:kCreateReportviewTypeCompletedNotification object:self userInfo:userInfoDict];
    }
    else {
        NSDictionary *userInfoDict = @{kResponseParentItem : aNewReportviewType , kRequestUserInfoCompletedNotification : kCreateReportviewTypeCompletedNotification};
    	[connectivityHelper executeCreateAsyncRequestWithQuery:aReportpagelayoutType.reportviewQuery andBody:xml andCSRFData:csrfData andRequestDelegate:self andDidFinishSelector:@selector(createReportviewTypeCompleted:) andUserInfo:userInfoDict];
    }
}

#pragma mark Update

- (void)updateReportpagelayoutTypeCompleted:(id <SDMRequesting>)request
{
    NSMutableDictionary *userInfoDict = [NSMutableDictionary dictionaryWithDictionary:request.userInfo];
    NSData *responseData = request.responseData;
    if ([responseData length] > 0) {
        NSError *error;
        reportpagelayoutType *item = [reportpagelayoutType parseReportpagelayoutTypeEntryWithData:responseData error:&error];
        if (error) {
        	userInfoDict[kParsingError] = error;
        }
        else{
        	userInfoDict[kResponseItem] = item;
        }
    }
    [[NSNotificationCenter defaultCenter] postNotificationName:kUpdateReportpagelayoutTypeCompletedNotification object:self userInfo:userInfoDict];

}

- (void)updateReportpagelayoutType:(reportpagelayoutType *)aReportpagelayoutType
{
    if (!csrfData) {
        csrfData = [connectivityHelper getCSRFDataForServiceQuery:service.serviceDocumentQuery];
    }
    NSError *error = nil;
    NSString *xml = [service getXMLForUpdateRequest:aReportpagelayoutType error:&error];
    if (error) {
        NSMutableDictionary *userInfoDict = [@{} mutableCopy];
        userInfoDict[kParsingError] = error;
        [[NSNotificationCenter defaultCenter] postNotificationName:kUpdateReportpagelayoutTypeCompletedNotification object:self userInfo:userInfoDict];
    }
    else {
        ODataQuery *query = [[ODataQuery alloc] initWithURL:aReportpagelayoutType.baseUrl];
    	NSDictionary *userInfoDict = @{kResponseParentItem : aReportpagelayoutType , kRequestUserInfoCompletedNotification : kUpdateReportpagelayoutTypeCompletedNotification};
    	[connectivityHelper executeUpdateAsyncRequestWithQuery:query andBody:xml andCSRFData:csrfData andRequestDelegate:self andDidFinishSelector:@selector(updateReportpagelayoutTypeCompleted:) andUserInfo:userInfoDict andEtag:aReportpagelayoutType.etag];
    }
}

#pragma mark Delete

- (void)deleteReportpagelayoutTypeCompleted:(id <SDMRequesting>)request
{
    NSMutableDictionary *userInfoDict = [NSMutableDictionary dictionaryWithDictionary:request.userInfo];
    [[NSNotificationCenter defaultCenter] postNotificationName:kDeleteReportpagelayoutTypeCompletedNotification object:self userInfo:userInfoDict];   
}

- (void)deleteReportpagelayoutType:(reportpagelayoutType *)aReportpagelayoutType 
{
    if (!csrfData) {
        csrfData = [connectivityHelper getCSRFDataForServiceQuery:service.serviceDocumentQuery];
    }
    ODataQuery *query = [[ODataQuery alloc] initWithURL:aReportpagelayoutType.baseUrl];
    NSDictionary *userInfoDict = @{kResponseParentItem : aReportpagelayoutType , kRequestUserInfoCompletedNotification : kDeleteReportpagelayoutTypeCompletedNotification};
    [connectivityHelper executeDeleteAsyncRequestWithQuery:query andCSRFData:csrfData andRequestDelegate:self andDidFinishSelector:@selector(deleteReportpagelayoutTypeCompleted:) andUserInfo:userInfoDict andEtag:aReportpagelayoutType.etag];
}

#pragma mark - reportview methods
#pragma mark Read

- (void)loadReportviewCompleted:(id <SDMRequesting>)request
{
    NSDictionary *userInfoDict;
    NSError *error;
    NSMutableArray *items = [service getReportviewWithData:request.responseData error:&error];
    if (error) {
    	userInfoDict = @{kParsingError: error};
    }
    else {
    	userInfoDict = @{kResponseItems: items};
    }
    [[NSNotificationCenter defaultCenter] postNotificationName:kLoadReportviewCompletedNotification object:self userInfo:userInfoDict];
}

- (void)loadReportview
{
    ODataQuery *query = service.reportviewQuery;
    NSDictionary *userInfoDict = @{kRequestUserInfoCompletedNotification : kLoadReportviewCompletedNotification};
    [connectivityHelper executeBasicAsyncRequestWithQuery:query andRequestDelegate:self andDidFinishSelector:@selector(loadReportviewCompleted:) andUserInfo:userInfoDict];
}


- (void)loadReportviewTypeCompleted:(id <SDMRequesting>)request
{
    NSMutableDictionary *userInfoDict = [NSMutableDictionary dictionaryWithDictionary:request.userInfo];
    NSError *error;
    reportviewType *item = [reportviewType parseReportviewTypeEntryWithData:request.responseData error:&error];
    if (error) {
    	userInfoDict[kParsingError] = error;
    }
    else {
    	userInfoDict[kResponseItem] = item;
    }
    [[NSNotificationCenter defaultCenter] postNotificationName:kLoadReportviewTypeCompletedNotification object:self userInfo:userInfoDict];
}

- (void)loadReportviewType:(reportviewType *)aReportviewType
{
    ODataQuery *query = [[ODataQuery alloc] initWithURL:aReportviewType.baseUrl];
    NSDictionary *userInfoDict = @{kResponseParentItem : aReportviewType, kRequestUserInfoCompletedNotification : kLoadReportviewTypeCompletedNotification};
    [connectivityHelper executeBasicAsyncRequestWithQuery:query andRequestDelegate:self andDidFinishSelector:@selector(loadReportviewTypeCompleted:) andUserInfo:userInfoDict];
}

#pragma mark Create

- (void)createReportviewTypeCompleted:(id <SDMRequesting>)request
{
    NSMutableDictionary *userInfoDict = [NSMutableDictionary dictionaryWithDictionary:request.userInfo];
    NSData *responseData = request.responseData;
    if ([responseData length] > 0) {
        NSError *error;
        reportviewType *item = [reportviewType parseReportviewTypeEntryWithData:responseData error:&error];
        if (error) {
        	userInfoDict[kParsingError] = error;
        }
        else{
        	userInfoDict[kResponseItem] = item;
        }
    }
    [[NSNotificationCenter defaultCenter] postNotificationName:kCreateReportviewTypeCompletedNotification object:self userInfo:userInfoDict];

}

- (void)createReportviewType:(reportviewType *)aReportviewType
{
    if (!csrfData) {
        csrfData = [connectivityHelper getCSRFDataForServiceQuery:service.serviceDocumentQuery];
    }
    NSError *error = nil;
    NSString *xml = [service getXMLForCreateRequest:aReportviewType error:&error];
	if (error) {
        NSMutableDictionary *userInfoDict = [@{} mutableCopy];
        userInfoDict[kParsingError] = error;
        [[NSNotificationCenter defaultCenter] postNotificationName:kCreateReportviewTypeCompletedNotification object:self userInfo:userInfoDict];
    }
    else {
        NSDictionary *userInfoDict = @{kResponseParentItem : aReportviewType , kRequestUserInfoCompletedNotification : kCreateReportviewTypeCompletedNotification};
    	[connectivityHelper executeCreateAsyncRequestWithQuery:service.reportviewQuery andBody:xml andCSRFData:csrfData andRequestDelegate:self andDidFinishSelector:@selector(createReportviewTypeCompleted:) andUserInfo:userInfoDict];
    }
}

#pragma mark Update

- (void)updateReportviewTypeCompleted:(id <SDMRequesting>)request
{
    NSMutableDictionary *userInfoDict = [NSMutableDictionary dictionaryWithDictionary:request.userInfo];
    NSData *responseData = request.responseData;
    if ([responseData length] > 0) {
        NSError *error;
        reportviewType *item = [reportviewType parseReportviewTypeEntryWithData:responseData error:&error];
        if (error) {
        	userInfoDict[kParsingError] = error;
        }
        else{
        	userInfoDict[kResponseItem] = item;
        }
    }
    [[NSNotificationCenter defaultCenter] postNotificationName:kUpdateReportviewTypeCompletedNotification object:self userInfo:userInfoDict];

}

- (void)updateReportviewType:(reportviewType *)aReportviewType
{
    if (!csrfData) {
        csrfData = [connectivityHelper getCSRFDataForServiceQuery:service.serviceDocumentQuery];
    }
    NSError *error = nil;
    NSString *xml = [service getXMLForUpdateRequest:aReportviewType error:&error];
    if (error) {
        NSMutableDictionary *userInfoDict = [@{} mutableCopy];
        userInfoDict[kParsingError] = error;
        [[NSNotificationCenter defaultCenter] postNotificationName:kUpdateReportviewTypeCompletedNotification object:self userInfo:userInfoDict];
    }
    else {
        ODataQuery *query = [[ODataQuery alloc] initWithURL:aReportviewType.baseUrl];
    	NSDictionary *userInfoDict = @{kResponseParentItem : aReportviewType , kRequestUserInfoCompletedNotification : kUpdateReportviewTypeCompletedNotification};
    	[connectivityHelper executeUpdateAsyncRequestWithQuery:query andBody:xml andCSRFData:csrfData andRequestDelegate:self andDidFinishSelector:@selector(updateReportviewTypeCompleted:) andUserInfo:userInfoDict andEtag:aReportviewType.etag];
    }
}

#pragma mark Delete

- (void)deleteReportviewTypeCompleted:(id <SDMRequesting>)request
{
    NSMutableDictionary *userInfoDict = [NSMutableDictionary dictionaryWithDictionary:request.userInfo];
    [[NSNotificationCenter defaultCenter] postNotificationName:kDeleteReportviewTypeCompletedNotification object:self userInfo:userInfoDict];   
}

- (void)deleteReportviewType:(reportviewType *)aReportviewType 
{
    if (!csrfData) {
        csrfData = [connectivityHelper getCSRFDataForServiceQuery:service.serviceDocumentQuery];
    }
    ODataQuery *query = [[ODataQuery alloc] initWithURL:aReportviewType.baseUrl];
    NSDictionary *userInfoDict = @{kResponseParentItem : aReportviewType , kRequestUserInfoCompletedNotification : kDeleteReportviewTypeCompletedNotification};
    [connectivityHelper executeDeleteAsyncRequestWithQuery:query andCSRFData:csrfData andRequestDelegate:self andDidFinishSelector:@selector(deleteReportviewTypeCompleted:) andUserInfo:userInfoDict andEtag:aReportviewType.etag];
}

#pragma mark - report methods
#pragma mark Read

- (void)loadReportCompleted:(id <SDMRequesting>)request
{
    NSDictionary *userInfoDict;
    NSError *error;
    NSMutableArray *items = [service getReportWithData:request.responseData error:&error];
    if (error) {
    	userInfoDict = @{kParsingError: error};
    }
    else {
    	userInfoDict = @{kResponseItems: items};
    }
    [[NSNotificationCenter defaultCenter] postNotificationName:kLoadReportCompletedNotification object:self userInfo:userInfoDict];
}

- (void)loadReport
{
    ODataQuery *query = service.reportQuery;
    NSDictionary *userInfoDict = @{kRequestUserInfoCompletedNotification : kLoadReportCompletedNotification};
    [connectivityHelper executeBasicAsyncRequestWithQuery:query andRequestDelegate:self andDidFinishSelector:@selector(loadReportCompleted:) andUserInfo:userInfoDict];
}


- (void)loadReportTypeCompleted:(id <SDMRequesting>)request
{
    NSMutableDictionary *userInfoDict = [NSMutableDictionary dictionaryWithDictionary:request.userInfo];
    NSError *error;
    reportType *item = [reportType parseReportTypeEntryWithData:request.responseData error:&error];
    if (error) {
    	userInfoDict[kParsingError] = error;
    }
    else {
    	userInfoDict[kResponseItem] = item;
    }
    [[NSNotificationCenter defaultCenter] postNotificationName:kLoadReportTypeCompletedNotification object:self userInfo:userInfoDict];
}

- (void)loadReportType:(reportType *)aReportType
{
    ODataQuery *query = [[ODataQuery alloc] initWithURL:aReportType.baseUrl];
    NSDictionary *userInfoDict = @{kResponseParentItem : aReportType, kRequestUserInfoCompletedNotification : kLoadReportTypeCompletedNotification};
    [connectivityHelper executeBasicAsyncRequestWithQuery:query andRequestDelegate:self andDidFinishSelector:@selector(loadReportTypeCompleted:) andUserInfo:userInfoDict];
}

#pragma mark Create

- (void)createReportTypeCompleted:(id <SDMRequesting>)request
{
    NSMutableDictionary *userInfoDict = [NSMutableDictionary dictionaryWithDictionary:request.userInfo];
    NSData *responseData = request.responseData;
    if ([responseData length] > 0) {
        NSError *error;
        reportType *item = [reportType parseReportTypeEntryWithData:responseData error:&error];
        if (error) {
        	userInfoDict[kParsingError] = error;
        }
        else{
        	userInfoDict[kResponseItem] = item;
        }
    }
    [[NSNotificationCenter defaultCenter] postNotificationName:kCreateReportTypeCompletedNotification object:self userInfo:userInfoDict];

}

- (void)createReportType:(reportType *)aReportType
{
    if (!csrfData) {
        csrfData = [connectivityHelper getCSRFDataForServiceQuery:service.serviceDocumentQuery];
    }
    NSError *error = nil;
    NSString *xml = [service getXMLForCreateRequest:aReportType error:&error];
	if (error) {
        NSMutableDictionary *userInfoDict = [@{} mutableCopy];
        userInfoDict[kParsingError] = error;
        [[NSNotificationCenter defaultCenter] postNotificationName:kCreateReportTypeCompletedNotification object:self userInfo:userInfoDict];
    }
    else {
        NSDictionary *userInfoDict = @{kResponseParentItem : aReportType , kRequestUserInfoCompletedNotification : kCreateReportTypeCompletedNotification};
    	[connectivityHelper executeCreateAsyncRequestWithQuery:service.reportQuery andBody:xml andCSRFData:csrfData andRequestDelegate:self andDidFinishSelector:@selector(createReportTypeCompleted:) andUserInfo:userInfoDict];
    }
}

#pragma mark Update

- (void)updateReportTypeCompleted:(id <SDMRequesting>)request
{
    NSMutableDictionary *userInfoDict = [NSMutableDictionary dictionaryWithDictionary:request.userInfo];
    NSData *responseData = request.responseData;
    if ([responseData length] > 0) {
        NSError *error;
        reportType *item = [reportType parseReportTypeEntryWithData:responseData error:&error];
        if (error) {
        	userInfoDict[kParsingError] = error;
        }
        else{
        	userInfoDict[kResponseItem] = item;
        }
    }
    [[NSNotificationCenter defaultCenter] postNotificationName:kUpdateReportTypeCompletedNotification object:self userInfo:userInfoDict];

}

- (void)updateReportType:(reportType *)aReportType
{
    if (!csrfData) {
        csrfData = [connectivityHelper getCSRFDataForServiceQuery:service.serviceDocumentQuery];
    }
    NSError *error = nil;
    NSString *xml = [service getXMLForUpdateRequest:aReportType error:&error];
    if (error) {
        NSMutableDictionary *userInfoDict = [@{} mutableCopy];
        userInfoDict[kParsingError] = error;
        [[NSNotificationCenter defaultCenter] postNotificationName:kUpdateReportTypeCompletedNotification object:self userInfo:userInfoDict];
    }
    else {
        ODataQuery *query = [[ODataQuery alloc] initWithURL:aReportType.baseUrl];
    	NSDictionary *userInfoDict = @{kResponseParentItem : aReportType , kRequestUserInfoCompletedNotification : kUpdateReportTypeCompletedNotification};
    	[connectivityHelper executeUpdateAsyncRequestWithQuery:query andBody:xml andCSRFData:csrfData andRequestDelegate:self andDidFinishSelector:@selector(updateReportTypeCompleted:) andUserInfo:userInfoDict andEtag:aReportType.etag];
    }
}

#pragma mark Delete

- (void)deleteReportTypeCompleted:(id <SDMRequesting>)request
{
    NSMutableDictionary *userInfoDict = [NSMutableDictionary dictionaryWithDictionary:request.userInfo];
    [[NSNotificationCenter defaultCenter] postNotificationName:kDeleteReportTypeCompletedNotification object:self userInfo:userInfoDict];   
}

- (void)deleteReportType:(reportType *)aReportType 
{
    if (!csrfData) {
        csrfData = [connectivityHelper getCSRFDataForServiceQuery:service.serviceDocumentQuery];
    }
    ODataQuery *query = [[ODataQuery alloc] initWithURL:aReportType.baseUrl];
    NSDictionary *userInfoDict = @{kResponseParentItem : aReportType , kRequestUserInfoCompletedNotification : kDeleteReportTypeCompletedNotification};
    [connectivityHelper executeDeleteAsyncRequestWithQuery:query andCSRFData:csrfData andRequestDelegate:self andDidFinishSelector:@selector(deleteReportTypeCompleted:) andUserInfo:userInfoDict andEtag:aReportType.etag];
}

#pragma mark - reportviewfilters methods
#pragma mark Read

- (void)loadReportviewfiltersCompleted:(id <SDMRequesting>)request
{
    NSDictionary *userInfoDict;
    NSError *error;
    NSMutableArray *items = [service getReportviewfiltersWithData:request.responseData error:&error];
    if (error) {
    	userInfoDict = @{kParsingError: error};
    }
    else {
    	userInfoDict = @{kResponseItems: items};
    }
    [[NSNotificationCenter defaultCenter] postNotificationName:kLoadReportviewfiltersCompletedNotification object:self userInfo:userInfoDict];
}

- (void)loadReportviewfilters
{
    ODataQuery *query = service.reportviewfiltersQuery;
    NSDictionary *userInfoDict = @{kRequestUserInfoCompletedNotification : kLoadReportviewfiltersCompletedNotification};
    [connectivityHelper executeBasicAsyncRequestWithQuery:query andRequestDelegate:self andDidFinishSelector:@selector(loadReportviewfiltersCompleted:) andUserInfo:userInfoDict];
}


- (void)loadReportviewfiltersTypeCompleted:(id <SDMRequesting>)request
{
    NSMutableDictionary *userInfoDict = [NSMutableDictionary dictionaryWithDictionary:request.userInfo];
    NSError *error;
    reportviewfiltersType *item = [reportviewfiltersType parseReportviewfiltersTypeEntryWithData:request.responseData error:&error];
    if (error) {
    	userInfoDict[kParsingError] = error;
    }
    else {
    	userInfoDict[kResponseItem] = item;
    }
    [[NSNotificationCenter defaultCenter] postNotificationName:kLoadReportviewfiltersTypeCompletedNotification object:self userInfo:userInfoDict];
}

- (void)loadReportviewfiltersType:(reportviewfiltersType *)aReportviewfiltersType
{
    ODataQuery *query = [[ODataQuery alloc] initWithURL:aReportviewfiltersType.baseUrl];
    NSDictionary *userInfoDict = @{kResponseParentItem : aReportviewfiltersType, kRequestUserInfoCompletedNotification : kLoadReportviewfiltersTypeCompletedNotification};
    [connectivityHelper executeBasicAsyncRequestWithQuery:query andRequestDelegate:self andDidFinishSelector:@selector(loadReportviewfiltersTypeCompleted:) andUserInfo:userInfoDict];
}

#pragma mark Create

- (void)createReportviewfiltersTypeCompleted:(id <SDMRequesting>)request
{
    NSMutableDictionary *userInfoDict = [NSMutableDictionary dictionaryWithDictionary:request.userInfo];
    NSData *responseData = request.responseData;
    if ([responseData length] > 0) {
        NSError *error;
        reportviewfiltersType *item = [reportviewfiltersType parseReportviewfiltersTypeEntryWithData:responseData error:&error];
        if (error) {
        	userInfoDict[kParsingError] = error;
        }
        else{
        	userInfoDict[kResponseItem] = item;
        }
    }
    [[NSNotificationCenter defaultCenter] postNotificationName:kCreateReportviewfiltersTypeCompletedNotification object:self userInfo:userInfoDict];

}

- (void)createReportviewfiltersType:(reportviewfiltersType *)aReportviewfiltersType
{
    if (!csrfData) {
        csrfData = [connectivityHelper getCSRFDataForServiceQuery:service.serviceDocumentQuery];
    }
    NSError *error = nil;
    NSString *xml = [service getXMLForCreateRequest:aReportviewfiltersType error:&error];
	if (error) {
        NSMutableDictionary *userInfoDict = [@{} mutableCopy];
        userInfoDict[kParsingError] = error;
        [[NSNotificationCenter defaultCenter] postNotificationName:kCreateReportviewfiltersTypeCompletedNotification object:self userInfo:userInfoDict];
    }
    else {
        NSDictionary *userInfoDict = @{kResponseParentItem : aReportviewfiltersType , kRequestUserInfoCompletedNotification : kCreateReportviewfiltersTypeCompletedNotification};
    	[connectivityHelper executeCreateAsyncRequestWithQuery:service.reportviewfiltersQuery andBody:xml andCSRFData:csrfData andRequestDelegate:self andDidFinishSelector:@selector(createReportviewfiltersTypeCompleted:) andUserInfo:userInfoDict];
    }
}

#pragma mark Update

- (void)updateReportviewfiltersTypeCompleted:(id <SDMRequesting>)request
{
    NSMutableDictionary *userInfoDict = [NSMutableDictionary dictionaryWithDictionary:request.userInfo];
    NSData *responseData = request.responseData;
    if ([responseData length] > 0) {
        NSError *error;
        reportviewfiltersType *item = [reportviewfiltersType parseReportviewfiltersTypeEntryWithData:responseData error:&error];
        if (error) {
        	userInfoDict[kParsingError] = error;
        }
        else{
        	userInfoDict[kResponseItem] = item;
        }
    }
    [[NSNotificationCenter defaultCenter] postNotificationName:kUpdateReportviewfiltersTypeCompletedNotification object:self userInfo:userInfoDict];

}

- (void)updateReportviewfiltersType:(reportviewfiltersType *)aReportviewfiltersType
{
    if (!csrfData) {
        csrfData = [connectivityHelper getCSRFDataForServiceQuery:service.serviceDocumentQuery];
    }
    NSError *error = nil;
    NSString *xml = [service getXMLForUpdateRequest:aReportviewfiltersType error:&error];
    if (error) {
        NSMutableDictionary *userInfoDict = [@{} mutableCopy];
        userInfoDict[kParsingError] = error;
        [[NSNotificationCenter defaultCenter] postNotificationName:kUpdateReportviewfiltersTypeCompletedNotification object:self userInfo:userInfoDict];
    }
    else {
        ODataQuery *query = [[ODataQuery alloc] initWithURL:aReportviewfiltersType.baseUrl];
    	NSDictionary *userInfoDict = @{kResponseParentItem : aReportviewfiltersType , kRequestUserInfoCompletedNotification : kUpdateReportviewfiltersTypeCompletedNotification};
    	[connectivityHelper executeUpdateAsyncRequestWithQuery:query andBody:xml andCSRFData:csrfData andRequestDelegate:self andDidFinishSelector:@selector(updateReportviewfiltersTypeCompleted:) andUserInfo:userInfoDict andEtag:aReportviewfiltersType.etag];
    }
}

#pragma mark Delete

- (void)deleteReportviewfiltersTypeCompleted:(id <SDMRequesting>)request
{
    NSMutableDictionary *userInfoDict = [NSMutableDictionary dictionaryWithDictionary:request.userInfo];
    [[NSNotificationCenter defaultCenter] postNotificationName:kDeleteReportviewfiltersTypeCompletedNotification object:self userInfo:userInfoDict];   
}

- (void)deleteReportviewfiltersType:(reportviewfiltersType *)aReportviewfiltersType 
{
    if (!csrfData) {
        csrfData = [connectivityHelper getCSRFDataForServiceQuery:service.serviceDocumentQuery];
    }
    ODataQuery *query = [[ODataQuery alloc] initWithURL:aReportviewfiltersType.baseUrl];
    NSDictionary *userInfoDict = @{kResponseParentItem : aReportviewfiltersType , kRequestUserInfoCompletedNotification : kDeleteReportviewfiltersTypeCompletedNotification};
    [connectivityHelper executeDeleteAsyncRequestWithQuery:query andCSRFData:csrfData andRequestDelegate:self andDidFinishSelector:@selector(deleteReportviewfiltersTypeCompleted:) andUserInfo:userInfoDict andEtag:aReportviewfiltersType.etag];
}

#pragma mark - Function Import methods

#pragma mark - SDMHttpRequestDelegate

- (void)requestFailed:(SDMHttpRequest *)request
{
    NSLog(@"Inside requestFailed function.");
    int statusCode = request.responseStatusCode;
    if (statusCode == 401) {
        [self authenticationNeededForRequest:request];
        LOGERROR(@"Request failed with authentication error - response status code 401");
    }
    else {
        NSString *errorMessage;
        NSString *logErrorMessage;
        if (statusCode == 403){
            errorMessage = [request responseString];
            NSString *csrfToken = [request responseHeaders][@"x-csrf-token"];
            if (csrfToken.length > 0 && [csrfToken isEqualToString:@"Required"]) {
                csrfData = nil;
                NSString *localizedMessage = NSLocalizedString(@"CSRF Token is invalid. Try again to get a new token", @"CSRF Token is invalid. Try again to get a new token");
                errorMessage = [NSString stringWithFormat:@"%@. %@", errorMessage, localizedMessage];
                logErrorMessage = [NSString stringWithFormat:@"Request failed due to invalid CSRF with error: %@. Response status code: %d.", errorMessage, statusCode];
            }
        }
        else {
            errorMessage = request.error ? [request.error localizedDescription] : [request responseStatusMessage];
            logErrorMessage = [NSString stringWithFormat:@"Request failed with error: %@. Response status code: %d.", errorMessage, statusCode];
            
            ServiceErrorXmlParser *serviceErrorXmlParser = [[ServiceErrorXmlParser alloc] initWithErrorData:[request responseData]];
            if ([serviceErrorXmlParser parse]) {
                ServiceError *serviceError = [serviceErrorXmlParser result];
                
                if ([serviceError.innerMessage length] > 0){
                    logErrorMessage = [logErrorMessage stringByAppendingString:[NSString stringWithFormat:@" Service error message: %@ Service error inner message: %@", serviceError.message, serviceError.innerMessage]];
                }
                else{
                    logErrorMessage = [logErrorMessage stringByAppendingString:[NSString stringWithFormat:@" Service response: %@", serviceError.message]];
                }
                
                errorMessage = serviceError.message;
            }
            else
            {
                logErrorMessage = [logErrorMessage stringByAppendingString:[NSString stringWithFormat:@" Response body: %@",[request responseString]]];
            }
        }
        LOGERROR(logErrorMessage);
        
        NSMutableDictionary *errorUserInfoDict = [@{} mutableCopy];
        errorUserInfoDict[NSLocalizedDescriptionKey] = errorMessage;
        NSError *error = [NSError errorWithDomain:ERROR_DOMAIN code:REQUEST_FAILED_ERROR_CODE userInfo:errorUserInfoDict];
        
        NSMutableDictionary *userInfoDict = [NSMutableDictionary dictionaryWithDictionary:request.userInfo];
        userInfoDict[kServerResponseError] = error;
        
        // Send error notification (handled by all the application views)
        [[NSNotificationCenter defaultCenter] postNotificationName:request.userInfo[kRequestUserInfoCompletedNotification] object:self userInfo:userInfoDict];
        
        // Add mannual notification for failed.
        [[NSNotificationCenter defaultCenter] postNotificationName:kRequestFailedKey object:self];
    }
}


- (void)authenticationNeededForRequest:(SDMHttpRequest *)request
{
    //Cancel request and send notification for displaying the login screen
    [request cancelAuthentication];
    [[NSNotificationCenter defaultCenter] postNotificationName:kAuthenticationNeededNotification object:self userInfo:nil];
}

#pragma mark - SDMConnectivityHelperDelegate

- (void)onBeforeSend:(id <SDMRequesting>)request
{
    request.shouldPresentAuthenticationDialog = YES;

    if ([ConnectivitySettings authenticationType] == CertificateAuthenticationType && ![ConnectivitySettings isSUPMode]) {
        [request setClientCertificateIdentity:certificate];
    }

    //Define the request language as the device language settings. Uncomment the following line to use the user default language as defined on the server.
    [request addRequestHeader:@"sap-language" value:deviceLanguage];    
}

@end
