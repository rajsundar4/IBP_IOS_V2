/*
 
 Auto-Generated by SAP NetWeaver Gateway Productivity Accelerator, Version 1.0
  
 File: sapsopaServiceV0.h
 Abstract: The generated proxy classes for the sapsopa Service.  
*/

#import "sapsopaServiceV0.h"
#import "BaseODataObject.h"
#import "Logger.h"
#import "SDMODataEntitySchema.h"
#import "SDMODataCollection.h"
#import "SDMODataFunctionImport.h"
#import "TypeConverter.h"

#define SAPSOPA_SERVICE_DOCUMENTV0 @"sapsopaServiceDocumentV0"
#define SAPSOPA_SERVICE_METADATAV0 @"sapsopaServiceMetadataV0"

#pragma mark - Complex Types



#pragma mark - Entity Types


#pragma mark - reportsTypeV0
@implementation reportsTypeV0

static NSMutableDictionary *reportsTypeLabels = nil;
static SDMODataEntitySchema *reportsTypeEntitySchema = nil;

- (id)init
{
    self = [super init];
    if (self) {
        m_SDMEntry = [BaseEntityType createEmptySDMODataEntryWithSchema:reportsTypeEntitySchema error:nil];
        if (!m_SDMEntry) {
            return nil;
        }        
        m_properties = nil;
        self.baseUrl = nil;
    }
    return self;
}

- (NSMutableDictionary *)getSDMEntriesForNavigationProperties
{
    NSMutableDictionary *dictionary = [@{} mutableCopy];
    if ([self.report count] > 0) {
    	dictionary[@"report"] = [self createSDMEntriesForNavigationPropertyEntries:self.report];
    }
    return dictionary;
}


- (SDMODataEntry *)buildSDMEntryFromPropertiesAndReturnError:(NSError **)error
{
    if (m_SDMEntry) {
        NSError *innerError = nil;
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.REPORTID forSDMPropertyWithName:@"REPORTID" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.REPORTNAME forSDMPropertyWithName:@"REPORTNAME" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.REPORTDESCR forSDMPropertyWithName:@"REPORTDESCR" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.ISMOBILEENABLED forSDMPropertyWithName:@"ISMOBILEENABLED" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.CREATEDBY forSDMPropertyWithName:@"CREATEDBY" error:&innerError];
    	[BaseODataObject setDateTimeValueForSDMEntry:m_SDMEntry withValue:self.CREATEDDATE forSDMPropertyWithName:@"CREATEDDATE" error:&innerError];
    	[BaseODataObject setDateTimeValueForSDMEntry:m_SDMEntry withValue:self.LASTMODIFIEDDATE forSDMPropertyWithName:@"LASTMODIFIEDDATE" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.LASTMODIFIEDBY forSDMPropertyWithName:@"LASTMODIFIEDBY" error:&innerError];
        [self addRelativeLinksToSDMEntryFromDictionary:[self getSDMEntriesForNavigationProperties]];
        if (innerError) {
            if (error) {
                *error = innerError;
            }
            return nil;
        }
	}
    return m_SDMEntry;
}

+ (void)loadEntitySchema:(SDMODataServiceDocument *)aService
{
    SDMODataCollection *collectionSchema = [aService.schema getCollectionByName:@"reports" workspaceOfCollection:nil];
    reportsTypeEntitySchema = collectionSchema.entitySchema;
}

+ (void)loadLabels:(SDMODataServiceDocument *)aService
{
		NSMutableDictionary *properties = [BaseODataObject getSchemaPropertiesFromCollection:@"reports" andService:aService];
    	if (properties) {    
	    	reportsTypeLabels = [@{} mutableCopy];
	    	for (SDMODataPropertyInfo *property in [properties allValues]) {
	        	reportsTypeLabels[property.name] = property.label;;
	    	}
	    }
	    else {
        	LOGERROR(@"Failed to load SAP labels from service metadata");
    	}
}


+ (NSString *)getLabelForProperty:(NSString *)aPropertyName
{
    return [BaseODataObject getLabelFromDictionary:reportsTypeLabels forProperty:aPropertyName];
}

- (void)loadProperties
{
    [super loadProperties];
	self.REPORTID = [self getStringValueForSDMPropertyWithName:@"REPORTID"];
	self.REPORTNAME = [self getStringValueForSDMPropertyWithName:@"REPORTNAME"];
	self.REPORTDESCR = [self getStringValueForSDMPropertyWithName:@"REPORTDESCR"];
	self.ISMOBILEENABLED = [self getStringValueForSDMPropertyWithName:@"ISMOBILEENABLED"];
	self.CREATEDBY = [self getStringValueForSDMPropertyWithName:@"CREATEDBY"];
	self.CREATEDDATE = [self getDateTimeValueForSDMPropertyWithName:@"CREATEDDATE"];
	self.LASTMODIFIEDDATE = [self getDateTimeValueForSDMPropertyWithName:@"LASTMODIFIEDDATE"];
	self.LASTMODIFIEDBY = [self getStringValueForSDMPropertyWithName:@"LASTMODIFIEDBY"];
}

- (void)loadNavigationPropertyQueries
{
    [super loadNavigationPropertyQueries];
    self.reportQuery = [self getRelatedLinkForNavigationName:@"report"];
}

- (void)loadNavigationPropertyData
{
    [super loadNavigationPropertyData];
    
    NSMutableArray *entries = nil;

    entries = [self getInlinedRelatedEntriesForNavigationName:@"report"];
    self.report = [reportTypeV0 createReportTypeEntriesForSDMEntries:entries];

}

+ (NSMutableArray *)createReportsTypeEntriesForSDMEntries:(NSMutableArray *)sdmEntries
{
    NSMutableArray *entries = [@[] mutableCopy];
    for (SDMODataEntry *entry in sdmEntries) {
        reportsTypeV0 *reportsTypeObject = [[reportsTypeV0 alloc] initWithSDMEntry:entry];
        [entries addObject:reportsTypeObject];
    }
    return entries;
}


+ (NSMutableArray *)parseReportsTypeEntriesWithData:(NSData *)aData error:(NSError **)error
{
    NSMutableArray *sdmEntries = [BaseEntityType getSDMEntriesForEntitySchema:reportsTypeEntitySchema andData:aData error:error];
    if (!sdmEntries) {
    	return nil;
    }
	return [reportsTypeV0 createReportsTypeEntriesForSDMEntries:sdmEntries];
}

+ (NSMutableArray *)parseExpandedReportsTypeEntriesWithData:(NSData *)aData andServiceDocument:(SDMODataServiceDocument *)aServiceDocument error:(NSError **)error
{
    NSMutableArray *sdmEntries = [BaseEntityType getExpandedSDMEntriesForEntitySchema:reportsTypeEntitySchema andData:aData andServiceDocument:aServiceDocument error:error];
    if (!sdmEntries) {
    	return nil;
    }
	return [reportsTypeV0 createReportsTypeEntriesForSDMEntries:sdmEntries];
}

+ (reportsTypeV0 *)parseReportsTypeEntryWithData:(NSData *)aData error:(NSError **)error
{
    NSMutableArray *reportsTypeEntries = [reportsTypeV0 parseReportsTypeEntriesWithData:aData error:error];
    if (!reportsTypeEntries) {
    	return nil;
    }
    return (reportsTypeV0 *)[reportsTypeV0 getFirstObjectFromArray:reportsTypeEntries];
}

+ (reportsTypeV0 *)parseExpandedReportsTypeEntryWithData:(NSData *)aData andServiceDocument:(SDMODataServiceDocument *)aServiceDocument error:(NSError **)error
{
	NSMutableArray *sdmEntries = [BaseEntityType getExpandedSDMEntriesForEntitySchema:reportsTypeEntitySchema andData:aData andServiceDocument:aServiceDocument error:error];
    NSMutableArray *reportsTypeEntries = [reportsTypeV0 createReportsTypeEntriesForSDMEntries:sdmEntries];
	return (reportsTypeV0 *)[reportsTypeV0 getFirstObjectFromArray:reportsTypeEntries];
}


#pragma mark Entity Navigation Property loading methods
- (BOOL)loadReportWithData:(NSData *)aData error:(NSError **)error
{
    self.report = [reportTypeV0 parseReportTypeEntriesWithData:aData error:error];
    if (!self.report) {
    	return NO;
    }
    return YES;
}


@end

#pragma mark - reportpagesTypeV0
@implementation reportpagesTypeV0

static NSMutableDictionary *reportpagesTypeLabels = nil;
static SDMODataEntitySchema *reportpagesTypeEntitySchema = nil;

- (id)init
{
    self = [super init];
    if (self) {
        m_SDMEntry = [BaseEntityType createEmptySDMODataEntryWithSchema:reportpagesTypeEntitySchema error:nil];
        if (!m_SDMEntry) {
            return nil;
        }        
        m_properties = nil;
        self.baseUrl = nil;
    }
    return self;
}

- (NSMutableDictionary *)getSDMEntriesForNavigationProperties
{
    NSMutableDictionary *dictionary = [@{} mutableCopy];
    if ([self.reportpagelayout count] > 0) {
    	dictionary[@"reportpagelayout"] = [self createSDMEntriesForNavigationPropertyEntries:self.reportpagelayout];
    }
    return dictionary;
}


- (SDMODataEntry *)buildSDMEntryFromPropertiesAndReturnError:(NSError **)error
{
    if (m_SDMEntry) {
        NSError *innerError = nil;
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.REPORTPAGEID forSDMPropertyWithName:@"REPORTPAGEID" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.REPORTPAGENAME forSDMPropertyWithName:@"REPORTPAGENAME" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.REPORTPAGEDESCR forSDMPropertyWithName:@"REPORTPAGEDESCR" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.ISOWNER forSDMPropertyWithName:@"ISOWNER" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.ISMOBILEENABLED forSDMPropertyWithName:@"ISMOBILEENABLED" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.LAYOUTID forSDMPropertyWithName:@"LAYOUTID" error:&innerError];
    	[BaseODataObject setIntValueForSDMEntry:m_SDMEntry withValue:self.NUMBEROFROWS forSDMPropertyWithName:@"NUMBEROFROWS" error:&innerError];
    	[BaseODataObject setIntValueForSDMEntry:m_SDMEntry withValue:self.NUMBEROFCOLUMNS forSDMPropertyWithName:@"NUMBEROFCOLUMNS" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.ROWHEIGHT forSDMPropertyWithName:@"ROWHEIGHT" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.COLUMNWIDTH forSDMPropertyWithName:@"COLUMNWIDTH" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.CREATEDBY forSDMPropertyWithName:@"CREATEDBY" error:&innerError];
    	[BaseODataObject setDateTimeValueForSDMEntry:m_SDMEntry withValue:self.CREATEDDATE forSDMPropertyWithName:@"CREATEDDATE" error:&innerError];
    	[BaseODataObject setDateTimeValueForSDMEntry:m_SDMEntry withValue:self.LASTMODIFIEDDATE forSDMPropertyWithName:@"LASTMODIFIEDDATE" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.LASTMODIFIEDBY forSDMPropertyWithName:@"LASTMODIFIEDBY" error:&innerError];
        [self addRelativeLinksToSDMEntryFromDictionary:[self getSDMEntriesForNavigationProperties]];
        if (innerError) {
            if (error) {
                *error = innerError;
            }
            return nil;
        }
	}
    return m_SDMEntry;
}

+ (void)loadEntitySchema:(SDMODataServiceDocument *)aService
{
    SDMODataCollection *collectionSchema = [aService.schema getCollectionByName:@"reportpages" workspaceOfCollection:nil];
    reportpagesTypeEntitySchema = collectionSchema.entitySchema;
}

+ (void)loadLabels:(SDMODataServiceDocument *)aService
{
		NSMutableDictionary *properties = [BaseODataObject getSchemaPropertiesFromCollection:@"reportpages" andService:aService];
    	if (properties) {    
	    	reportpagesTypeLabels = [@{} mutableCopy];
	    	for (SDMODataPropertyInfo *property in [properties allValues]) {
	        	reportpagesTypeLabels[property.name] = property.label;;
	    	}
	    }
	    else {
        	LOGERROR(@"Failed to load SAP labels from service metadata");
    	}
}


+ (NSString *)getLabelForProperty:(NSString *)aPropertyName
{
    return [BaseODataObject getLabelFromDictionary:reportpagesTypeLabels forProperty:aPropertyName];
}

- (void)loadProperties
{
    [super loadProperties];
	self.REPORTPAGEID = [self getStringValueForSDMPropertyWithName:@"REPORTPAGEID"];
	self.REPORTPAGENAME = [self getStringValueForSDMPropertyWithName:@"REPORTPAGENAME"];
	self.REPORTPAGEDESCR = [self getStringValueForSDMPropertyWithName:@"REPORTPAGEDESCR"];
	self.ISOWNER = [self getStringValueForSDMPropertyWithName:@"ISOWNER"];
	self.ISMOBILEENABLED = [self getStringValueForSDMPropertyWithName:@"ISMOBILEENABLED"];
	self.LAYOUTID = [self getStringValueForSDMPropertyWithName:@"LAYOUTID"];
	self.NUMBEROFROWS = [self getIntValueForSDMPropertyWithName:@"NUMBEROFROWS"];
	self.NUMBEROFCOLUMNS = [self getIntValueForSDMPropertyWithName:@"NUMBEROFCOLUMNS"];
	self.ROWHEIGHT = [self getStringValueForSDMPropertyWithName:@"ROWHEIGHT"];
	self.COLUMNWIDTH = [self getStringValueForSDMPropertyWithName:@"COLUMNWIDTH"];
	self.CREATEDBY = [self getStringValueForSDMPropertyWithName:@"CREATEDBY"];
	self.CREATEDDATE = [self getDateTimeValueForSDMPropertyWithName:@"CREATEDDATE"];
	self.LASTMODIFIEDDATE = [self getDateTimeValueForSDMPropertyWithName:@"LASTMODIFIEDDATE"];
	self.LASTMODIFIEDBY = [self getStringValueForSDMPropertyWithName:@"LASTMODIFIEDBY"];
}

- (void)loadNavigationPropertyQueries
{
    [super loadNavigationPropertyQueries];
    self.reportpagelayoutQuery = [self getRelatedLinkForNavigationName:@"reportpagelayout"];
}

- (void)loadNavigationPropertyData
{
    [super loadNavigationPropertyData];
    
    NSMutableArray *entries = nil;

    entries = [self getInlinedRelatedEntriesForNavigationName:@"reportpagelayout"];
    self.reportpagelayout = [reportpagelayoutTypeV0 createReportpagelayoutTypeEntriesForSDMEntries:entries];

}

+ (NSMutableArray *)createReportpagesTypeEntriesForSDMEntries:(NSMutableArray *)sdmEntries
{
    NSMutableArray *entries = [@[] mutableCopy];
    for (SDMODataEntry *entry in sdmEntries) {
        reportpagesTypeV0 *reportpagesTypeObject = [[reportpagesTypeV0 alloc] initWithSDMEntry:entry];
        [entries addObject:reportpagesTypeObject];
    }
    return entries;
}


+ (NSMutableArray *)parseReportpagesTypeEntriesWithData:(NSData *)aData error:(NSError **)error
{
    NSMutableArray *sdmEntries = [BaseEntityType getSDMEntriesForEntitySchema:reportpagesTypeEntitySchema andData:aData error:error];
    if (!sdmEntries) {
    	return nil;
    }
	return [reportpagesTypeV0 createReportpagesTypeEntriesForSDMEntries:sdmEntries];
}

+ (NSMutableArray *)parseExpandedReportpagesTypeEntriesWithData:(NSData *)aData andServiceDocument:(SDMODataServiceDocument *)aServiceDocument error:(NSError **)error
{
    NSMutableArray *sdmEntries = [BaseEntityType getExpandedSDMEntriesForEntitySchema:reportpagesTypeEntitySchema andData:aData andServiceDocument:aServiceDocument error:error];
    if (!sdmEntries) {
    	return nil;
    }
	return [reportpagesTypeV0 createReportpagesTypeEntriesForSDMEntries:sdmEntries];
}

+ (reportpagesTypeV0 *)parseReportpagesTypeEntryWithData:(NSData *)aData error:(NSError **)error
{
    NSMutableArray *reportpagesTypeEntries = [reportpagesTypeV0 parseReportpagesTypeEntriesWithData:aData error:error];
    if (!reportpagesTypeEntries) {
    	return nil;
    }
    return (reportpagesTypeV0 *)[reportpagesTypeV0 getFirstObjectFromArray:reportpagesTypeEntries];
}

+ (reportpagesTypeV0 *)parseExpandedReportpagesTypeEntryWithData:(NSData *)aData andServiceDocument:(SDMODataServiceDocument *)aServiceDocument error:(NSError **)error
{
	NSMutableArray *sdmEntries = [BaseEntityType getExpandedSDMEntriesForEntitySchema:reportpagesTypeEntitySchema andData:aData andServiceDocument:aServiceDocument error:error];
    NSMutableArray *reportpagesTypeEntries = [reportpagesTypeV0 createReportpagesTypeEntriesForSDMEntries:sdmEntries];
	return (reportpagesTypeV0 *)[reportpagesTypeV0 getFirstObjectFromArray:reportpagesTypeEntries];
}


#pragma mark Entity Navigation Property loading methods
- (BOOL)loadReportpagelayoutWithData:(NSData *)aData error:(NSError **)error
{
    self.reportpagelayout = [reportpagelayoutTypeV0 parseReportpagelayoutTypeEntriesWithData:aData error:error];
    if (!self.reportpagelayout) {
    	return NO;
    }
    return YES;
}


@end

#pragma mark - reportviewsTypeV0
@implementation reportviewsTypeV0

static NSMutableDictionary *reportviewsTypeLabels = nil;
static SDMODataEntitySchema *reportviewsTypeEntitySchema = nil;

- (id)init
{
    self = [super init];
    if (self) {
        m_SDMEntry = [BaseEntityType createEmptySDMODataEntryWithSchema:reportviewsTypeEntitySchema error:nil];
        if (!m_SDMEntry) {
            return nil;
        }        
        m_properties = nil;
        self.baseUrl = nil;
    }
    return self;
}

- (NSMutableDictionary *)getSDMEntriesForNavigationProperties
{
    NSMutableDictionary *dictionary = [@{} mutableCopy];
    if ([self.reportview count] > 0) {
    	dictionary[@"reportview"] = [self createSDMEntriesForNavigationPropertyEntries:self.reportview];
    }
    if ([self.reportviewfilters count] > 0) {
    	dictionary[@"reportviewfilters"] = [self createSDMEntriesForNavigationPropertyEntries:self.reportviewfilters];
    }
    return dictionary;
}


- (SDMODataEntry *)buildSDMEntryFromPropertiesAndReturnError:(NSError **)error
{
    if (m_SDMEntry) {
        NSError *innerError = nil;
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.REPORTVIEWID forSDMPropertyWithName:@"REPORTVIEWID" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.REPORTVIEWNAME forSDMPropertyWithName:@"REPORTVIEWNAME" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.REPORTVIEWDESCR forSDMPropertyWithName:@"REPORTVIEWDESCR" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.REPORTVIEWTYPE forSDMPropertyWithName:@"REPORTVIEWTYPE" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.ISOWNER forSDMPropertyWithName:@"ISOWNER" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.ISMOBILEENABLED forSDMPropertyWithName:@"ISMOBILEENABLED" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.REPORTID forSDMPropertyWithName:@"REPORTID" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.DISPLAYLEGEND forSDMPropertyWithName:@"DISPLAYLEGEND" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.LEGENDPOSITION forSDMPropertyWithName:@"LEGENDPOSITION" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.CREATEDBY forSDMPropertyWithName:@"CREATEDBY" error:&innerError];
    	[BaseODataObject setDateTimeValueForSDMEntry:m_SDMEntry withValue:self.CREATEDDATE forSDMPropertyWithName:@"CREATEDDATE" error:&innerError];
    	[BaseODataObject setDateTimeValueForSDMEntry:m_SDMEntry withValue:self.LASTMODIFIEDDATE forSDMPropertyWithName:@"LASTMODIFIEDDATE" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.LASTMODIFIEDBY forSDMPropertyWithName:@"LASTMODIFIEDBY" error:&innerError];
        [self addRelativeLinksToSDMEntryFromDictionary:[self getSDMEntriesForNavigationProperties]];
        if (innerError) {
            if (error) {
                *error = innerError;
            }
            return nil;
        }
	}
    return m_SDMEntry;
}

+ (void)loadEntitySchema:(SDMODataServiceDocument *)aService
{
    SDMODataCollection *collectionSchema = [aService.schema getCollectionByName:@"reportviews" workspaceOfCollection:nil];
    reportviewsTypeEntitySchema = collectionSchema.entitySchema;
}

+ (void)loadLabels:(SDMODataServiceDocument *)aService
{
		NSMutableDictionary *properties = [BaseODataObject getSchemaPropertiesFromCollection:@"reportviews" andService:aService];
    	if (properties) {    
	    	reportviewsTypeLabels = [@{} mutableCopy];
	    	for (SDMODataPropertyInfo *property in [properties allValues]) {
	        	reportviewsTypeLabels[property.name] = property.label;;
	    	}
	    }
	    else {
        	LOGERROR(@"Failed to load SAP labels from service metadata");
    	}
}


+ (NSString *)getLabelForProperty:(NSString *)aPropertyName
{
    return [BaseODataObject getLabelFromDictionary:reportviewsTypeLabels forProperty:aPropertyName];
}

- (void)loadProperties
{
    [super loadProperties];
	self.REPORTVIEWID = [self getStringValueForSDMPropertyWithName:@"REPORTVIEWID"];
	self.REPORTVIEWNAME = [self getStringValueForSDMPropertyWithName:@"REPORTVIEWNAME"];
	self.REPORTVIEWDESCR = [self getStringValueForSDMPropertyWithName:@"REPORTVIEWDESCR"];
	self.REPORTVIEWTYPE = [self getStringValueForSDMPropertyWithName:@"REPORTVIEWTYPE"];
	self.ISOWNER = [self getStringValueForSDMPropertyWithName:@"ISOWNER"];
	self.ISMOBILEENABLED = [self getStringValueForSDMPropertyWithName:@"ISMOBILEENABLED"];
	self.REPORTID = [self getStringValueForSDMPropertyWithName:@"REPORTID"];
	self.DISPLAYLEGEND = [self getStringValueForSDMPropertyWithName:@"DISPLAYLEGEND"];
	self.LEGENDPOSITION = [self getStringValueForSDMPropertyWithName:@"LEGENDPOSITION"];
	self.CREATEDBY = [self getStringValueForSDMPropertyWithName:@"CREATEDBY"];
	self.CREATEDDATE = [self getDateTimeValueForSDMPropertyWithName:@"CREATEDDATE"];
	self.LASTMODIFIEDDATE = [self getDateTimeValueForSDMPropertyWithName:@"LASTMODIFIEDDATE"];
	self.LASTMODIFIEDBY = [self getStringValueForSDMPropertyWithName:@"LASTMODIFIEDBY"];
}

- (void)loadNavigationPropertyQueries
{
    [super loadNavigationPropertyQueries];
    self.reportviewQuery = [self getRelatedLinkForNavigationName:@"reportview"];
    self.reportviewfiltersQuery = [self getRelatedLinkForNavigationName:@"reportviewfilters"];
}

- (void)loadNavigationPropertyData
{
    [super loadNavigationPropertyData];
    
    NSMutableArray *entries = nil;

    entries = [self getInlinedRelatedEntriesForNavigationName:@"reportview"];
    self.reportview = [reportviewTypeV0 createReportviewTypeEntriesForSDMEntries:entries];

    entries = [self getInlinedRelatedEntriesForNavigationName:@"reportviewfilters"];
    self.reportviewfilters = [reportviewfiltersTypeV0 createReportviewfiltersTypeEntriesForSDMEntries:entries];

}

+ (NSMutableArray *)createReportviewsTypeEntriesForSDMEntries:(NSMutableArray *)sdmEntries
{
    NSMutableArray *entries = [@[] mutableCopy];
    for (SDMODataEntry *entry in sdmEntries) {
        reportviewsTypeV0 *reportviewsTypeObject = [[reportviewsTypeV0 alloc] initWithSDMEntry:entry];
        [entries addObject:reportviewsTypeObject];
    }
    return entries;
}


+ (NSMutableArray *)parseReportviewsTypeEntriesWithData:(NSData *)aData error:(NSError **)error
{
    NSMutableArray *sdmEntries = [BaseEntityType getSDMEntriesForEntitySchema:reportviewsTypeEntitySchema andData:aData error:error];
    if (!sdmEntries) {
    	return nil;
    }
	return [reportviewsTypeV0 createReportviewsTypeEntriesForSDMEntries:sdmEntries];
}

+ (NSMutableArray *)parseExpandedReportviewsTypeEntriesWithData:(NSData *)aData andServiceDocument:(SDMODataServiceDocument *)aServiceDocument error:(NSError **)error
{
    NSMutableArray *sdmEntries = [BaseEntityType getExpandedSDMEntriesForEntitySchema:reportviewsTypeEntitySchema andData:aData andServiceDocument:aServiceDocument error:error];
    if (!sdmEntries) {
    	return nil;
    }
	return [reportviewsTypeV0 createReportviewsTypeEntriesForSDMEntries:sdmEntries];
}

+ (reportviewsTypeV0 *)parseReportviewsTypeEntryWithData:(NSData *)aData error:(NSError **)error
{
    NSMutableArray *reportviewsTypeEntries = [reportviewsTypeV0 parseReportviewsTypeEntriesWithData:aData error:error];
    if (!reportviewsTypeEntries) {
    	return nil;
    }
    return (reportviewsTypeV0 *)[reportviewsTypeV0 getFirstObjectFromArray:reportviewsTypeEntries];
}

+ (reportviewsTypeV0 *)parseExpandedReportviewsTypeEntryWithData:(NSData *)aData andServiceDocument:(SDMODataServiceDocument *)aServiceDocument error:(NSError **)error
{
	NSMutableArray *sdmEntries = [BaseEntityType getExpandedSDMEntriesForEntitySchema:reportviewsTypeEntitySchema andData:aData andServiceDocument:aServiceDocument error:error];
    NSMutableArray *reportviewsTypeEntries = [reportviewsTypeV0 createReportviewsTypeEntriesForSDMEntries:sdmEntries];
	return (reportviewsTypeV0 *)[reportviewsTypeV0 getFirstObjectFromArray:reportviewsTypeEntries];
}


#pragma mark Entity Navigation Property loading methods
- (BOOL)loadReportviewWithData:(NSData *)aData error:(NSError **)error
{
    self.reportview = [reportviewTypeV0 parseReportviewTypeEntriesWithData:aData error:error];
    if (!self.reportview) {
    	return NO;
    }
    return YES;
}

- (BOOL)loadReportviewfiltersWithData:(NSData *)aData error:(NSError **)error
{
    self.reportviewfilters = [reportviewfiltersTypeV0 parseReportviewfiltersTypeEntriesWithData:aData error:error];
    if (!self.reportviewfilters) {
    	return NO;
    }
    return YES;
}


@end

#pragma mark - reportpagelayoutTypeV0
@implementation reportpagelayoutTypeV0

static NSMutableDictionary *reportpagelayoutTypeLabels = nil;
static SDMODataEntitySchema *reportpagelayoutTypeEntitySchema = nil;

- (id)init
{
    self = [super init];
    if (self) {
        m_SDMEntry = [BaseEntityType createEmptySDMODataEntryWithSchema:reportpagelayoutTypeEntitySchema error:nil];
        if (!m_SDMEntry) {
            return nil;
        }        
        m_properties = nil;
        self.baseUrl = nil;
    }
    return self;
}

- (NSMutableDictionary *)getSDMEntriesForNavigationProperties
{
    NSMutableDictionary *dictionary = [@{} mutableCopy];
    if ([self.reportview count] > 0) {
    	dictionary[@"reportview"] = [self createSDMEntriesForNavigationPropertyEntries:self.reportview];
    }
    return dictionary;
}


- (SDMODataEntry *)buildSDMEntryFromPropertiesAndReturnError:(NSError **)error
{
    if (m_SDMEntry) {
        NSError *innerError = nil;
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.REPORTPAGEID forSDMPropertyWithName:@"REPORTPAGEID" error:&innerError];
    	[BaseODataObject setIntValueForSDMEntry:m_SDMEntry withValue:self.ROWNUMBER forSDMPropertyWithName:@"ROWNUMBER" error:&innerError];
    	[BaseODataObject setIntValueForSDMEntry:m_SDMEntry withValue:self.COLUMNNUMBER forSDMPropertyWithName:@"COLUMNNUMBER" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.REPORTID forSDMPropertyWithName:@"REPORTID" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.REPORTVIEWNAME forSDMPropertyWithName:@"REPORTVIEWNAME" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.REPORTVIEWID forSDMPropertyWithName:@"REPORTVIEWID" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.REPORTVIEWTYPE forSDMPropertyWithName:@"REPORTVIEWTYPE" error:&innerError];
    	[BaseODataObject setIntValueForSDMEntry:m_SDMEntry withValue:self.ROWSPAN forSDMPropertyWithName:@"ROWSPAN" error:&innerError];
    	[BaseODataObject setIntValueForSDMEntry:m_SDMEntry withValue:self.COLUMNSPAN forSDMPropertyWithName:@"COLUMNSPAN" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.LEGENDPOSITION forSDMPropertyWithName:@"LEGENDPOSITION" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.DISPLAYLEGEND forSDMPropertyWithName:@"DISPLAYLEGEND" error:&innerError];
        [self addRelativeLinksToSDMEntryFromDictionary:[self getSDMEntriesForNavigationProperties]];
        if (innerError) {
            if (error) {
                *error = innerError;
            }
            return nil;
        }
	}
    return m_SDMEntry;
}

+ (void)loadEntitySchema:(SDMODataServiceDocument *)aService
{
    SDMODataCollection *collectionSchema = [aService.schema getCollectionByName:@"reportpagelayout" workspaceOfCollection:nil];
    reportpagelayoutTypeEntitySchema = collectionSchema.entitySchema;
}

+ (void)loadLabels:(SDMODataServiceDocument *)aService
{
		NSMutableDictionary *properties = [BaseODataObject getSchemaPropertiesFromCollection:@"reportpagelayout" andService:aService];
    	if (properties) {    
	    	reportpagelayoutTypeLabels = [@{} mutableCopy];
	    	for (SDMODataPropertyInfo *property in [properties allValues]) {
	        	reportpagelayoutTypeLabels[property.name] = property.label;;
	    	}
	    }
	    else {
        	LOGERROR(@"Failed to load SAP labels from service metadata");
    	}
}


+ (NSString *)getLabelForProperty:(NSString *)aPropertyName
{
    return [BaseODataObject getLabelFromDictionary:reportpagelayoutTypeLabels forProperty:aPropertyName];
}

- (void)loadProperties
{
    [super loadProperties];
	self.REPORTPAGEID = [self getStringValueForSDMPropertyWithName:@"REPORTPAGEID"];
	self.ROWNUMBER = [self getIntValueForSDMPropertyWithName:@"ROWNUMBER"];
	self.COLUMNNUMBER = [self getIntValueForSDMPropertyWithName:@"COLUMNNUMBER"];
	self.REPORTID = [self getStringValueForSDMPropertyWithName:@"REPORTID"];
	self.REPORTVIEWNAME = [self getStringValueForSDMPropertyWithName:@"REPORTVIEWNAME"];
	self.REPORTVIEWID = [self getStringValueForSDMPropertyWithName:@"REPORTVIEWID"];
	self.REPORTVIEWTYPE = [self getStringValueForSDMPropertyWithName:@"REPORTVIEWTYPE"];
	self.ROWSPAN = [self getIntValueForSDMPropertyWithName:@"ROWSPAN"];
	self.COLUMNSPAN = [self getIntValueForSDMPropertyWithName:@"COLUMNSPAN"];
	self.LEGENDPOSITION = [self getStringValueForSDMPropertyWithName:@"LEGENDPOSITION"];
	self.DISPLAYLEGEND = [self getStringValueForSDMPropertyWithName:@"DISPLAYLEGEND"];
}

- (void)loadNavigationPropertyQueries
{
    [super loadNavigationPropertyQueries];
    self.reportviewQuery = [self getRelatedLinkForNavigationName:@"reportview"];
}

- (void)loadNavigationPropertyData
{
    [super loadNavigationPropertyData];
    
    NSMutableArray *entries = nil;

    entries = [self getInlinedRelatedEntriesForNavigationName:@"reportview"];
    self.reportview = [reportviewTypeV0 createReportviewTypeEntriesForSDMEntries:entries];

}

+ (NSMutableArray *)createReportpagelayoutTypeEntriesForSDMEntries:(NSMutableArray *)sdmEntries
{
    NSMutableArray *entries = [@[] mutableCopy];
    for (SDMODataEntry *entry in sdmEntries) {
        reportpagelayoutTypeV0 *reportpagelayoutTypeObject = [[reportpagelayoutTypeV0 alloc] initWithSDMEntry:entry];
        [entries addObject:reportpagelayoutTypeObject];
    }
    return entries;
}


+ (NSMutableArray *)parseReportpagelayoutTypeEntriesWithData:(NSData *)aData error:(NSError **)error
{
    NSMutableArray *sdmEntries = [BaseEntityType getSDMEntriesForEntitySchema:reportpagelayoutTypeEntitySchema andData:aData error:error];
    if (!sdmEntries) {
    	return nil;
    }
	return [reportpagelayoutTypeV0 createReportpagelayoutTypeEntriesForSDMEntries:sdmEntries];
}

+ (NSMutableArray *)parseExpandedReportpagelayoutTypeEntriesWithData:(NSData *)aData andServiceDocument:(SDMODataServiceDocument *)aServiceDocument error:(NSError **)error
{
    NSMutableArray *sdmEntries = [BaseEntityType getExpandedSDMEntriesForEntitySchema:reportpagelayoutTypeEntitySchema andData:aData andServiceDocument:aServiceDocument error:error];
    if (!sdmEntries) {
    	return nil;
    }
	return [reportpagelayoutTypeV0 createReportpagelayoutTypeEntriesForSDMEntries:sdmEntries];
}

+ (reportpagelayoutTypeV0 *)parseReportpagelayoutTypeEntryWithData:(NSData *)aData error:(NSError **)error
{
    NSMutableArray *reportpagelayoutTypeEntries = [reportpagelayoutTypeV0 parseReportpagelayoutTypeEntriesWithData:aData error:error];
    if (!reportpagelayoutTypeEntries) {
    	return nil;
    }
    return (reportpagelayoutTypeV0 *)[reportpagelayoutTypeV0 getFirstObjectFromArray:reportpagelayoutTypeEntries];
}

+ (reportpagelayoutTypeV0 *)parseExpandedReportpagelayoutTypeEntryWithData:(NSData *)aData andServiceDocument:(SDMODataServiceDocument *)aServiceDocument error:(NSError **)error
{
	NSMutableArray *sdmEntries = [BaseEntityType getExpandedSDMEntriesForEntitySchema:reportpagelayoutTypeEntitySchema andData:aData andServiceDocument:aServiceDocument error:error];
    NSMutableArray *reportpagelayoutTypeEntries = [reportpagelayoutTypeV0 createReportpagelayoutTypeEntriesForSDMEntries:sdmEntries];
	return (reportpagelayoutTypeV0 *)[reportpagelayoutTypeV0 getFirstObjectFromArray:reportpagelayoutTypeEntries];
}


#pragma mark Entity Navigation Property loading methods
- (BOOL)loadReportviewWithData:(NSData *)aData error:(NSError **)error
{
    self.reportview = [reportviewTypeV0 parseReportviewTypeEntriesWithData:aData error:error];
    if (!self.reportview) {
    	return NO;
    }
    return YES;
}


@end

#pragma mark - reportviewTypeV0
@implementation reportviewTypeV0

static NSMutableDictionary *reportviewTypeLabels = nil;
static SDMODataEntitySchema *reportviewTypeEntitySchema = nil;

- (id)init
{
    self = [super init];
    if (self) {
        m_SDMEntry = [BaseEntityType createEmptySDMODataEntryWithSchema:reportviewTypeEntitySchema error:nil];
        if (!m_SDMEntry) {
            return nil;
        }        
        m_properties = nil;
        self.baseUrl = nil;
    }
    return self;
}



- (SDMODataEntry *)buildSDMEntryFromPropertiesAndReturnError:(NSError **)error
{
    if (m_SDMEntry) {
        NSError *innerError = nil;
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.REPORTID forSDMPropertyWithName:@"REPORTID" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.REPORTVIEWID forSDMPropertyWithName:@"REPORTVIEWID" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.ATTR_ID forSDMPropertyWithName:@"ATTR_ID" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.ATTR_NAME forSDMPropertyWithName:@"ATTR_NAME" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.ATTR_TYPE forSDMPropertyWithName:@"ATTR_TYPE" error:&innerError];
    	[BaseODataObject setIntValueForSDMEntry:m_SDMEntry withValue:self.SEQUENCE forSDMPropertyWithName:@"SEQUENCE" error:&innerError];
        if (innerError) {
            if (error) {
                *error = innerError;
            }
            return nil;
        }
	}
    return m_SDMEntry;
}

+ (void)loadEntitySchema:(SDMODataServiceDocument *)aService
{
    SDMODataCollection *collectionSchema = [aService.schema getCollectionByName:@"reportview" workspaceOfCollection:nil];
    reportviewTypeEntitySchema = collectionSchema.entitySchema;
}

+ (void)loadLabels:(SDMODataServiceDocument *)aService
{
		NSMutableDictionary *properties = [BaseODataObject getSchemaPropertiesFromCollection:@"reportview" andService:aService];
    	if (properties) {    
	    	reportviewTypeLabels = [@{} mutableCopy];
	    	for (SDMODataPropertyInfo *property in [properties allValues]) {
	        	reportviewTypeLabels[property.name] = property.label;;
	    	}
	    }
	    else {
        	LOGERROR(@"Failed to load SAP labels from service metadata");
    	}
}


+ (NSString *)getLabelForProperty:(NSString *)aPropertyName
{
    return [BaseODataObject getLabelFromDictionary:reportviewTypeLabels forProperty:aPropertyName];
}

- (void)loadProperties
{
    [super loadProperties];
	self.REPORTID = [self getStringValueForSDMPropertyWithName:@"REPORTID"];
	self.REPORTVIEWID = [self getStringValueForSDMPropertyWithName:@"REPORTVIEWID"];
	self.ATTR_ID = [self getStringValueForSDMPropertyWithName:@"ATTR_ID"];
	self.ATTR_NAME = [self getStringValueForSDMPropertyWithName:@"ATTR_NAME"];
	self.ATTR_TYPE = [self getStringValueForSDMPropertyWithName:@"ATTR_TYPE"];
	self.SEQUENCE = [self getIntValueForSDMPropertyWithName:@"SEQUENCE"];
}

+ (NSMutableArray *)createReportviewTypeEntriesForSDMEntries:(NSMutableArray *)sdmEntries
{
    NSMutableArray *entries = [@[] mutableCopy];
    for (SDMODataEntry *entry in sdmEntries) {
        reportviewTypeV0 *reportviewTypeObject = [[reportviewTypeV0 alloc] initWithSDMEntry:entry];
        [entries addObject:reportviewTypeObject];
    }
    return entries;
}


+ (NSMutableArray *)parseReportviewTypeEntriesWithData:(NSData *)aData error:(NSError **)error
{
    NSMutableArray *sdmEntries = [BaseEntityType getSDMEntriesForEntitySchema:reportviewTypeEntitySchema andData:aData error:error];
    if (!sdmEntries) {
    	return nil;
    }
	return [reportviewTypeV0 createReportviewTypeEntriesForSDMEntries:sdmEntries];
}

+ (NSMutableArray *)parseExpandedReportviewTypeEntriesWithData:(NSData *)aData andServiceDocument:(SDMODataServiceDocument *)aServiceDocument error:(NSError **)error
{
    NSMutableArray *sdmEntries = [BaseEntityType getExpandedSDMEntriesForEntitySchema:reportviewTypeEntitySchema andData:aData andServiceDocument:aServiceDocument error:error];
    if (!sdmEntries) {
    	return nil;
    }
	return [reportviewTypeV0 createReportviewTypeEntriesForSDMEntries:sdmEntries];
}

+ (reportviewTypeV0 *)parseReportviewTypeEntryWithData:(NSData *)aData error:(NSError **)error
{
    NSMutableArray *reportviewTypeEntries = [reportviewTypeV0 parseReportviewTypeEntriesWithData:aData error:error];
    if (!reportviewTypeEntries) {
    	return nil;
    }
    return (reportviewTypeV0 *)[reportviewTypeV0 getFirstObjectFromArray:reportviewTypeEntries];
}

+ (reportviewTypeV0 *)parseExpandedReportviewTypeEntryWithData:(NSData *)aData andServiceDocument:(SDMODataServiceDocument *)aServiceDocument error:(NSError **)error
{
	NSMutableArray *sdmEntries = [BaseEntityType getExpandedSDMEntriesForEntitySchema:reportviewTypeEntitySchema andData:aData andServiceDocument:aServiceDocument error:error];
    NSMutableArray *reportviewTypeEntries = [reportviewTypeV0 createReportviewTypeEntriesForSDMEntries:sdmEntries];
	return (reportviewTypeV0 *)[reportviewTypeV0 getFirstObjectFromArray:reportviewTypeEntries];
}



@end

#pragma mark - reportTypeV0
@implementation reportTypeV0

static NSMutableDictionary *reportTypeLabels = nil;
static SDMODataEntitySchema *reportTypeEntitySchema = nil;

- (id)init
{
    self = [super init];
    if (self) {
        m_SDMEntry = [BaseEntityType createEmptySDMODataEntryWithSchema:reportTypeEntitySchema error:nil];
        if (!m_SDMEntry) {
            return nil;
        }        
        m_properties = nil;
        self.baseUrl = nil;
    }
    return self;
}



- (SDMODataEntry *)buildSDMEntryFromPropertiesAndReturnError:(NSError **)error
{
    if (m_SDMEntry) {
        NSError *innerError = nil;
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.REPORTID forSDMPropertyWithName:@"REPORTID" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.ATTR_ID forSDMPropertyWithName:@"ATTR_ID" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.ATTR_NAME forSDMPropertyWithName:@"ATTR_NAME" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.ATTR_TYPE forSDMPropertyWithName:@"ATTR_TYPE" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.PLAN_OBJECT forSDMPropertyWithName:@"PLAN_OBJECT" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.PLAN_OBJECT_DESCR forSDMPropertyWithName:@"PLAN_OBJECT_DESCR" error:&innerError];
        if (innerError) {
            if (error) {
                *error = innerError;
            }
            return nil;
        }
	}
    return m_SDMEntry;
}

+ (void)loadEntitySchema:(SDMODataServiceDocument *)aService
{
    SDMODataCollection *collectionSchema = [aService.schema getCollectionByName:@"report" workspaceOfCollection:nil];
    reportTypeEntitySchema = collectionSchema.entitySchema;
}

+ (void)loadLabels:(SDMODataServiceDocument *)aService
{
		NSMutableDictionary *properties = [BaseODataObject getSchemaPropertiesFromCollection:@"report" andService:aService];
    	if (properties) {    
	    	reportTypeLabels = [@{} mutableCopy];
	    	for (SDMODataPropertyInfo *property in [properties allValues]) {
	        	reportTypeLabels[property.name] = property.label;;
	    	}
	    }
	    else {
        	LOGERROR(@"Failed to load SAP labels from service metadata");
    	}
}


+ (NSString *)getLabelForProperty:(NSString *)aPropertyName
{
    return [BaseODataObject getLabelFromDictionary:reportTypeLabels forProperty:aPropertyName];
}

- (void)loadProperties
{
    [super loadProperties];
	self.REPORTID = [self getStringValueForSDMPropertyWithName:@"REPORTID"];
	self.ATTR_ID = [self getStringValueForSDMPropertyWithName:@"ATTR_ID"];
	self.ATTR_NAME = [self getStringValueForSDMPropertyWithName:@"ATTR_NAME"];
	self.ATTR_TYPE = [self getStringValueForSDMPropertyWithName:@"ATTR_TYPE"];
	self.PLAN_OBJECT = [self getStringValueForSDMPropertyWithName:@"PLAN_OBJECT"];
	self.PLAN_OBJECT_DESCR = [self getStringValueForSDMPropertyWithName:@"PLAN_OBJECT_DESCR"];
}

+ (NSMutableArray *)createReportTypeEntriesForSDMEntries:(NSMutableArray *)sdmEntries
{
    NSMutableArray *entries = [@[] mutableCopy];
    for (SDMODataEntry *entry in sdmEntries) {
        reportTypeV0 *reportTypeObject = [[reportTypeV0 alloc] initWithSDMEntry:entry];
        [entries addObject:reportTypeObject];
    }
    return entries;
}


+ (NSMutableArray *)parseReportTypeEntriesWithData:(NSData *)aData error:(NSError **)error
{
    NSMutableArray *sdmEntries = [BaseEntityType getSDMEntriesForEntitySchema:reportTypeEntitySchema andData:aData error:error];
    if (!sdmEntries) {
    	return nil;
    }
	return [reportTypeV0 createReportTypeEntriesForSDMEntries:sdmEntries];
}

+ (NSMutableArray *)parseExpandedReportTypeEntriesWithData:(NSData *)aData andServiceDocument:(SDMODataServiceDocument *)aServiceDocument error:(NSError **)error
{
    NSMutableArray *sdmEntries = [BaseEntityType getExpandedSDMEntriesForEntitySchema:reportTypeEntitySchema andData:aData andServiceDocument:aServiceDocument error:error];
    if (!sdmEntries) {
    	return nil;
    }
	return [reportTypeV0 createReportTypeEntriesForSDMEntries:sdmEntries];
}

+ (reportTypeV0 *)parseReportTypeEntryWithData:(NSData *)aData error:(NSError **)error
{
    NSMutableArray *reportTypeEntries = [reportTypeV0 parseReportTypeEntriesWithData:aData error:error];
    if (!reportTypeEntries) {
    	return nil;
    }
    return (reportTypeV0 *)[reportTypeV0 getFirstObjectFromArray:reportTypeEntries];
}

+ (reportTypeV0 *)parseExpandedReportTypeEntryWithData:(NSData *)aData andServiceDocument:(SDMODataServiceDocument *)aServiceDocument error:(NSError **)error
{
	NSMutableArray *sdmEntries = [BaseEntityType getExpandedSDMEntriesForEntitySchema:reportTypeEntitySchema andData:aData andServiceDocument:aServiceDocument error:error];
    NSMutableArray *reportTypeEntries = [reportTypeV0 createReportTypeEntriesForSDMEntries:sdmEntries];
	return (reportTypeV0 *)[reportTypeV0 getFirstObjectFromArray:reportTypeEntries];
}



@end

#pragma mark - reportviewfiltersTypeV0
@implementation reportviewfiltersTypeV0

static NSMutableDictionary *reportviewfiltersTypeLabels = nil;
static SDMODataEntitySchema *reportviewfiltersTypeEntitySchema = nil;

- (id)init
{
    self = [super init];
    if (self) {
        m_SDMEntry = [BaseEntityType createEmptySDMODataEntryWithSchema:reportviewfiltersTypeEntitySchema error:nil];
        if (!m_SDMEntry) {
            return nil;
        }        
        m_properties = nil;
        self.baseUrl = nil;
    }
    return self;
}



- (SDMODataEntry *)buildSDMEntryFromPropertiesAndReturnError:(NSError **)error
{
    if (m_SDMEntry) {
        NSError *innerError = nil;
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.REPORTVIEWID forSDMPropertyWithName:@"REPORTVIEWID" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.OPERATOR forSDMPropertyWithName:@"OPERATOR" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.ATTR forSDMPropertyWithName:@"ATTR" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.ATTR_VAL forSDMPropertyWithName:@"ATTR_VAL" error:&innerError];
        if (innerError) {
            if (error) {
                *error = innerError;
            }
            return nil;
        }
	}
    return m_SDMEntry;
}

+ (void)loadEntitySchema:(SDMODataServiceDocument *)aService
{
    SDMODataCollection *collectionSchema = [aService.schema getCollectionByName:@"reportviewfilters" workspaceOfCollection:nil];
    reportviewfiltersTypeEntitySchema = collectionSchema.entitySchema;
}

+ (void)loadLabels:(SDMODataServiceDocument *)aService
{
		NSMutableDictionary *properties = [BaseODataObject getSchemaPropertiesFromCollection:@"reportviewfilters" andService:aService];
    	if (properties) {    
	    	reportviewfiltersTypeLabels = [@{} mutableCopy];
	    	for (SDMODataPropertyInfo *property in [properties allValues]) {
	        	reportviewfiltersTypeLabels[property.name] = property.label;;
	    	}
	    }
	    else {
        	LOGERROR(@"Failed to load SAP labels from service metadata");
    	}
}


+ (NSString *)getLabelForProperty:(NSString *)aPropertyName
{
    return [BaseODataObject getLabelFromDictionary:reportviewfiltersTypeLabels forProperty:aPropertyName];
}

- (void)loadProperties
{
    [super loadProperties];
	self.REPORTVIEWID = [self getStringValueForSDMPropertyWithName:@"REPORTVIEWID"];
	self.OPERATOR = [self getStringValueForSDMPropertyWithName:@"OPERATOR"];
	self.ATTR = [self getStringValueForSDMPropertyWithName:@"ATTR"];
	self.ATTR_VAL = [self getStringValueForSDMPropertyWithName:@"ATTR_VAL"];
}

+ (NSMutableArray *)createReportviewfiltersTypeEntriesForSDMEntries:(NSMutableArray *)sdmEntries
{
    NSMutableArray *entries = [@[] mutableCopy];
    for (SDMODataEntry *entry in sdmEntries) {
        reportviewfiltersTypeV0 *reportviewfiltersTypeObject = [[reportviewfiltersTypeV0 alloc] initWithSDMEntry:entry];
        [entries addObject:reportviewfiltersTypeObject];
    }
    return entries;
}


+ (NSMutableArray *)parseReportviewfiltersTypeEntriesWithData:(NSData *)aData error:(NSError **)error
{
    NSMutableArray *sdmEntries = [BaseEntityType getSDMEntriesForEntitySchema:reportviewfiltersTypeEntitySchema andData:aData error:error];
    if (!sdmEntries) {
    	return nil;
    }
	return [reportviewfiltersTypeV0 createReportviewfiltersTypeEntriesForSDMEntries:sdmEntries];
}

+ (NSMutableArray *)parseExpandedReportviewfiltersTypeEntriesWithData:(NSData *)aData andServiceDocument:(SDMODataServiceDocument *)aServiceDocument error:(NSError **)error
{
    NSMutableArray *sdmEntries = [BaseEntityType getExpandedSDMEntriesForEntitySchema:reportviewfiltersTypeEntitySchema andData:aData andServiceDocument:aServiceDocument error:error];
    if (!sdmEntries) {
    	return nil;
    }
	return [reportviewfiltersTypeV0 createReportviewfiltersTypeEntriesForSDMEntries:sdmEntries];
}

+ (reportviewfiltersTypeV0 *)parseReportviewfiltersTypeEntryWithData:(NSData *)aData error:(NSError **)error
{
    NSMutableArray *reportviewfiltersTypeEntries = [reportviewfiltersTypeV0 parseReportviewfiltersTypeEntriesWithData:aData error:error];
    if (!reportviewfiltersTypeEntries) {
    	return nil;
    }
    return (reportviewfiltersTypeV0 *)[reportviewfiltersTypeV0 getFirstObjectFromArray:reportviewfiltersTypeEntries];
}

+ (reportviewfiltersTypeV0 *)parseExpandedReportviewfiltersTypeEntryWithData:(NSData *)aData andServiceDocument:(SDMODataServiceDocument *)aServiceDocument error:(NSError **)error
{
	NSMutableArray *sdmEntries = [BaseEntityType getExpandedSDMEntriesForEntitySchema:reportviewfiltersTypeEntitySchema andData:aData andServiceDocument:aServiceDocument error:error];
    NSMutableArray *reportviewfiltersTypeEntries = [reportviewfiltersTypeV0 createReportviewfiltersTypeEntriesForSDMEntries:sdmEntries];
	return (reportviewfiltersTypeV0 *)[reportviewfiltersTypeV0 getFirstObjectFromArray:reportviewfiltersTypeEntries];
}



@end


#pragma mark - sapsopaV0 Service Proxy


@implementation sapsopaServiceV0

- (NSString *)getServiceDocumentFilename
{
	return SAPSOPA_SERVICE_DOCUMENTV0;
}

- (NSString *)getServiceMetadataFilename
{
	return SAPSOPA_SERVICE_METADATAV0;
}

- (void)loadEntitySetQueries
{
	[super loadEntitySetQueries];
    self.reportsQuery = [self getQueryForRelativePath:@"reports"];
    self.reportpagesQuery = [self getQueryForRelativePath:@"reportpages"];
    self.reportviewsQuery = [self getQueryForRelativePath:@"reportviews"];
    self.reportpagelayoutQuery = [self getQueryForRelativePath:@"reportpagelayout"];
    self.reportviewQuery = [self getQueryForRelativePath:@"reportview"];
    self.reportQuery = [self getQueryForRelativePath:@"report"];
    self.reportviewfiltersQuery = [self getQueryForRelativePath:@"reportviewfilters"];
}

- (void)loadEntitySchemaForAllEntityTypes
{
    [super loadEntitySchemaForAllEntityTypes];
    [reportsTypeV0 loadEntitySchema:self.sdmServiceDocument];
    [reportpagesTypeV0 loadEntitySchema:self.sdmServiceDocument];
    [reportviewsTypeV0 loadEntitySchema:self.sdmServiceDocument];
    [reportpagelayoutTypeV0 loadEntitySchema:self.sdmServiceDocument];
    [reportviewTypeV0 loadEntitySchema:self.sdmServiceDocument];
    [reportTypeV0 loadEntitySchema:self.sdmServiceDocument];
    [reportviewfiltersTypeV0 loadEntitySchema:self.sdmServiceDocument];
}

- (void)loadLabels
{
    [super loadLabels];
    [reportsTypeV0 loadLabels:self.sdmServiceDocument];
    [reportpagesTypeV0 loadLabels:self.sdmServiceDocument];
    [reportviewsTypeV0 loadLabels:self.sdmServiceDocument];
    [reportpagelayoutTypeV0 loadLabels:self.sdmServiceDocument];
    [reportviewTypeV0 loadLabels:self.sdmServiceDocument];
    [reportTypeV0 loadLabels:self.sdmServiceDocument];
    [reportviewfiltersTypeV0 loadLabels:self.sdmServiceDocument];
}

 
#pragma mark Service Entity Set methods
- (NSMutableArray *)getReportsWithData:(NSData *)aData error:(NSError **)error
{
	return [reportsTypeV0 parseExpandedReportsTypeEntriesWithData:aData andServiceDocument:self.sdmServiceDocument error:error];
}

- (ODataQuery *)getReportsEntryQueryWithREPORTID:(NSString *)REPORTID
{
	REPORTID = [ODataQuery encodeURLParameter:REPORTID];
	NSString *relativePath = [NSString stringWithFormat:@"reports(REPORTID=%@)", REPORTID];
	ODataQuery *query = [self getQueryForRelativePath:relativePath];
	return query;
}

- (ODataQuery *)getReportsEntryQueryTypedWithREPORTID:(NSString *)REPORTID
{
	id <URITypeConverting> converter = [ODataURITypeConverter uniqueInstance];
	NSString *REPORTIDUri = [ODataQuery encodeURLParameter:[converter convertToEdmStringURI:REPORTID]];
	NSString *relativePath = [NSString stringWithFormat:@"reports(REPORTID=%@)", REPORTIDUri];
	ODataQuery *query = [self getQueryForRelativePath:relativePath];
	return query;
}

- (reportsTypeV0 *)getReportsEntryWithData:(NSData *)aData error:(NSError **)error
{
	return [reportsTypeV0 parseExpandedReportsTypeEntryWithData:aData andServiceDocument:self.sdmServiceDocument error:error];
}

- (NSMutableArray *)getReportpagesWithData:(NSData *)aData error:(NSError **)error
{
	return [reportpagesTypeV0 parseExpandedReportpagesTypeEntriesWithData:aData andServiceDocument:self.sdmServiceDocument error:error];
}

- (ODataQuery *)getReportpagesEntryQueryWithREPORTPAGEID:(NSString *)REPORTPAGEID
{
	REPORTPAGEID = [ODataQuery encodeURLParameter:REPORTPAGEID];
	NSString *relativePath = [NSString stringWithFormat:@"reportpages(REPORTPAGEID=%@)", REPORTPAGEID];
	ODataQuery *query = [self getQueryForRelativePath:relativePath];
	return query;
}

- (ODataQuery *)getReportpagesEntryQueryTypedWithREPORTPAGEID:(NSString *)REPORTPAGEID
{
	id <URITypeConverting> converter = [ODataURITypeConverter uniqueInstance];
	NSString *REPORTPAGEIDUri = [ODataQuery encodeURLParameter:[converter convertToEdmStringURI:REPORTPAGEID]];
	NSString *relativePath = [NSString stringWithFormat:@"reportpages(REPORTPAGEID=%@)", REPORTPAGEIDUri];
	ODataQuery *query = [self getQueryForRelativePath:relativePath];
	return query;
}

- (reportpagesTypeV0 *)getReportpagesEntryWithData:(NSData *)aData error:(NSError **)error
{
	return [reportpagesTypeV0 parseExpandedReportpagesTypeEntryWithData:aData andServiceDocument:self.sdmServiceDocument error:error];
}

- (NSMutableArray *)getReportviewsWithData:(NSData *)aData error:(NSError **)error
{
	return [reportviewsTypeV0 parseExpandedReportviewsTypeEntriesWithData:aData andServiceDocument:self.sdmServiceDocument error:error];
}

- (ODataQuery *)getReportviewsEntryQueryWithREPORTVIEWID:(NSString *)REPORTVIEWID
{
	REPORTVIEWID = [ODataQuery encodeURLParameter:REPORTVIEWID];
	NSString *relativePath = [NSString stringWithFormat:@"reportviews(REPORTVIEWID=%@)", REPORTVIEWID];
	ODataQuery *query = [self getQueryForRelativePath:relativePath];
	return query;
}

- (ODataQuery *)getReportviewsEntryQueryTypedWithREPORTVIEWID:(NSString *)REPORTVIEWID
{
	id <URITypeConverting> converter = [ODataURITypeConverter uniqueInstance];
	NSString *REPORTVIEWIDUri = [ODataQuery encodeURLParameter:[converter convertToEdmStringURI:REPORTVIEWID]];
	NSString *relativePath = [NSString stringWithFormat:@"reportviews(REPORTVIEWID=%@)", REPORTVIEWIDUri];
	ODataQuery *query = [self getQueryForRelativePath:relativePath];
	return query;
}

- (reportviewsTypeV0 *)getReportviewsEntryWithData:(NSData *)aData error:(NSError **)error
{
	return [reportviewsTypeV0 parseExpandedReportviewsTypeEntryWithData:aData andServiceDocument:self.sdmServiceDocument error:error];
}

- (NSMutableArray *)getReportpagelayoutWithData:(NSData *)aData error:(NSError **)error
{
	return [reportpagelayoutTypeV0 parseExpandedReportpagelayoutTypeEntriesWithData:aData andServiceDocument:self.sdmServiceDocument error:error];
}

- (ODataQuery *)getReportpagelayoutEntryQueryWithREPORTPAGEID:(NSString *)REPORTPAGEID andROWNUMBER:(NSString *)ROWNUMBER andCOLUMNNUMBER:(NSString *)COLUMNNUMBER
{
	REPORTPAGEID = [ODataQuery encodeURLParameter:REPORTPAGEID];
	ROWNUMBER = [ODataQuery encodeURLParameter:ROWNUMBER];
	COLUMNNUMBER = [ODataQuery encodeURLParameter:COLUMNNUMBER];
	NSString *relativePath = [NSString stringWithFormat:@"reportpagelayout(REPORTPAGEID=%@,ROWNUMBER=%@,COLUMNNUMBER=%@)", REPORTPAGEID, ROWNUMBER, COLUMNNUMBER];
	ODataQuery *query = [self getQueryForRelativePath:relativePath];
	return query;
}

- (ODataQuery *)getReportpagelayoutEntryQueryTypedWithREPORTPAGEID:(NSString *)REPORTPAGEID andROWNUMBER:(NSNumber *)ROWNUMBER andCOLUMNNUMBER:(NSNumber *)COLUMNNUMBER
{
	id <URITypeConverting> converter = [ODataURITypeConverter uniqueInstance];
	NSString *REPORTPAGEIDUri = [ODataQuery encodeURLParameter:[converter convertToEdmStringURI:REPORTPAGEID]];
	NSString *ROWNUMBERUri = [ODataQuery encodeURLParameter:[converter convertToEdmByteURI:ROWNUMBER]];
	NSString *COLUMNNUMBERUri = [ODataQuery encodeURLParameter:[converter convertToEdmByteURI:COLUMNNUMBER]];
	NSString *relativePath = [NSString stringWithFormat:@"reportpagelayout(REPORTPAGEID=%@,ROWNUMBER=%@,COLUMNNUMBER=%@)", REPORTPAGEIDUri, ROWNUMBERUri, COLUMNNUMBERUri];
	ODataQuery *query = [self getQueryForRelativePath:relativePath];
	return query;
}

- (reportpagelayoutTypeV0 *)getReportpagelayoutEntryWithData:(NSData *)aData error:(NSError **)error
{
	return [reportpagelayoutTypeV0 parseExpandedReportpagelayoutTypeEntryWithData:aData andServiceDocument:self.sdmServiceDocument error:error];
}

- (NSMutableArray *)getReportviewWithData:(NSData *)aData error:(NSError **)error
{
	return [reportviewTypeV0 parseExpandedReportviewTypeEntriesWithData:aData andServiceDocument:self.sdmServiceDocument error:error];
}

- (ODataQuery *)getReportviewEntryQueryWithREPORTVIEWID:(NSString *)REPORTVIEWID andATTR_ID:(NSString *)ATTR_ID
{
	REPORTVIEWID = [ODataQuery encodeURLParameter:REPORTVIEWID];
	ATTR_ID = [ODataQuery encodeURLParameter:ATTR_ID];
	NSString *relativePath = [NSString stringWithFormat:@"reportview(REPORTVIEWID=%@,ATTR_ID=%@)", REPORTVIEWID, ATTR_ID];
	ODataQuery *query = [self getQueryForRelativePath:relativePath];
	return query;
}

- (ODataQuery *)getReportviewEntryQueryTypedWithREPORTVIEWID:(NSString *)REPORTVIEWID andATTR_ID:(NSString *)ATTR_ID
{
	id <URITypeConverting> converter = [ODataURITypeConverter uniqueInstance];
	NSString *REPORTVIEWIDUri = [ODataQuery encodeURLParameter:[converter convertToEdmStringURI:REPORTVIEWID]];
	NSString *ATTR_IDUri = [ODataQuery encodeURLParameter:[converter convertToEdmStringURI:ATTR_ID]];
	NSString *relativePath = [NSString stringWithFormat:@"reportview(REPORTVIEWID=%@,ATTR_ID=%@)", REPORTVIEWIDUri, ATTR_IDUri];
	ODataQuery *query = [self getQueryForRelativePath:relativePath];
	return query;
}

- (reportviewTypeV0 *)getReportviewEntryWithData:(NSData *)aData error:(NSError **)error
{
	return [reportviewTypeV0 parseExpandedReportviewTypeEntryWithData:aData andServiceDocument:self.sdmServiceDocument error:error];
}

- (NSMutableArray *)getReportWithData:(NSData *)aData error:(NSError **)error
{
	return [reportTypeV0 parseExpandedReportTypeEntriesWithData:aData andServiceDocument:self.sdmServiceDocument error:error];
}

- (ODataQuery *)getReportEntryQueryWithREPORTID:(NSString *)REPORTID andATTR_ID:(NSString *)ATTR_ID
{
	REPORTID = [ODataQuery encodeURLParameter:REPORTID];
	ATTR_ID = [ODataQuery encodeURLParameter:ATTR_ID];
	NSString *relativePath = [NSString stringWithFormat:@"report(REPORTID=%@,ATTR_ID=%@)", REPORTID, ATTR_ID];
	ODataQuery *query = [self getQueryForRelativePath:relativePath];
	return query;
}

- (ODataQuery *)getReportEntryQueryTypedWithREPORTID:(NSString *)REPORTID andATTR_ID:(NSString *)ATTR_ID
{
	id <URITypeConverting> converter = [ODataURITypeConverter uniqueInstance];
	NSString *REPORTIDUri = [ODataQuery encodeURLParameter:[converter convertToEdmStringURI:REPORTID]];
	NSString *ATTR_IDUri = [ODataQuery encodeURLParameter:[converter convertToEdmStringURI:ATTR_ID]];
	NSString *relativePath = [NSString stringWithFormat:@"report(REPORTID=%@,ATTR_ID=%@)", REPORTIDUri, ATTR_IDUri];
	ODataQuery *query = [self getQueryForRelativePath:relativePath];
	return query;
}

- (reportTypeV0 *)getReportEntryWithData:(NSData *)aData error:(NSError **)error
{
	return [reportTypeV0 parseExpandedReportTypeEntryWithData:aData andServiceDocument:self.sdmServiceDocument error:error];
}

- (NSMutableArray *)getReportviewfiltersWithData:(NSData *)aData error:(NSError **)error
{
	return [reportviewfiltersTypeV0 parseExpandedReportviewfiltersTypeEntriesWithData:aData andServiceDocument:self.sdmServiceDocument error:error];
}

- (ODataQuery *)getReportviewfiltersEntryQueryWithREPORTVIEWID:(NSString *)REPORTVIEWID andOPERATOR:(NSString *)OPERATOR andATTR:(NSString *)ATTR andATTR_VAL:(NSString *)ATTR_VAL
{
	REPORTVIEWID = [ODataQuery encodeURLParameter:REPORTVIEWID];
	OPERATOR = [ODataQuery encodeURLParameter:OPERATOR];
	ATTR = [ODataQuery encodeURLParameter:ATTR];
	ATTR_VAL = [ODataQuery encodeURLParameter:ATTR_VAL];
	NSString *relativePath = [NSString stringWithFormat:@"reportviewfilters(REPORTVIEWID=%@,OPERATOR=%@,ATTR=%@,ATTR_VAL=%@)", REPORTVIEWID, OPERATOR, ATTR, ATTR_VAL];
	ODataQuery *query = [self getQueryForRelativePath:relativePath];
	return query;
}

- (ODataQuery *)getReportviewfiltersEntryQueryTypedWithREPORTVIEWID:(NSString *)REPORTVIEWID andOPERATOR:(NSString *)OPERATOR andATTR:(NSString *)ATTR andATTR_VAL:(NSString *)ATTR_VAL
{
	id <URITypeConverting> converter = [ODataURITypeConverter uniqueInstance];
	NSString *REPORTVIEWIDUri = [ODataQuery encodeURLParameter:[converter convertToEdmStringURI:REPORTVIEWID]];
	NSString *OPERATORUri = [ODataQuery encodeURLParameter:[converter convertToEdmStringURI:OPERATOR]];
	NSString *ATTRUri = [ODataQuery encodeURLParameter:[converter convertToEdmStringURI:ATTR]];
	NSString *ATTR_VALUri = [ODataQuery encodeURLParameter:[converter convertToEdmStringURI:ATTR_VAL]];
	NSString *relativePath = [NSString stringWithFormat:@"reportviewfilters(REPORTVIEWID=%@,OPERATOR=%@,ATTR=%@,ATTR_VAL=%@)", REPORTVIEWIDUri, OPERATORUri, ATTRUri, ATTR_VALUri];
	ODataQuery *query = [self getQueryForRelativePath:relativePath];
	return query;
}

- (reportviewfiltersTypeV0 *)getReportviewfiltersEntryWithData:(NSData *)aData error:(NSError **)error
{
	return [reportviewfiltersTypeV0 parseExpandedReportviewfiltersTypeEntryWithData:aData andServiceDocument:self.sdmServiceDocument error:error];
}



#pragma mark Service Function Import methods 

@end
